

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 17 12:46:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           ; Version 1.45
    75                           ; Generated 16/11/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18LF4620 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataCOMRAM
   110  0024AE                     __pidataCOMRAM:
   111                           	opt stack 0
   112                           
   113                           ;initializer for ReadRTCAndDisplay@F3194
   114  0024AE  54                 	db	84
   115  0024AF  69                 	db	105
   116  0024B0  6D                 	db	109
   117  0024B1  65                 	db	101
   118  0024B2  00                 	db	0
   119                           
   120                           ;initializer for CookTimeDisplay@F3158
   121  0024B3  4D                 	db	77
   122  0024B4  49                 	db	73
   123  0024B5  4E                 	db	78
   124  0024B6  00                 	db	0
   125                           
   126                           ;initializer for ReadRTCAndDisplay@F3196
   127  0024B7  7C                 	db	124
   128  0024B8  00                 	db	0
   129                           
   130                           ;initializer for _min
   131  0024B9  02                 	db	2
   132                           
   133                           ;initializer for _hr
   134  0024BA  01                 	db	1
   135                           
   136                           ;initializer for _RTC_ADDRESS
   137  0024BB  DE                 	db	222
   138                           
   139                           ;initializer for _READ_MODE
   140  0024BC  01                 	db	1
   141                           
   142                           	psect	idataBANK0
   143  001FDA                     __pidataBANK0:
   144                           	opt stack 0
   145                           
   146                           ;initializer for CheckCookDone@F3210
   147  001FDA  42                 	db	66
   148  001FDB  61                 	db	97
   149  001FDC  6B                 	db	107
   150  001FDD  65                 	db	101
   151  001FDE  20                 	db	32
   152  001FDF  44                 	db	68
   153  001FE0  6F                 	db	111
   154  001FE1  6E                 	db	110
   155  001FE2  65                 	db	101
   156  001FE3  21                 	db	33
   157  001FE4  00                 	db	0
   158                           
   159                           ;initializer for CookTimeDisplay@F3152
   160  001FE5  42                 	db	66
   161  001FE6  61                 	db	97
   162  001FE7  6B                 	db	107
   163  001FE8  65                 	db	101
   164  001FE9  20                 	db	32
   165  001FEA  54                 	db	84
   166  001FEB  69                 	db	105
   167  001FEC  6D                 	db	109
   168  001FED  65                 	db	101
   169  001FEE  00                 	db	0
   170                           
   171                           ;initializer for BakeTempSet@F3127
   172  001FEF  42                 	db	66
   173  001FF0  61                 	db	97
   174  001FF1  6B                 	db	107
   175  001FF2  65                 	db	101
   176  001FF3  20                 	db	32
   177  001FF4  54                 	db	84
   178  001FF5  65                 	db	101
   179  001FF6  6D                 	db	109
   180  001FF7  70                 	db	112
   181  001FF8  00                 	db	0
   182                           
   183                           ;initializer for TimeSetting@F3160
   184  001FF9  53                 	db	83
   185  001FFA  65                 	db	101
   186  001FFB  74                 	db	116
   187  001FFC  20                 	db	32
   188  001FFD  54                 	db	84
   189  001FFE  69                 	db	105
   190  001FFF  6D                 	db	109
   191  002000  65                 	db	101
   192  002001  00                 	db	0
   193                           
   194                           ;initializer for CookTimeDisplay@F3156
   195  002002  7C                 	db	124
   196  002003  53                 	db	83
   197  002004  74                 	db	116
   198  002005  61                 	db	97
   199  002006  72                 	db	114
   200  002007  74                 	db	116
   201  002008  00                 	db	0
   202                           
   203                           ;initializer for CookTimeDisplay@F3154
   204  002009  7C                 	db	124
   205  00200A  42                 	db	66
   206  00200B  61                 	db	97
   207  00200C  63                 	db	99
   208  00200D  6B                 	db	107
   209  00200E  00                 	db	0
   210                           
   211                           ;initializer for BakeTempSet@F3131
   212  00200F  7C                 	db	124
   213  002010  4E                 	db	78
   214  002011  65                 	db	101
   215  002012  78                 	db	120
   216  002013  74                 	db	116
   217  002014  00                 	db	0
   218                           
   219                           ;initializer for BakeTempSet@F3129
   220  002015  7C                 	db	124
   221  002016  42                 	db	66
   222  002017  61                 	db	97
   223  002018  63                 	db	99
   224  002019  6B                 	db	107
   225  00201A  00                 	db	0
   226                           
   227                           ;initializer for ReadRTCAndDisplay@F3198
   228  00201B  7C                 	db	124
   229  00201C  42                 	db	66
   230  00201D  61                 	db	97
   231  00201E  6B                 	db	107
   232  00201F  65                 	db	101
   233  002020  00                 	db	0
   234                           
   235                           ;initializer for TimeSetting@F3164
   236  002021  7C                 	db	124
   237  002022  4E                 	db	78
   238  002023  65                 	db	101
   239  002024  78                 	db	120
   240  002025  74                 	db	116
   241  002026  00                 	db	0
   242                           
   243                           ;initializer for TimeSetting@F3162
   244  002027  7C                 	db	124
   245  002028  4D                 	db	77
   246  002029  6F                 	db	111
   247  00202A  76                 	db	118
   248  00202B  65                 	db	101
   249  00202C  00                 	db	0
   250                           
   251                           ;initializer for CheckCookDone@F3212
   252  00202D  43                 	db	67
   253  00202E  6C                 	db	108
   254  00202F  65                 	db	101
   255  002030  61                 	db	97
   256  002031  72                 	db	114
   257  002032  00                 	db	0
   258                           
   259                           	psect	idataBANK1
   260  00248C                     __pidataBANK1:
   261                           	opt stack 0
   262                           
   263                           ;initializer for main@F3205
   264  00248C  42                 	db	66
   265  00248D  61                 	db	97
   266  00248E  6B                 	db	107
   267  00248F  69                 	db	105
   268  002490  6E                 	db	110
   269  002491  67                 	db	103
   270  002492  2E                 	db	46
   271  002493  2E                 	db	46
   272  002494  2E                 	db	46
   273  002495  00                 	db	0
   274                           
   275                           ;initializer for main@F3207
   276  002496  43                 	db	67
   277  002497  61                 	db	97
   278  002498  6E                 	db	110
   279  002499  63                 	db	99
   280  00249A  65                 	db	101
   281  00249B  6C                 	db	108
   282  00249C  00                 	db	0
   283                           
   284                           	psect	idataBANK2
   285  001EEA                     __pidataBANK2:
   286                           	opt stack 0
   287                           
   288                           ;initializer for main@F3200
   289  001EEA  0200               	dw	512
   290  001EEC  0232               	dw	562
   291  001EEE  0263               	dw	611
   292  001EF0  0294               	dw	660
   293  001EF2  02C3               	dw	707
   294  001EF4  02F1               	dw	753
   295  001EF6  031C               	dw	796
   296  001EF8  0344               	dw	836
   297  001EFA  0369               	dw	873
   298  001EFC  038B               	dw	907
   299  001EFE  03A9               	dw	937
   300  001F00  03C3               	dw	963
   301  001F02  03D8               	dw	984
   302  001F04  03E9               	dw	1001
   303  001F06  03F5               	dw	1013
   304  001F08  03FD               	dw	1021
   305  001F0A  03FF               	dw	1023
   306  001F0C  03FD               	dw	1021
   307  001F0E  03F5               	dw	1013
   308  001F10  03E9               	dw	1001
   309  001F12  03D8               	dw	984
   310  001F14  03C3               	dw	963
   311  001F16  03A9               	dw	937
   312  001F18  038B               	dw	907
   313  001F1A  0369               	dw	873
   314  001F1C  0344               	dw	836
   315  001F1E  031C               	dw	796
   316  001F20  02F1               	dw	753
   317  001F22  02C3               	dw	707
   318  001F24  0294               	dw	660
   319  001F26  0263               	dw	611
   320  001F28  0232               	dw	562
   321  001F2A  0200               	dw	512
   322  001F2C  01CD               	dw	461
   323  001F2E  019C               	dw	412
   324  001F30  016B               	dw	363
   325  001F32  013C               	dw	316
   326  001F34  010E               	dw	270
   327  001F36  00E3               	dw	227
   328  001F38  00BB               	dw	187
   329  001F3A  0096               	dw	150
   330  001F3C  0074               	dw	116
   331  001F3E  0056               	dw	86
   332  001F40  003C               	dw	60
   333  001F42  0027               	dw	39
   334  001F44  0016               	dw	22
   335  001F46  000A               	dw	10
   336  001F48  0002               	dw	2
   337  001F4A  0000               	dw	0
   338  001F4C  0002               	dw	2
   339  001F4E  000A               	dw	10
   340  001F50  0016               	dw	22
   341  001F52  0027               	dw	39
   342  001F54  003C               	dw	60
   343  001F56  0056               	dw	86
   344  001F58  0074               	dw	116
   345  001F5A  0096               	dw	150
   346  001F5C  00BB               	dw	187
   347  001F5E  00E3               	dw	227
   348  001F60  010E               	dw	270
   349  001F62  013C               	dw	316
   350  001F64  016B               	dw	363
   351  001F66  019C               	dw	412
   352  001F68  01CD               	dw	461
   353                           
   354                           	psect	smallconst
   355  001000                     __psmallconst:
   356                           	opt stack 0
   357  001000  00                 	db	0
   358  001001                     _dpowers:
   359                           	opt stack 0
   360  001001  0001               	dw	1
   361  001003  000A               	dw	10
   362  001005  0064               	dw	100
   363  001007  03E8               	dw	1000
   364  001009  2710               	dw	10000
   365  00100B                     __end_of_dpowers:
   366                           	opt stack 0
   367  0000                     _PORTA	set	3968
   368  0000                     _PORTCbits	set	3970
   369  0000                     _TRISAbits	set	3986
   370  0000                     _TRISC	set	3988
   371  0000                     _TRISCbits	set	3988
   372  0000                     _PORTDbits	set	3971
   373  0000                     _LATDbits	set	3980
   374  0000                     _TRISDbits	set	3989
   375  0000                     _ADRES	set	4035
   376  0000                     _T2CONbits	set	4042
   377  0000                     _PIR1bits	set	3998
   378  0000                     _SSPCON1bits	set	4038
   379  0000                     _SSPSTATbits	set	4039
   380  0000                     _SSPBUF	set	4041
   381  0000                     _SSPCON2bits	set	4037
   382  0000                     _SSPSTAT	set	4039
   383  0000                     _SSPADD	set	4040
   384  0000                     _SSPCON2	set	4037
   385  0000                     _SSPCON1	set	4038
   386  0000                     _ADCON0bits	set	4034
   387  0000                     _ADCON2	set	4032
   388  0000                     _PR2	set	4043
   389  0000                     _ADCON1bits	set	4033
   390  0000                     _OSCCONbits	set	4051
   391  0000                     _T2OUTPS0	set	32339
   392  0000                     _T2OUTPS1	set	32340
   393  0000                     _T2OUTPS2	set	32341
   394  0000                     _T2OUTPS3	set	32342
   395  0000                     _ACKEN	set	32300
   396  0000                     _ACKDT	set	32301
   397  0000                     _RCEN	set	32299
   398  0000                     _PEN	set	32298
   399  0000                     _SSPIF	set	31987
   400  0000                     _TMR2IF	set	31985
   401  0000                     _T2CKPS1	set	32337
   402  0000                     _TMR2IE	set	31977
   403  0000                     _INTCONbits	set	4082
   404  00100B                     STR_1:
   405  00100B  25                 	db	37
   406  00100C  75                 	db	117	;'u'
   407  00100D  00                 	db	0
   408  0000                     
   409                           ; #config settings
   410  00100E  00                 	db	0	; dummy byte at the end
   411  0000                     
   412                           	psect	cinit
   413  0019FE                     __pcinit:
   414                           	opt stack 0
   415  0019FE                     start_initialization:
   416                           	opt stack 0
   417  0019FE                     __initialization:
   418                           	opt stack 0
   419                           
   420                           ; Initialize objects allocated to BANK2 (128 bytes)
   421                           ; load TBLPTR registers with __pidataBANK2
   422  0019FE  0EEA               	movlw	low __pidataBANK2
   423  001A00  6EF6               	movwf	tblptrl,c
   424  001A02  0E1E               	movlw	high __pidataBANK2
   425  001A04  6EF7               	movwf	tblptrh,c
   426  001A06  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   427  001A08  6EF8               	movwf	tblptru,c
   428  001A0A  EE02  F000         	lfsr	0,__pdataBANK2
   429  001A0E  EE10 F080          	lfsr	1,128
   430  001A12                     copy_data0:
   431  001A12  0009               	tblrd		*+
   432  001A14  CFF5 FFEE          	movff	tablat,postinc0
   433  001A18  50E5               	movf	postdec1,w,c
   434  001A1A  50E1               	movf	fsr1l,w,c
   435  001A1C  E1FA               	bnz	copy_data0
   436                           
   437                           ; Initialize objects allocated to BANK1 (17 bytes)
   438                           ; load TBLPTR registers with __pidataBANK1
   439  001A1E  0E8C               	movlw	low __pidataBANK1
   440  001A20  6EF6               	movwf	tblptrl,c
   441  001A22  0E24               	movlw	high __pidataBANK1
   442  001A24  6EF7               	movwf	tblptrh,c
   443  001A26  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   444  001A28  6EF8               	movwf	tblptru,c
   445  001A2A  EE01  F0AF         	lfsr	0,__pdataBANK1
   446  001A2E  EE10 F011          	lfsr	1,17
   447  001A32                     copy_data1:
   448  001A32  0009               	tblrd		*+
   449  001A34  CFF5 FFEE          	movff	tablat,postinc0
   450  001A38  50E5               	movf	postdec1,w,c
   451  001A3A  50E1               	movf	fsr1l,w,c
   452  001A3C  E1FA               	bnz	copy_data1
   453                           
   454                           ; Initialize objects allocated to BANK0 (89 bytes)
   455                           ; load TBLPTR registers with __pidataBANK0
   456  001A3E  0EDA               	movlw	low __pidataBANK0
   457  001A40  6EF6               	movwf	tblptrl,c
   458  001A42  0E1F               	movlw	high __pidataBANK0
   459  001A44  6EF7               	movwf	tblptrh,c
   460  001A46  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   461  001A48  6EF8               	movwf	tblptru,c
   462  001A4A  EE00  F080         	lfsr	0,__pdataBANK0
   463  001A4E  EE10 F059          	lfsr	1,89
   464  001A52                     copy_data2:
   465  001A52  0009               	tblrd		*+
   466  001A54  CFF5 FFEE          	movff	tablat,postinc0
   467  001A58  50E5               	movf	postdec1,w,c
   468  001A5A  50E1               	movf	fsr1l,w,c
   469  001A5C  E1FA               	bnz	copy_data2
   470                           
   471                           ; Initialize objects allocated to COMRAM (15 bytes)
   472                           ; load TBLPTR registers with __pidataCOMRAM
   473  001A5E  0EAE               	movlw	low __pidataCOMRAM
   474  001A60  6EF6               	movwf	tblptrl,c
   475  001A62  0E24               	movlw	high __pidataCOMRAM
   476  001A64  6EF7               	movwf	tblptrh,c
   477  001A66  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   478  001A68  6EF8               	movwf	tblptru,c
   479  001A6A  EE00  F04B         	lfsr	0,__pdataCOMRAM
   480  001A6E  EE10 F00F          	lfsr	1,15
   481  001A72                     copy_data3:
   482  001A72  0009               	tblrd		*+
   483  001A74  CFF5 FFEE          	movff	tablat,postinc0
   484  001A78  50E5               	movf	postdec1,w,c
   485  001A7A  50E1               	movf	fsr1l,w,c
   486  001A7C  E1FA               	bnz	copy_data3
   487                           
   488                           ; Clear objects allocated to BANK1 (7 bytes)
   489  001A7E  EE01  F0C0         	lfsr	0,__pbssBANK1
   490  001A82  0E07               	movlw	7
   491  001A84                     clear_0:
   492  001A84  6AEE               	clrf	postinc0,c
   493  001A86  06E8               	decf	wreg,f,c
   494  001A88  E1FD               	bnz	clear_0
   495                           
   496                           ; Clear objects allocated to COMRAM (26 bytes)
   497  001A8A  EE00  F031         	lfsr	0,__pbssCOMRAM
   498  001A8E  0E1A               	movlw	26
   499  001A90                     clear_1:
   500  001A90  6AEE               	clrf	postinc0,c
   501  001A92  06E8               	decf	wreg,f,c
   502  001A94  E1FD               	bnz	clear_1
   503  001A96                     end_of_initialization:
   504                           	opt stack 0
   505  001A96                     __end_of__initialization:
   506                           	opt stack 0
   507  001A96  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   508  001A98  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   509  001A9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   510  001A9C  6EF8               	movwf	tblptru,c
   511  001A9E  0100               	movlb	0
   512  001AA0  EF08  F008         	goto	_main	;jump to C main() function
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           postinc0	equ	0xFEE
   518                           wreg	equ	0xFE8
   519                           postdec1	equ	0xFE5
   520                           fsr1l	equ	0xFE1
   521                           
   522                           	psect	bssCOMRAM
   523  000031                     __pbssCOMRAM:
   524                           	opt stack 0
   525  000031                     _cookTimeAdcRead:
   526                           	opt stack 0
   527  000031                     	ds	2
   528  000033                     _getModOfTemp:
   529                           	opt stack 0
   530  000033                     	ds	2
   531  000035                     _tempAdcRead:
   532                           	opt stack 0
   533  000035                     	ds	2
   534  000037                     _minAdcRead:
   535                           	opt stack 0
   536  000037                     	ds	2
   537  000039                     _hrAdcRead:
   538                           	opt stack 0
   539  000039                     	ds	2
   540  00003B                     _amplitudeDivision:
   541                           	opt stack 0
   542  00003B                     	ds	2
   543  00003D                     _ptr:
   544                           	opt stack 0
   545  00003D                     	ds	2
   546  00003F                     _currentMinFromRTC:
   547                           	opt stack 0
   548  00003F                     	ds	1
   549  000040                     _setCookTimeMin:
   550                           	opt stack 0
   551  000040                     	ds	1
   552  000041                     _secondsRead:
   553                           	opt stack 0
   554  000041                     	ds	1
   555  000042                     _hrRead:
   556                           	opt stack 0
   557  000042                     	ds	1
   558  000043                     _minRead:
   559                           	opt stack 0
   560  000043                     	ds	1
   561  000044                     _setHr:
   562                           	opt stack 0
   563  000044                     	ds	1
   564  000045                     _setMin:
   565                           	opt stack 0
   566  000045                     	ds	1
   567  000046                     _cursorLocation:
   568                           	opt stack 0
   569  000046                     	ds	1
   570  000047                     _WRITE_MODE:
   571                           	opt stack 0
   572  000047                     	ds	1
   573  000048                     _iterator:
   574                           	opt stack 0
   575  000048                     	ds	1
   576  000049                     _sineOut:
   577                           	opt stack 0
   578  000049                     	ds	1
   579  00004A                     _alarmSet:
   580                           	opt stack 0
   581  00004A                     	ds	1
   582                           tblptru	equ	0xFF8
   583                           tblptrh	equ	0xFF7
   584                           tblptrl	equ	0xFF6
   585                           tablat	equ	0xFF5
   586                           postinc0	equ	0xFEE
   587                           wreg	equ	0xFE8
   588                           postdec1	equ	0xFE5
   589                           fsr1l	equ	0xFE1
   590                           
   591                           	psect	dataCOMRAM
   592  00004B                     __pdataCOMRAM:
   593                           	opt stack 0
   594  00004B                     ReadRTCAndDisplay@F3194:
   595                           	opt stack 0
   596  00004B                     	ds	5
   597  000050                     CookTimeDisplay@F3158:
   598                           	opt stack 0
   599  000050                     	ds	4
   600  000054                     ReadRTCAndDisplay@F3196:
   601                           	opt stack 0
   602  000054                     	ds	2
   603  000056                     _min:
   604                           	opt stack 0
   605  000056                     	ds	1
   606  000057                     _hr:
   607                           	opt stack 0
   608  000057                     	ds	1
   609  000058                     	ds	1
   610  000059                     _READ_MODE:
   611                           	opt stack 0
   612  000059                     	ds	1
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1l	equ	0xFE1
   621                           
   622                           	psect	dataBANK0
   623  000080                     __pdataBANK0:
   624                           	opt stack 0
   625  000080                     CheckCookDone@F3210:
   626                           	opt stack 0
   627  000080                     	ds	11
   628  00008B                     CookTimeDisplay@F3152:
   629                           	opt stack 0
   630  00008B                     	ds	10
   631  000095                     BakeTempSet@F3127:
   632                           	opt stack 0
   633  000095                     	ds	10
   634  00009F                     TimeSetting@F3160:
   635                           	opt stack 0
   636  00009F                     	ds	9
   637  0000A8                     CookTimeDisplay@F3156:
   638                           	opt stack 0
   639  0000A8                     	ds	7
   640  0000AF                     CookTimeDisplay@F3154:
   641                           	opt stack 0
   642  0000AF                     	ds	6
   643  0000B5                     BakeTempSet@F3131:
   644                           	opt stack 0
   645  0000B5                     	ds	6
   646  0000BB                     BakeTempSet@F3129:
   647                           	opt stack 0
   648  0000BB                     	ds	6
   649  0000C1                     ReadRTCAndDisplay@F3198:
   650                           	opt stack 0
   651  0000C1                     	ds	6
   652  0000C7                     TimeSetting@F3164:
   653                           	opt stack 0
   654  0000C7                     	ds	6
   655  0000CD                     TimeSetting@F3162:
   656                           	opt stack 0
   657  0000CD                     	ds	6
   658  0000D3                     CheckCookDone@F3212:
   659                           	opt stack 0
   660  0000D3                     	ds	6
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           postdec1	equ	0xFE5
   668                           fsr1l	equ	0xFE1
   669                           
   670                           	psect	bssBANK1
   671  0001C0                     __pbssBANK1:
   672                           	opt stack 0
   673  0001C0                     _bakeTemp:
   674                           	opt stack 0
   675  0001C0                     	ds	2
   676  0001C2                     _readBakeTempADC:
   677                           	opt stack 0
   678  0001C2                     	ds	2
   679  0001C4                     _readADCInput:
   680                           	opt stack 0
   681  0001C4                     	ds	2
   682  0001C6                     _LCD_STATES:
   683                           	opt stack 0
   684  0001C6                     	ds	1
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           postdec1	equ	0xFE5
   692                           fsr1l	equ	0xFE1
   693                           
   694                           	psect	dataBANK1
   695  0001AF                     __pdataBANK1:
   696                           	opt stack 0
   697  0001AF                     main@F3205:
   698                           	opt stack 0
   699  0001AF                     	ds	10
   700  0001B9                     main@F3207:
   701                           	opt stack 0
   702  0001B9                     	ds	7
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           postdec1	equ	0xFE5
   710                           fsr1l	equ	0xFE1
   711                           
   712                           	psect	dataBANK2
   713  000200                     __pdataBANK2:
   714                           	opt stack 0
   715  000200                     main@F3200:
   716                           	opt stack 0
   717  000200                     	ds	128
   718                           tblptru	equ	0xFF8
   719                           tblptrh	equ	0xFF7
   720                           tblptrl	equ	0xFF6
   721                           tablat	equ	0xFF5
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postdec1	equ	0xFE5
   725                           fsr1l	equ	0xFE1
   726                           
   727                           	psect	cstackBANK1
   728  000100                     __pcstackBANK1:
   729                           	opt stack 0
   730  000100                     TimeSetting@setTimeDisplay:
   731                           	opt stack 0
   732  000100                     BakeTempSet@setBakeTempDisplay:
   733                           	opt stack 0
   734  000100                     CookTimeDisplay@setBakeTimeDisplay:
   735                           	opt stack 0
   736                           
   737                           ; 10 bytes @ 0x0
   738  000100                     	ds	9
   739  000109                     TimeSetting@move:
   740                           	opt stack 0
   741                           
   742                           ; 6 bytes @ 0x9
   743  000109                     	ds	1
   744  00010A                     BakeTempSet@deliminator:
   745                           	opt stack 0
   746  00010A                     CookTimeDisplay@nextMenu:
   747                           	opt stack 0
   748                           
   749                           ; 7 bytes @ 0xA
   750  00010A                     	ds	5
   751  00010F                     TimeSetting@next:
   752                           	opt stack 0
   753                           
   754                           ; 6 bytes @ 0xF
   755  00010F                     	ds	1
   756  000110                     BakeTempSet@nextMenu:
   757                           	opt stack 0
   758                           
   759                           ; 6 bytes @ 0x10
   760  000110                     	ds	1
   761  000111                     CookTimeDisplay@backMenu:
   762                           	opt stack 0
   763                           
   764                           ; 6 bytes @ 0x11
   765  000111                     	ds	4
   766  000115                     TimeSetting@hourContainer_1229:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x15
   770  000115                     	ds	1
   771  000116                     BakeTempSet@bakeTempContainer:
   772                           	opt stack 0
   773                           
   774                           ; 3 bytes @ 0x16
   775  000116                     	ds	1
   776  000117                     TimeSetting@minContainer_1233:
   777                           	opt stack 0
   778  000117                     CookTimeDisplay@minDisplay:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x17
   782  000117                     	ds	2
   783  000119                     TimeSetting@hourContainer:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x19
   787  000119                     	ds	1
   788  00011A                     TimeSetting@minContainer:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x1A
   792  00011A                     	ds	1
   793  00011B                     CookTimeDisplay@cookTimeContainer_1314:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x1B
   797  00011B                     	ds	2
   798  00011D                     CookTimeDisplay@cookTimeContainer:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x1D
   802  00011D                     	ds	1
   803  00011E                     main@sineLookup:
   804                           	opt stack 0
   805                           
   806                           ; 128 bytes @ 0x1E
   807  00011E                     	ds	128
   808  00019E                     main@baking:
   809                           	opt stack 0
   810                           
   811                           ; 10 bytes @ 0x9E
   812  00019E                     	ds	10
   813  0001A8                     main@cancel:
   814                           	opt stack 0
   815                           
   816                           ; 7 bytes @ 0xA8
   817  0001A8                     	ds	7
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           postinc0	equ	0xFEE
   823                           wreg	equ	0xFE8
   824                           postdec1	equ	0xFE5
   825                           fsr1l	equ	0xFE1
   826                           
   827                           	psect	cstackBANK0
   828  0000D9                     __pcstackBANK0:
   829                           	opt stack 0
   830  0000D9                     WriteTime@convertedMinutesToBCD:
   831                           	opt stack 0
   832  0000D9                     CookTimeSet@currentMin:
   833                           	opt stack 0
   834  0000D9                     ___lwmod@counter:
   835                           	opt stack 0
   836  0000D9                     WriteToDac@command:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x0
   840  0000D9                     	ds	1
   841  0000DA                     ?_sprintf:
   842                           	opt stack 0
   843  0000DA                     WriteTime@convertedHoursToBCD:
   844                           	opt stack 0
   845  0000DA                     CookTimeSet@convertedCookMinutesToBCD:
   846                           	opt stack 0
   847  0000DA                     sprintf@sp:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x1
   851  0000DA                     	ds	1
   852  0000DB                     WriteToDac@high:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x2
   856  0000DB                     	ds	1
   857  0000DC                     WriteToDac@low:
   858                           	opt stack 0
   859  0000DC                     sprintf@f:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x3
   863  0000DC                     	ds	1
   864  0000DD                     WriteToDac@output:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x4
   868  0000DD                     	ds	2
   869  0000DF                     CheckCookDone@bakeDone:
   870                           	opt stack 0
   871                           
   872                           ; 11 bytes @ 0x6
   873  0000DF                     	ds	1
   874  0000E0                     sprintf@flag:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x7
   878  0000E0                     	ds	1
   879  0000E1                     sprintf@ap:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x8
   883  0000E1                     	ds	2
   884  0000E3                     sprintf@val:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0xA
   888  0000E3                     	ds	2
   889  0000E5                     sprintf@prec:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0xC
   893  0000E5                     	ds	1
   894  0000E6                     sprintf@c:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0xD
   898  0000E6                     	ds	1
   899  0000E7                     ?_BakeTempSet:
   900                           	opt stack 0
   901  0000E7                     TimeSetting@readADCInput:
   902                           	opt stack 0
   903  0000E7                     ReadAndDisplayMinFromRTC@minContainerDisplay_1251:
   904                           	opt stack 0
   905  0000E7                     ReadAndDisplayHrFromRTC@hourContainerDisplay_1257:
   906                           	opt stack 0
   907  0000E7                     ReadAndDisplaySecFromRTC@secondContainerDisplay_1263:
   908                           	opt stack 0
   909  0000E7                     BakeTempSet@adcRead:
   910                           	opt stack 0
   911  0000E7                     CookTimeDisplay@adcRead:
   912                           	opt stack 0
   913                           
   914                           ; 2 bytes @ 0xE
   915  0000E7                     	ds	2
   916  0000E9                     ??_TimeSetting:
   917  0000E9                     ??_BakeTempSet:
   918  0000E9                     ReadAndDisplayMinFromRTC@min:
   919                           	opt stack 0
   920  0000E9                     ReadAndDisplayHrFromRTC@hours:
   921                           	opt stack 0
   922  0000E9                     ReadAndDisplaySecFromRTC@seconds:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x10
   926  0000E9                     	ds	1
   927  0000EA                     ReadAndDisplayMinFromRTC@minContainerDisplay:
   928                           	opt stack 0
   929  0000EA                     ReadAndDisplayHrFromRTC@hourContainerDisplay:
   930                           	opt stack 0
   931  0000EA                     ReadAndDisplaySecFromRTC@secondContainerDisplay:
   932                           	opt stack 0
   933  0000EA                     CheckCookDone@clear:
   934                           	opt stack 0
   935                           
   936                           ; 6 bytes @ 0x11
   937  0000EA                     	ds	1
   938  0000EB                     ReadRTCAndDisplay@bakeT:
   939                           	opt stack 0
   940                           
   941                           ; 6 bytes @ 0x12
   942  0000EB                     	ds	6
   943  0000F1                     ReadRTCAndDisplay@time:
   944                           	opt stack 0
   945                           
   946                           ; 5 bytes @ 0x18
   947  0000F1                     	ds	5
   948  0000F6                     ReadRTCAndDisplay@deliminator:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x1D
   952  0000F6                     	ds	2
   953  0000F8                     ??_main:
   954                           
   955                           ; 1 bytes @ 0x1F
   956  0000F8                     	ds	1
   957                           tblptru	equ	0xFF8
   958                           tblptrh	equ	0xFF7
   959                           tblptrl	equ	0xFF6
   960                           tablat	equ	0xFF5
   961                           postinc0	equ	0xFEE
   962                           wreg	equ	0xFE8
   963                           postdec1	equ	0xFE5
   964                           fsr1l	equ	0xFE1
   965                           
   966                           	psect	cstackCOMRAM
   967  000001                     __pcstackCOMRAM:
   968                           	opt stack 0
   969  000001                     ?_AdcRead:
   970                           	opt stack 0
   971  000001                     ?i2___lwdiv:
   972                           	opt stack 0
   973  000001                     i2WriteSpi@data:
   974                           	opt stack 0
   975  000001                     i2___lwdiv@dividend:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x0
   979  000001                     	ds	2
   980  000003                     ??_AdcRead:
   981  000003                     i2___lwdiv@divisor:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x2
   985  000003                     	ds	1
   986  000004                     AdcRead@channel:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x3
   990  000004                     	ds	1
   991  000005                     i2___lwdiv@quotient:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x4
   995  000005                     	ds	2
   996  000007                     i2___lwdiv@counter:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x6
  1000  000007                     	ds	1
  1001  000008                     i2WriteToDac@data:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x7
  1005  000008                     	ds	2
  1006  00000A                     i2WriteToDac@frequency:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x9
  1010  00000A                     	ds	2
  1011  00000C                     ??i2_WriteToDac:
  1012                           
  1013                           ; 1 bytes @ 0xB
  1014  00000C                     	ds	2
  1015  00000E                     i2WriteToDac@command:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0xD
  1019  00000E                     	ds	2
  1020  000010                     i2WriteToDac@high:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0xF
  1024  000010                     	ds	1
  1025  000011                     i2WriteToDac@low:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x10
  1029  000011                     	ds	1
  1030  000012                     i2WriteToDac@output:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x11
  1034  000012                     	ds	2
  1035  000014                     ??_ISR:
  1036                           
  1037                           ; 1 bytes @ 0x13
  1038  000014                     	ds	18
  1039  000026                     ??_lcd_command:
  1040  000026                     ??_I2C_Wait:
  1041  000026                     ??_lcd_char:
  1042  000026                     ?_bcd_to_decimal:
  1043                           	opt stack 0
  1044  000026                     ?_bcd_to_decimal_cook_time:
  1045                           	opt stack 0
  1046  000026                     ?___awdiv:
  1047                           	opt stack 0
  1048  000026                     ?___awmod:
  1049                           	opt stack 0
  1050  000026                     ?___lwdiv:
  1051                           	opt stack 0
  1052  000026                     IfButtonPressedMovedToNextState@currentState:
  1053                           	opt stack 0
  1054  000026                     WriteSpi@data:
  1055                           	opt stack 0
  1056  000026                     GenerateAmplitude@readAmplitude:
  1057                           	opt stack 0
  1058  000026                     ___awdiv@dividend:
  1059                           	opt stack 0
  1060  000026                     ___awmod@dividend:
  1061                           	opt stack 0
  1062  000026                     ___lwdiv@dividend:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x25
  1066  000026                     	ds	1
  1067  000027                     ??_IfButtonPressedMovedToNextState:
  1068  000027                     I2C_WriteData@data:
  1069                           	opt stack 0
  1070  000027                     I2C_WriteControl@R_W_mode:
  1071                           	opt stack 0
  1072  000027                     I2C_Read@ack:
  1073                           	opt stack 0
  1074  000027                     lcd_command@temp:
  1075                           	opt stack 0
  1076  000027                     lcd_char@temp:
  1077                           	opt stack 0
  1078  000027                     WriteToDac@data:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x26
  1082  000027                     	ds	1
  1083  000028                     ??_bcd_to_decimal:
  1084  000028                     ??_bcd_to_decimal_cook_time:
  1085  000028                     IfButtonPressedMovedToNextState@nextState:
  1086                           	opt stack 0
  1087  000028                     I2C_WriteControl@slaveAddress:
  1088                           	opt stack 0
  1089  000028                     I2C_Read@readData:
  1090                           	opt stack 0
  1091  000028                     lcd_command@x:
  1092                           	opt stack 0
  1093  000028                     lcd_char@x:
  1094                           	opt stack 0
  1095  000028                     ___awdiv@divisor:
  1096                           	opt stack 0
  1097  000028                     ___awmod@divisor:
  1098                           	opt stack 0
  1099  000028                     ___lwdiv@divisor:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x27
  1103  000028                     	ds	1
  1104  000029                     I2C_ReadFromSlave@addressByte:
  1105                           	opt stack 0
  1106  000029                     I2C_WriteToSlave@R_W_mode:
  1107                           	opt stack 0
  1108  000029                     bcd_to_decimal@x:
  1109                           	opt stack 0
  1110  000029                     bcd_to_decimal_cook_time@x:
  1111                           	opt stack 0
  1112  000029                     WriteToDac@frequency:
  1113                           	opt stack 0
  1114  000029                     lcd_string@x:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x28
  1118  000029                     	ds	1
  1119  00002A                     I2C_ReadFromSlave@dataFromAddress:
  1120                           	opt stack 0
  1121  00002A                     I2C_WriteToSlave@addressByte:
  1122                           	opt stack 0
  1123  00002A                     ___awdiv@counter:
  1124                           	opt stack 0
  1125  00002A                     ___awmod@counter:
  1126                           	opt stack 0
  1127  00002A                     ___lwdiv@counter:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x29
  1131  00002A                     	ds	1
  1132  00002B                     ??_WriteToDac:
  1133  00002B                     I2C_WriteToSlave@data:
  1134                           	opt stack 0
  1135  00002B                     ___awdiv@sign:
  1136                           	opt stack 0
  1137  00002B                     ___awmod@sign:
  1138                           	opt stack 0
  1139  00002B                     lcd_string@i:
  1140                           	opt stack 0
  1141  00002B                     ___lwdiv@quotient:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x2A
  1145  00002B                     	ds	1
  1146  00002C                     I2C_WriteToSlave@slaveAddress:
  1147                           	opt stack 0
  1148  00002C                     ___awdiv@quotient:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x2B
  1152  00002C                     	ds	1
  1153  00002D                     ??_clearAlarm:
  1154  00002D                     ?___lwmod:
  1155                           	opt stack 0
  1156  00002D                     WriteToRTC@WRITE_MODE:
  1157                           	opt stack 0
  1158  00002D                     WriteTimeToCookToRTC@WRITE_MODE:
  1159                           	opt stack 0
  1160  00002D                     ___lwmod@dividend:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x2C
  1164  00002D                     	ds	1
  1165  00002E                     ??_IntToBcd:
  1166  00002E                     ??_IntToBcd_cook_time:
  1167                           
  1168                           ; 1 bytes @ 0x2D
  1169  00002E                     	ds	1
  1170  00002F                     ___lwmod@divisor:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x2E
  1174  00002F                     	ds	1
  1175  000030                     IntToBcd@x:
  1176                           	opt stack 0
  1177  000030                     IntToBcd_cook_time@x:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x2F
  1181  000030                     	ds	1
  1182  000031                     tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           postdec1	equ	0xFE5
  1189                           fsr1l	equ	0xFE1
  1190                           
  1191                           ; 1 bytes @ 0x30
  1192 ;;
  1193 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1194 ;;
  1195 ;; *************** function _main *****************
  1196 ;; Defined at:
  1197 ;;		line 55 in file "main.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;		None
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  baking         10  158[BANK1 ] unsigned char [10]
  1202 ;;  cancel          7  168[BANK1 ] unsigned char [7]
  1203 ;;  sineLookup    128   30[BANK1 ] unsigned int [64]
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  2   94[None  ] int 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;      Locals:         0       0     145       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1216 ;;      Totals:         0       1     145       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1217 ;;Total ram usage:      146 bytes
  1218 ;; Hardware stack levels required when called:    8
  1219 ;; This function calls:
  1220 ;;		_AdcInit
  1221 ;;		_BakeTempSet
  1222 ;;		_CheckCookDone
  1223 ;;		_CookTimeDisplay
  1224 ;;		_CookTimeSet
  1225 ;;		_GPIOInit
  1226 ;;		_GenerateAmplitude
  1227 ;;		_IfButtonPressedMovedToNextState
  1228 ;;		_InitI2C_MasterMode
  1229 ;;		_ReadRTCAndDisplay
  1230 ;;		_SpiInit
  1231 ;;		_TimeSetting
  1232 ;;		_Timer2Init
  1233 ;;		_WriteTime
  1234 ;;		_WriteTimeToCookToRTC
  1235 ;;		_WriteToDac
  1236 ;;		_WriteToRTC
  1237 ;;		_clearAlarm
  1238 ;;		_lcd_clear
  1239 ;;		_lcd_command
  1240 ;;		_lcd_init
  1241 ;;		_lcd_string
  1242 ;; This function is called by:
  1243 ;;		Startup code after reset
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text0
  1248  001010                     __ptext0:
  1249                           	opt stack 0
  1250  001010                     _main:
  1251                           	opt stack 23
  1252                           
  1253                           ;main.c: 56: OSCCONbits.IRCF = 0b111;
  1254                           
  1255                           ;incstack = 0
  1256  001010  88D3               	bsf	4051,4,c	;volatile
  1257  001012  8AD3               	bsf	4051,5,c	;volatile
  1258  001014  8CD3               	bsf	4051,6,c	;volatile
  1259  001016  A4D3               	btfss	4051,2,c	;volatile
  1260  001018  D7FE               	goto	l96
  1261                           
  1262                           ;main.c: 59: TRISDbits.TRISD7 = 0;
  1263  00101A  9E95               	bcf	3989,7,c	;volatile
  1264                           
  1265                           ;main.c: 60: LATDbits.LATD7 = 1;
  1266  00101C  8E8C               	bsf	3980,7,c	;volatile
  1267                           
  1268                           ;main.c: 63: TRISDbits.TRISD6 = 0;
  1269  00101E  9C95               	bcf	3989,6,c	;volatile
  1270                           
  1271                           ;main.c: 64: LATDbits.LATD6 = 0;
  1272  001020  9C8C               	bcf	3980,6,c	;volatile
  1273                           
  1274                           ;main.c: 67: lcd_init();
  1275  001022  ECF3  F011         	call	_lcd_init	;wreg free
  1276                           
  1277                           ;main.c: 68: AdcInit();
  1278  001026  EC84  F012         	call	_AdcInit	;wreg free
  1279                           
  1280                           ;main.c: 69: InitI2C_MasterMode();
  1281  00102A  EC31  F012         	call	_InitI2C_MasterMode	;wreg free
  1282                           
  1283                           ;main.c: 70: Timer2Init();
  1284  00102E  EC4F  F012         	call	_Timer2Init	;wreg free
  1285                           
  1286                           ;main.c: 71: GPIOInit();
  1287  001032  EC73  F012         	call	_GPIOInit	;wreg free
  1288                           
  1289                           ;main.c: 74: ADCON1bits.PCFG = 0b1111;
  1290  001036  80C1               	bsf	4033,0,c	;volatile
  1291  001038  82C1               	bsf	4033,1,c	;volatile
  1292  00103A  84C1               	bsf	4033,2,c	;volatile
  1293  00103C  86C1               	bsf	4033,3,c	;volatile
  1294                           
  1295                           ;main.c: 77: INTCONbits.PEIE = 1;
  1296  00103E  8CF2               	bsf	intcon,6,c	;volatile
  1297                           
  1298                           ;main.c: 78: INTCONbits.GIE = 1;
  1299  001040  8EF2               	bsf	intcon,7,c	;volatile
  1300                           
  1301                           ;main.c: 79: TMR2IE = 1;
  1302  001042  829D               	bsf	3997,1,c	;volatile
  1303                           
  1304                           ;main.c: 82: LATDbits.LATD0 = 0;
  1305  001044  908C               	bcf	3980,0,c	;volatile
  1306                           
  1307                           ;main.c: 83: LATDbits.LATD1 = 0;
  1308  001046  928C               	bcf	3980,1,c	;volatile
  1309                           
  1310                           ;main.c: 84: clearAlarm();
  1311  001048  ECF3  F010         	call	_clearAlarm	;wreg free
  1312                           
  1313                           ;main.c: 86: uint16_t sineLookup[64] = {0x200,0x232,0x263,0x294,0x2c3,0x2f1,0x31c,0x344,
  1314                           ;main.c: 87: 0x369,0x38b,0x3a9,0x3c3,0x3d8,0x3e9,0x3f5,0x3fd,
  1315                           ;main.c: 88: 0x3ff,0x3fd,0x3f5,0x3e9,0x3d8,0x3c3,0x3a9,0x38b,
  1316                           ;main.c: 89: 0x369,0x344,0x31c,0x2f1,0x2c3,0x294,0x263,0x232,
  1317                           ;main.c: 90: 0x200,0x1cd,0x19c,0x16b,0x13c,0x10e,0xe3,0xbb,
  1318                           ;main.c: 91: 0x96,0x74,0x56,0x3c,0x27,0x16,0xa,0x2,
  1319                           ;main.c: 92: 0x0,0x2,0xa,0x16,0x27,0x3c,0x56,0x74,
  1320                           ;main.c: 93: 0x96,0xbb,0xe3,0x10e,0x13c,0x16b,0x19c,0x1cd};
  1321  00104C  EE22  F000         	lfsr	2,main@F3200
  1322  001050  EE11  F01E         	lfsr	1,main@sineLookup
  1323  001054  0E7F               	movlw	127
  1324  001056                     u2461:
  1325  001056  CFDB FFE3          	movff	plusw2,plusw1
  1326  00105A  06E8               	decf	wreg,f,c
  1327  00105C  E2FC               	bc	u2461
  1328                           
  1329                           ;main.c: 95: ptr = sineLookup;
  1330  00105E  0E1E               	movlw	low main@sineLookup
  1331  001060  6E3D               	movwf	_ptr,c
  1332  001062  0E01               	movlw	high main@sineLookup
  1333  001064  6E3E               	movwf	_ptr+1,c
  1334  001066                     l100:
  1335                           
  1336                           ;main.c: 98: {
  1337                           ;main.c: 100: CheckCookDone();
  1338  001066  EC33  F00F         	call	_CheckCookDone	;wreg free
  1339                           
  1340                           ;main.c: 102: switch(LCD_STATES)
  1341  00106A  D0CD               	goto	l101
  1342  00106C                     
  1343                           ;main.c: 105: TimeSetting(readADCInput);
  1344  00106C  C1C4  F0E7         	movff	_readADCInput,TimeSetting@readADCInput	;volatile
  1345  001070  C1C5  F0E8         	movff	_readADCInput+1,TimeSetting@readADCInput+1	;volatile
  1346  001074  EC24  F009         	call	_TimeSetting	;wreg free
  1347                           
  1348                           ;main.c: 106: IfButtonPressedMovedToNextState(WriteTimeState, TimeSet);
  1349  001078  0E00               	movlw	0
  1350  00107A  6E26               	movwf	IfButtonPressedMovedToNextState@currentState,c
  1351  00107C  0E02               	movlw	2
  1352  00107E  EC03  F012         	call	_IfButtonPressedMovedToNextState
  1353                           
  1354                           ;main.c: 107: break;
  1355  001082  D7F1               	goto	l100
  1356  001084                     
  1357                           ;main.c: 110: WriteTime();
  1358  001084  EC62  F011         	call	_WriteTime	;wreg free
  1359                           
  1360                           ;main.c: 111: WriteToRTC();
  1361  001088  EC6D  F00E         	call	_WriteToRTC	;wreg free
  1362                           
  1363                           ;main.c: 112: lcd_clear();
  1364  00108C  EC78  F012         	call	_lcd_clear	;wreg free
  1365  001090                     l3980:
  1366                           
  1367                           ;main.c: 113: LCD_STATES = DisplayTimeState;
  1368  001090  0E03               	movlw	3
  1369  001092  D036               	goto	L5
  1370  001094                     
  1371                           ; BSR set to: 1
  1372                           ;main.c: 117: ReadRTCAndDisplay();
  1373                           
  1374                           ; BSR set to: 1
  1375  001094  EC29  F00E         	call	_ReadRTCAndDisplay	;wreg free
  1376                           
  1377                           ;main.c: 119: _delay((unsigned long)((25)*(8000000/4000.0)));
  1378  001098  0E41               	movlw	65
  1379  00109A  0100               	movlb	0	; () banked
  1380  00109C  6FF8               	movwf	??_main& (0+255),b
  1381  00109E  0EEE               	movlw	238
  1382  0010A0                     u2567:
  1383  0010A0  2EE8               	decfsz	wreg,f,c
  1384  0010A2  D7FE               	bra	u2567
  1385  0010A4  2FF8               	decfsz	??_main& (0+255),f,b
  1386  0010A6  D7FC               	bra	u2567
  1387  0010A8  F000               	nop	
  1388                           
  1389                           ;main.c: 120: if(PORTDbits.RD2 == 1)
  1390  0010AA  A483               	btfss	3971,2,c	;volatile
  1391  0010AC  D7F1               	goto	l3980
  1392                           
  1393                           ;main.c: 121: {
  1394                           ;main.c: 122: lcd_clear();
  1395  0010AE  EC78  F012         	call	_lcd_clear	;wreg free
  1396  0010B2                     l3990:
  1397                           
  1398                           ;main.c: 123: LCD_STATES = BakeTempSetState;
  1399  0010B2  0E04               	movlw	4
  1400  0010B4  D025               	goto	L5
  1401  0010B6                     
  1402                           ; BSR set to: 1
  1403                           ;main.c: 131: bakeTemp = BakeTempSet(readBakeTempADC);
  1404                           
  1405                           ; BSR set to: 1
  1406  0010B6  C1C2  F0E7         	movff	_readBakeTempADC,BakeTempSet@adcRead	;volatile
  1407  0010BA  C1C3  F0E8         	movff	_readBakeTempADC+1,BakeTempSet@adcRead+1	;volatile
  1408  0010BE  EC6C  F00B         	call	_BakeTempSet	;wreg free
  1409  0010C2  C0E7  F1C0         	movff	?_BakeTempSet,_bakeTemp	;volatile
  1410  0010C6  C0E8  F1C1         	movff	?_BakeTempSet+1,_bakeTemp+1	;volatile
  1411                           
  1412                           ;main.c: 132: GenerateAmplitude(bakeTemp);
  1413  0010CA  C1C0  F026         	movff	_bakeTemp,GenerateAmplitude@readAmplitude	;volatile
  1414  0010CE  C1C1  F027         	movff	_bakeTemp+1,GenerateAmplitude@readAmplitude+1	;volatile
  1415  0010D2  ECAA  F00C         	call	_GenerateAmplitude	;wreg free
  1416                           
  1417                           ;main.c: 133: __nop();
  1418  0010D6  F000               	nop	
  1419                           
  1420                           ;main.c: 135: _delay((unsigned long)((25)*(8000000/4000.0)));
  1421  0010D8  0E41               	movlw	65
  1422  0010DA  0100               	movlb	0	; () banked
  1423  0010DC  6FF8               	movwf	??_main& (0+255),b
  1424  0010DE  0EEE               	movlw	238
  1425  0010E0                     u2577:
  1426  0010E0  2EE8               	decfsz	wreg,f,c
  1427  0010E2  D7FE               	bra	u2577
  1428  0010E4  2FF8               	decfsz	??_main& (0+255),f,b
  1429  0010E6  D7FC               	bra	u2577
  1430  0010E8  F000               	nop	
  1431                           
  1432                           ;main.c: 136: if(PORTDbits.RD2 == 1)
  1433  0010EA  A483               	btfss	3971,2,c	;volatile
  1434  0010EC  D004               	goto	l109
  1435                           
  1436                           ;main.c: 137: {
  1437                           ;main.c: 138: lcd_clear();
  1438  0010EE  EC78  F012         	call	_lcd_clear	;wreg free
  1439  0010F2                     l4006:
  1440                           
  1441                           ;main.c: 140: LCD_STATES = BakeTimeDisplay;
  1442  0010F2  0E05               	movlw	5
  1443  0010F4  D005               	goto	L5
  1444  0010F6                     l109:
  1445                           
  1446                           ;main.c: 142: else if(PORTDbits.RD3 == 1)
  1447  0010F6  A683               	btfss	3971,3,c	;volatile
  1448  0010F8  D7DC               	goto	l3990
  1449                           
  1450                           ;main.c: 143: {
  1451                           ;main.c: 144: lcd_clear();
  1452  0010FA  EC78  F012         	call	_lcd_clear	;wreg free
  1453  0010FE  D7C8               	goto	l3980
  1454  001100                     L5:
  1455  001100  0101               	movlb	1	; () banked
  1456  001102  6FC6               	movwf	_LCD_STATES& (0+255),b
  1457                           
  1458                           ; BSR set to: 1
  1459                           ;main.c: 149: }
  1460                           ;main.c: 150: break;
  1461                           
  1462                           ; BSR set to: 1
  1463  001104  D7B0               	goto	l100
  1464  001106                     
  1465                           ; BSR set to: 1
  1466                           ;main.c: 152: CookTimeDisplay(readADCInput);
  1467                           
  1468                           ; BSR set to: 1
  1469  001106  C1C4  F0E7         	movff	_readADCInput,CookTimeDisplay@adcRead	;volatile
  1470  00110A  C1C5  F0E8         	movff	_readADCInput+1,CookTimeDisplay@adcRead+1	;volatile
  1471  00110E  EC3D  F00A         	call	_CookTimeDisplay	;wreg free
  1472                           
  1473                           ;main.c: 154: _delay((unsigned long)((80)*(8000000/4000.0)));
  1474  001112  0ED0               	movlw	208
  1475  001114  0100               	movlb	0	; () banked
  1476  001116  6FF8               	movwf	??_main& (0+255),b
  1477  001118  0EC9               	movlw	201
  1478  00111A                     u2587:
  1479  00111A  2EE8               	decfsz	wreg,f,c
  1480  00111C  D7FE               	bra	u2587
  1481  00111E  2FF8               	decfsz	??_main& (0+255),f,b
  1482  001120  D7FC               	bra	u2587
  1483  001122  D000               	nop2	
  1484                           
  1485                           ;main.c: 155: if(PORTDbits.RD2 == 1)
  1486  001124  A483               	btfss	3971,2,c	;volatile
  1487  001126  D007               	goto	l114
  1488                           
  1489                           ;main.c: 156: {
  1490                           ;main.c: 157: lcd_clear();
  1491  001128  EC78  F012         	call	_lcd_clear	;wreg free
  1492                           
  1493                           ;main.c: 158: LCD_STATES = BakeTimeSet;
  1494  00112C  0E06               	movlw	6
  1495  00112E  0101               	movlb	1	; () banked
  1496  001130  6FC6               	movwf	_LCD_STATES& (0+255),b
  1497                           
  1498                           ; BSR set to: 1
  1499                           ;main.c: 159: __nop();
  1500  001132  F000               	nop	
  1501                           
  1502                           ;main.c: 160: }
  1503  001134  D798               	goto	l100
  1504  001136                     l114:
  1505                           
  1506                           ;main.c: 161: else if(PORTDbits.RD3 == 1)
  1507  001136  A683               	btfss	3971,3,c	;volatile
  1508  001138  D7DC               	goto	l4006
  1509                           
  1510                           ;main.c: 162: {
  1511                           ;main.c: 163: lcd_clear();
  1512  00113A  EC78  F012         	call	_lcd_clear	;wreg free
  1513  00113E  D7B9               	goto	l3990
  1514  001140                     
  1515                           ; BSR set to: 1
  1516                           ;main.c: 171: CookTimeSet();
  1517                           
  1518                           ; BSR set to: 1
  1519  001140  ECD4  F010         	call	_CookTimeSet	;wreg free
  1520                           
  1521                           ;main.c: 172: WriteTimeToCookToRTC();
  1522  001144  ECAF  F00E         	call	_WriteTimeToCookToRTC	;wreg free
  1523                           
  1524                           ;main.c: 173: LCD_STATES = InitSpiState;
  1525  001148  0E07               	movlw	7
  1526  00114A  D7DA               	goto	L5
  1527  00114C                     l119:
  1528                           
  1529                           ; BSR set to: 1
  1530                           ;main.c: 177: LATDbits.LATD7 = 0;
  1531  00114C  9E8C               	bcf	3980,7,c	;volatile
  1532                           
  1533                           ;main.c: 178: LATDbits.LATD6 = 1;
  1534  00114E  8C8C               	bsf	3980,6,c	;volatile
  1535                           
  1536                           ; BSR set to: 1
  1537                           ;main.c: 179: SpiInit();
  1538  001150  EC13  F012         	call	_SpiInit	;wreg free
  1539                           
  1540                           ;main.c: 180: PR2 = 10;
  1541  001154  0E0A               	movlw	10
  1542  001156  6ECB               	movwf	4043,c	;volatile
  1543                           
  1544                           ;main.c: 181: sineOut = 1;
  1545  001158  0E01               	movlw	1
  1546  00115A  6E49               	movwf	_sineOut,c	;volatile
  1547  00115C  D032               	goto	l125
  1548  00115E                     
  1549                           ; BSR set to: 1
  1550                           ;main.c: 189: lcd_command(0x80);
  1551                           
  1552                           ; BSR set to: 1
  1553  00115E  0E80               	movlw	128
  1554  001160  EC53  F00C         	call	_lcd_command
  1555                           
  1556                           ;main.c: 190: char baking[] = "Baking...";
  1557  001164  EE21  F0AF         	lfsr	2,main@F3205
  1558  001168  EE11  F09E         	lfsr	1,main@baking
  1559  00116C  0E09               	movlw	9
  1560  00116E                     u2521:
  1561  00116E  CFDB FFE3          	movff	plusw2,plusw1
  1562  001172  06E8               	decf	wreg,f,c
  1563  001174  E2FC               	bc	u2521
  1564                           
  1565                           ;main.c: 191: lcd_string(baking);
  1566  001176  0E9E               	movlw	low main@baking
  1567  001178  6E29               	movwf	lcd_string@x,c
  1568  00117A  0E01               	movlw	high main@baking
  1569  00117C  6E2A               	movwf	lcd_string@x+1,c
  1570  00117E  EC48  F011         	call	_lcd_string	;wreg free
  1571                           
  1572                           ;main.c: 193: lcd_command(0xCA);
  1573  001182  0ECA               	movlw	202
  1574  001184  EC53  F00C         	call	_lcd_command
  1575                           
  1576                           ;main.c: 194: char cancel[] = "Cancel";
  1577  001188  EE21  F0B9         	lfsr	2,main@F3207
  1578  00118C  EE11  F0A8         	lfsr	1,main@cancel
  1579  001190  0E06               	movlw	6
  1580  001192                     u2531:
  1581  001192  CFDB FFE3          	movff	plusw2,plusw1
  1582  001196  06E8               	decf	wreg,f,c
  1583  001198  E2FC               	bc	u2531
  1584                           
  1585                           ;main.c: 195: lcd_string(cancel);
  1586  00119A  0EA8               	movlw	low main@cancel
  1587  00119C  6E29               	movwf	lcd_string@x,c
  1588  00119E  0E01               	movlw	high main@cancel
  1589  0011A0  6E2A               	movwf	lcd_string@x+1,c
  1590  0011A2  EC48  F011         	call	_lcd_string	;wreg free
  1591                           
  1592                           ;main.c: 197: _delay((unsigned long)((30)*(8000000/4000.0)));
  1593  0011A6  0E4E               	movlw	78
  1594  0011A8  0100               	movlb	0	; () banked
  1595  0011AA  6FF8               	movwf	??_main& (0+255),b
  1596  0011AC  0EEB               	movlw	235
  1597  0011AE                     u2597:
  1598  0011AE  2EE8               	decfsz	wreg,f,c
  1599  0011B0  D7FE               	bra	u2597
  1600  0011B2  2FF8               	decfsz	??_main& (0+255),f,b
  1601  0011B4  D7FC               	bra	u2597
  1602                           
  1603                           ;main.c: 198: if(PORTDbits.RD2 == 1)
  1604  0011B6  A483               	btfss	3971,2,c	;volatile
  1605  0011B8  D004               	goto	l125
  1606                           
  1607                           ;main.c: 199: {
  1608                           ;main.c: 200: lcd_clear();
  1609  0011BA  EC78  F012         	call	_lcd_clear	;wreg free
  1610                           
  1611                           ;main.c: 201: LCD_STATES = CancelBake;
  1612  0011BE  0E0A               	movlw	10
  1613  0011C0  D79F               	goto	L5
  1614  0011C2                     l125:
  1615                           
  1616                           ;main.c: 203: else{
  1617                           ;main.c: 204: LCD_STATES = BakingStart;
  1618                           
  1619                           ; BSR set to: 1
  1620  0011C2  0E08               	movlw	8
  1621  0011C4  D79D               	goto	L5
  1622  0011C6                     l127:
  1623                           
  1624                           ; BSR set to: 1
  1625                           ;main.c: 211: if(PORTDbits.RD2 == 1)
  1626  0011C6  A483               	btfss	3971,2,c	;volatile
  1627  0011C8  D008               	goto	l128
  1628                           
  1629                           ; BSR set to: 1
  1630                           ;main.c: 212: {
  1631                           ;main.c: 213: PR2 = 255;
  1632  0011CA  68CB               	setf	4043,c	;volatile
  1633                           
  1634                           ;main.c: 214: T2CKPS1 = 1;
  1635  0011CC  82CA               	bsf	4042,1,c	;volatile
  1636                           
  1637                           ;main.c: 215: LATDbits.LATD1 = 0;
  1638  0011CE  928C               	bcf	3980,1,c	;volatile
  1639                           
  1640                           ; BSR set to: 1
  1641                           ;main.c: 216: alarmSet = 0;
  1642  0011D0  0E00               	movlw	0
  1643  0011D2  6E4A               	movwf	_alarmSet,c	;volatile
  1644                           
  1645                           ; BSR set to: 1
  1646                           ;main.c: 217: lcd_clear();
  1647  0011D4  EC78  F012         	call	_lcd_clear	;wreg free
  1648  0011D8  D75B               	goto	l3980
  1649  0011DA                     l128:
  1650                           
  1651                           ; BSR set to: 1
  1652                           ;main.c: 220: else{
  1653                           ;main.c: 221: LCD_STATES = CookTimeDone;
  1654                           
  1655                           ; BSR set to: 1
  1656  0011DA  0E09               	movlw	9
  1657  0011DC  D792               	goto	L6
  1658  0011DE                     
  1659                           ; BSR set to: 1
  1660                           ;main.c: 226: WriteToDac(0x00,0);
  1661                           
  1662                           ; BSR set to: 1
  1663  0011DE  0E00               	movlw	0
  1664  0011E0  6E28               	movwf	WriteToDac@data+1,c
  1665  0011E2  0E00               	movlw	0
  1666  0011E4  6E27               	movwf	WriteToDac@data,c
  1667  0011E6  0E00               	movlw	0
  1668  0011E8  6E2A               	movwf	WriteToDac@frequency+1,c
  1669  0011EA  0E00               	movlw	0
  1670  0011EC  6E29               	movwf	WriteToDac@frequency,c
  1671  0011EE  EC6C  F010         	call	_WriteToDac	;wreg free
  1672                           
  1673                           ;main.c: 227: LATDbits.LATD6 = 0;
  1674  0011F2  9C8C               	bcf	3980,6,c	;volatile
  1675                           
  1676                           ;main.c: 228: LATDbits.LATD7 = 1;
  1677  0011F4  8E8C               	bsf	3980,7,c	;volatile
  1678                           
  1679                           ;main.c: 229: PR2 = 255;
  1680  0011F6  68CB               	setf	4043,c	;volatile
  1681                           
  1682                           ;main.c: 230: sineOut = 0;
  1683  0011F8  0E00               	movlw	0
  1684  0011FA  6E49               	movwf	_sineOut,c	;volatile
  1685                           
  1686                           ;main.c: 231: InitI2C_MasterMode();
  1687  0011FC  EC31  F012         	call	_InitI2C_MasterMode	;wreg free
  1688                           
  1689                           ;main.c: 232: clearAlarm();
  1690  001200  ECF3  F010         	call	_clearAlarm	;wreg free
  1691  001204  D745               	goto	l3980
  1692  001206                     l101:
  1693                           
  1694                           ; BSR set to: 1
  1695  001206  0101               	movlb	1	; () banked
  1696  001208  51C6               	movf	_LCD_STATES& (0+255),w,b
  1697                           
  1698                           ; Switch size 1, requested type "space"
  1699                           ; Number of cases is 10, Range of values is 0 to 10
  1700                           ; switch strategies available:
  1701                           ; Name         Instructions Cycles
  1702                           ; simple_byte           31    16 (average)
  1703                           ;	Chosen strategy is simple_byte
  1704  00120A  0A00               	xorlw	0	; case 0
  1705  00120C  B4D8               	btfsc	status,2,c
  1706  00120E  D72E               	goto	l102
  1707  001210  0A02               	xorlw	2	; case 2
  1708  001212  B4D8               	btfsc	status,2,c
  1709  001214  D737               	goto	l104
  1710  001216  0A01               	xorlw	1	; case 3
  1711  001218  B4D8               	btfsc	status,2,c
  1712  00121A  D73C               	goto	l105
  1713  00121C  0A07               	xorlw	7	; case 4
  1714  00121E  B4D8               	btfsc	status,2,c
  1715  001220  D74A               	goto	l108
  1716  001222  0A01               	xorlw	1	; case 5
  1717  001224  B4D8               	btfsc	status,2,c
  1718  001226  D76F               	goto	l113
  1719  001228  0A03               	xorlw	3	; case 6
  1720  00122A  B4D8               	btfsc	status,2,c
  1721  00122C  D789               	goto	l118
  1722  00122E  0A01               	xorlw	1	; case 7
  1723  001230  B4D8               	btfsc	status,2,c
  1724  001232  D78C               	goto	l119
  1725  001234  0A0F               	xorlw	15	; case 8
  1726  001236  B4D8               	btfsc	status,2,c
  1727  001238  D792               	goto	l120
  1728  00123A  0A01               	xorlw	1	; case 9
  1729  00123C  B4D8               	btfsc	status,2,c
  1730  00123E  D7C3               	goto	l127
  1731  001240  0A03               	xorlw	3	; case 10
  1732  001242  B4D8               	btfsc	status,2,c
  1733  001244  D7CC               	goto	l130
  1734                           
  1735                           ; BSR set to: 1
  1736                           
  1737                           ; BSR set to: 1
  1738  001246  D70F               	goto	l100
  1739  001248                     __end_of_main:
  1740                           	opt stack 0
  1741                           tblptru	equ	0xFF8
  1742                           tblptrh	equ	0xFF7
  1743                           tblptrl	equ	0xFF6
  1744                           tablat	equ	0xFF5
  1745                           intcon	equ	0xFF2
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           postdec1	equ	0xFE5
  1749                           plusw1	equ	0xFE3
  1750                           fsr1l	equ	0xFE1
  1751                           plusw2	equ	0xFDB
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _lcd_init *****************
  1755 ;; Defined at:
  1756 ;;		line 27 in file "lcd.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      void 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0, cstack
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;Total ram usage:        0 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    4
  1777 ;; This function calls:
  1778 ;;		_lcd_command
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text1
  1785  0023E6                     __ptext1:
  1786                           	opt stack 0
  1787  0023E6                     _lcd_init:
  1788                           	opt stack 26
  1789                           
  1790                           ;lcd.c: 28: lcd_command(0x33);
  1791                           
  1792                           ; BSR set to: 1
  1793                           ;incstack = 0
  1794  0023E6  0E33               	movlw	51
  1795  0023E8  EC53  F00C         	call	_lcd_command
  1796                           
  1797                           ;lcd.c: 29: lcd_command(0x32);
  1798  0023EC  0E32               	movlw	50
  1799  0023EE  EC53  F00C         	call	_lcd_command
  1800                           
  1801                           ;lcd.c: 30: lcd_command(0x2C);
  1802  0023F2  0E2C               	movlw	44
  1803  0023F4  EC53  F00C         	call	_lcd_command
  1804                           
  1805                           ;lcd.c: 31: lcd_command(0x0C);
  1806  0023F8  0E0C               	movlw	12
  1807  0023FA  EC53  F00C         	call	_lcd_command
  1808                           
  1809                           ;lcd.c: 32: lcd_command(0x01);
  1810  0023FE  0E01               	movlw	1
  1811  002400  EC53  F00C         	call	_lcd_command
  1812  002404  0012               	return		;funcret
  1813  002406                     __end_of_lcd_init:
  1814                           	opt stack 0
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           intcon	equ	0xFF2
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postdec1	equ	0xFE5
  1823                           plusw1	equ	0xFE3
  1824                           fsr1l	equ	0xFE1
  1825                           plusw2	equ	0xFDB
  1826                           status	equ	0xFD8
  1827                           
  1828 ;; *************** function _WriteToRTC *****************
  1829 ;; Defined at:
  1830 ;;		line 135 in file "timing_controller.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  WRITE_MODE      1   44[COMRAM] unsigned char 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, status,0, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;Total ram usage:        1 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    6
  1851 ;; This function calls:
  1852 ;;		_I2C_WriteToSlave
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text2
  1859  001CDA                     __ptext2:
  1860                           	opt stack 0
  1861  001CDA                     _WriteToRTC:
  1862                           	opt stack 24
  1863                           
  1864                           ;timing_controller.c: 137: bool WRITE_MODE = 0;
  1865                           
  1866                           ;incstack = 0
  1867  001CDA  0E00               	movlw	0
  1868  001CDC  6E2D               	movwf	WriteToRTC@WRITE_MODE,c
  1869                           
  1870                           ;timing_controller.c: 139: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x01, setMin);
  1871  001CDE  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1872  001CE2  0E01               	movlw	1
  1873  001CE4  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1874  001CE6  C045  F02B         	movff	_setMin,I2C_WriteToSlave@data	;volatile
  1875  001CEA  0EDE               	movlw	222
  1876  001CEC  ECE2  F011         	call	_I2C_WriteToSlave
  1877                           
  1878                           ;timing_controller.c: 140: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x02, setHr);
  1879  001CF0  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1880  001CF4  0E02               	movlw	2
  1881  001CF6  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1882  001CF8  C044  F02B         	movff	_setHr,I2C_WriteToSlave@data	;volatile
  1883  001CFC  0EDE               	movlw	222
  1884  001CFE  ECE2  F011         	call	_I2C_WriteToSlave
  1885                           
  1886                           ;timing_controller.c: 143: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x00, 0x80);
  1887  001D02  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1888  001D06  0E00               	movlw	0
  1889  001D08  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1890  001D0A  0E80               	movlw	128
  1891  001D0C  6E2B               	movwf	I2C_WriteToSlave@data,c
  1892  001D0E  0EDE               	movlw	222
  1893  001D10  ECE2  F011         	call	_I2C_WriteToSlave
  1894                           
  1895                           ;timing_controller.c: 144: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x03, 0x01);
  1896  001D14  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1897  001D18  0E03               	movlw	3
  1898  001D1A  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1899  001D1C  0E01               	movlw	1
  1900  001D1E  6E2B               	movwf	I2C_WriteToSlave@data,c
  1901  001D20  0EDE               	movlw	222
  1902  001D22  ECE2  F011         	call	_I2C_WriteToSlave
  1903                           
  1904                           ;timing_controller.c: 145: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x04, 0x01);
  1905  001D26  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1906  001D2A  0E04               	movlw	4
  1907  001D2C  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1908  001D2E  0E01               	movlw	1
  1909  001D30  6E2B               	movwf	I2C_WriteToSlave@data,c
  1910  001D32  0EDE               	movlw	222
  1911  001D34  ECE2  F011         	call	_I2C_WriteToSlave
  1912                           
  1913                           ;timing_controller.c: 146: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x05, 0x03);
  1914  001D38  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1915  001D3C  0E05               	movlw	5
  1916  001D3E  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1917  001D40  0E03               	movlw	3
  1918  001D42  6E2B               	movwf	I2C_WriteToSlave@data,c
  1919  001D44  0EDE               	movlw	222
  1920  001D46  ECE2  F011         	call	_I2C_WriteToSlave
  1921                           
  1922                           ;timing_controller.c: 147: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x06, 0x00);
  1923  001D4A  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1924  001D4E  0E06               	movlw	6
  1925  001D50  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1926  001D52  0E00               	movlw	0
  1927  001D54  6E2B               	movwf	I2C_WriteToSlave@data,c
  1928  001D56  0EDE               	movlw	222
  1929  001D58  ECE2  F011         	call	_I2C_WriteToSlave
  1930  001D5C  0012               	return		;funcret
  1931  001D5E                     __end_of_WriteToRTC:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           intcon	equ	0xFF2
  1938                           postinc0	equ	0xFEE
  1939                           wreg	equ	0xFE8
  1940                           postdec1	equ	0xFE5
  1941                           plusw1	equ	0xFE3
  1942                           fsr1l	equ	0xFE1
  1943                           plusw2	equ	0xFDB
  1944                           status	equ	0xFD8
  1945                           
  1946 ;; *************** function _WriteTimeToCookToRTC *****************
  1947 ;; Defined at:
  1948 ;;		line 73 in file "cooktime_controller.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;		None
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  WRITE_MODE      1   44[COMRAM] unsigned char 
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2, status,0, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;Total ram usage:        1 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    6
  1969 ;; This function calls:
  1970 ;;		_I2C_WriteToSlave
  1971 ;; This function is called by:
  1972 ;;		_main
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text3
  1977  001D5E                     __ptext3:
  1978                           	opt stack 0
  1979  001D5E                     _WriteTimeToCookToRTC:
  1980                           	opt stack 24
  1981                           
  1982                           ;cooktime_controller.c: 75: bool WRITE_MODE = 0;
  1983                           
  1984                           ;incstack = 0
  1985  001D5E  0E00               	movlw	0
  1986  001D60  6E2D               	movwf	WriteTimeToCookToRTC@WRITE_MODE,c
  1987                           
  1988                           ;cooktime_controller.c: 77: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x07, 0x10);
  1989  001D62  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1990  001D66  0E07               	movlw	7
  1991  001D68  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1992  001D6A  0E10               	movlw	16
  1993  001D6C  6E2B               	movwf	I2C_WriteToSlave@data,c
  1994  001D6E  0EDE               	movlw	222
  1995  001D70  ECE2  F011         	call	_I2C_WriteToSlave
  1996                           
  1997                           ;cooktime_controller.c: 80: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0A, 0x00);
  1998  001D74  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1999  001D78  0E0A               	movlw	10
  2000  001D7A  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2001  001D7C  0E00               	movlw	0
  2002  001D7E  6E2B               	movwf	I2C_WriteToSlave@data,c
  2003  001D80  0EDE               	movlw	222
  2004  001D82  ECE2  F011         	call	_I2C_WriteToSlave
  2005                           
  2006                           ;cooktime_controller.c: 81: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0B, setCookTimeMi
      +                          n);
  2007  001D86  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2008  001D8A  0E0B               	movlw	11
  2009  001D8C  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2010  001D8E  C040  F02B         	movff	_setCookTimeMin,I2C_WriteToSlave@data	;volatile
  2011  001D92  0EDE               	movlw	222
  2012  001D94  ECE2  F011         	call	_I2C_WriteToSlave
  2013                           
  2014                           ;cooktime_controller.c: 82: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0C, 0x61);
  2015  001D98  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2016  001D9C  0E0C               	movlw	12
  2017  001D9E  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2018  001DA0  0E61               	movlw	97
  2019  001DA2  6E2B               	movwf	I2C_WriteToSlave@data,c
  2020  001DA4  0EDE               	movlw	222
  2021  001DA6  ECE2  F011         	call	_I2C_WriteToSlave
  2022                           
  2023                           ;cooktime_controller.c: 83: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0D, 0b10010001);
  2024  001DAA  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2025  001DAE  0E0D               	movlw	13
  2026  001DB0  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2027  001DB2  0E91               	movlw	145
  2028  001DB4  6E2B               	movwf	I2C_WriteToSlave@data,c
  2029  001DB6  0EDE               	movlw	222
  2030  001DB8  ECE2  F011         	call	_I2C_WriteToSlave
  2031                           
  2032                           ;cooktime_controller.c: 84: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0E, 0x01);
  2033  001DBC  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2034  001DC0  0E0E               	movlw	14
  2035  001DC2  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2036  001DC4  0E01               	movlw	1
  2037  001DC6  6E2B               	movwf	I2C_WriteToSlave@data,c
  2038  001DC8  0EDE               	movlw	222
  2039  001DCA  ECE2  F011         	call	_I2C_WriteToSlave
  2040                           
  2041                           ;cooktime_controller.c: 85: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0F, 0x01);
  2042  001DCE  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2043  001DD2  0E0F               	movlw	15
  2044  001DD4  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2045  001DD6  0E01               	movlw	1
  2046  001DD8  6E2B               	movwf	I2C_WriteToSlave@data,c
  2047  001DDA  0EDE               	movlw	222
  2048  001DDC  ECE2  F011         	call	_I2C_WriteToSlave
  2049  001DE0  0012               	return		;funcret
  2050  001DE2                     __end_of_WriteTimeToCookToRTC:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           intcon	equ	0xFF2
  2057                           postinc0	equ	0xFEE
  2058                           wreg	equ	0xFE8
  2059                           postdec1	equ	0xFE5
  2060                           plusw1	equ	0xFE3
  2061                           fsr1l	equ	0xFE1
  2062                           plusw2	equ	0xFDB
  2063                           status	equ	0xFD8
  2064                           
  2065 ;; *************** function _WriteTime *****************
  2066 ;; Defined at:
  2067 ;;		line 155 in file "timing_controller.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  convertedHou    1    1[BANK0 ] unsigned char 
  2072 ;;  convertedMin    1    0[BANK0 ] unsigned char 
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  1    wreg      void 
  2075 ;; Registers used:
  2076 ;;		wreg, status,2, status,0, cstack
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;Total ram usage:        2 bytes
  2087 ;; Hardware stack levels used:    1
  2088 ;; Hardware stack levels required when called:    5
  2089 ;; This function calls:
  2090 ;;		_IntToBcd
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text4
  2097  0022C4                     __ptext4:
  2098                           	opt stack 0
  2099  0022C4                     _WriteTime:
  2100                           	opt stack 25
  2101                           
  2102                           ;timing_controller.c: 157: setMin = (uint8_t)minAdcRead;
  2103                           
  2104                           ;incstack = 0
  2105  0022C4  C037  F045         	movff	_minAdcRead,_setMin	;volatile
  2106                           
  2107                           ;timing_controller.c: 158: setHr = (uint8_t)hrAdcRead;
  2108  0022C8  C039  F044         	movff	_hrAdcRead,_setHr	;volatile
  2109                           
  2110                           ;timing_controller.c: 160: uint8_t convertedMinutesToBCD = IntToBcd(setMin);
  2111  0022CC  5045               	movf	_setMin,w,c	;volatile
  2112  0022CE  EC12  F011         	call	_IntToBcd
  2113  0022D2  0100               	movlb	0	; () banked
  2114  0022D4  6FD9               	movwf	WriteTime@convertedMinutesToBCD& (0+255),b
  2115                           
  2116                           ;timing_controller.c: 161: uint8_t convertedHoursToBCD = IntToBcd(setHr);
  2117  0022D6  5044               	movf	_setHr,w,c	;volatile
  2118  0022D8  EC12  F011         	call	_IntToBcd
  2119  0022DC  0100               	movlb	0	; () banked
  2120  0022DE  6FDA               	movwf	WriteTime@convertedHoursToBCD& (0+255),b
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;timing_controller.c: 163: convertedHoursToBCD = convertedHoursToBCD | (1 << 5);
  2124  0022E0  51DA               	movf	WriteTime@convertedHoursToBCD& (0+255),w,b
  2125  0022E2  0920               	iorlw	32
  2126  0022E4  6FDA               	movwf	WriteTime@convertedHoursToBCD& (0+255),b
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;timing_controller.c: 164: convertedHoursToBCD = convertedHoursToBCD | (1 << 6);
  2130  0022E6  51DA               	movf	WriteTime@convertedHoursToBCD& (0+255),w,b
  2131  0022E8  0940               	iorlw	64
  2132  0022EA  6FDA               	movwf	WriteTime@convertedHoursToBCD& (0+255),b
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;timing_controller.c: 167: setMin = convertedMinutesToBCD;
  2136  0022EC  C0D9  F045         	movff	WriteTime@convertedMinutesToBCD,_setMin	;volatile
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;timing_controller.c: 168: setHr = convertedHoursToBCD;
  2140  0022F0  C0DA  F044         	movff	WriteTime@convertedHoursToBCD,_setHr	;volatile
  2141                           
  2142                           ; BSR set to: 0
  2143  0022F4  0012               	return		;funcret
  2144  0022F6                     __end_of_WriteTime:
  2145                           	opt stack 0
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           intcon	equ	0xFF2
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           plusw1	equ	0xFE3
  2155                           fsr1l	equ	0xFE1
  2156                           plusw2	equ	0xFDB
  2157                           status	equ	0xFD8
  2158                           
  2159 ;; *************** function _IntToBcd *****************
  2160 ;; Defined at:
  2161 ;;		line 150 in file "timing_controller.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  x               1    wreg     unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  x               1   47[COMRAM] unsigned char 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      unsigned char 
  2168 ;; Registers used:
  2169 ;;		wreg, status,2, status,0, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;Total ram usage:        3 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    4
  2182 ;; This function calls:
  2183 ;;		___awdiv
  2184 ;;		___awmod
  2185 ;; This function is called by:
  2186 ;;		_WriteTime
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text5
  2191  002224                     __ptext5:
  2192                           	opt stack 0
  2193  002224                     _IntToBcd:
  2194                           	opt stack 25
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;incstack = 0
  2198                           ;IntToBcd@x stored from wreg
  2199  002224  6E30               	movwf	IntToBcd@x,c
  2200                           
  2201                           ;timing_controller.c: 152: return ((x / 10) << 4) | (x % 10);
  2202  002226  C030  F026         	movff	IntToBcd@x,___awmod@dividend
  2203  00222A  6A27               	clrf	___awmod@dividend+1,c
  2204  00222C  0E00               	movlw	0
  2205  00222E  6E29               	movwf	___awmod@divisor+1,c
  2206  002230  0E0A               	movlw	10
  2207  002232  6E28               	movwf	___awmod@divisor,c
  2208  002234  ECB5  F00F         	call	___awmod	;wreg free
  2209  002238  C026  F02E         	movff	?___awmod,??_IntToBcd
  2210  00223C  C027  F02F         	movff	?___awmod+1,??_IntToBcd+1
  2211  002240  C030  F026         	movff	IntToBcd@x,___awdiv@dividend
  2212  002244  6A27               	clrf	___awdiv@dividend+1,c
  2213  002246  0E00               	movlw	0
  2214  002248  6E29               	movwf	___awdiv@divisor+1,c
  2215  00224A  0E0A               	movlw	10
  2216  00224C  6E28               	movwf	___awdiv@divisor,c
  2217  00224E  ECF1  F00E         	call	___awdiv	;wreg free
  2218  002252  3826               	swapf	?___awdiv,w,c
  2219  002254  0BF0               	andlw	240
  2220  002256  102E               	iorwf	??_IntToBcd,w,c
  2221  002258  0012               	return	
  2222  00225A                     __end_of_IntToBcd:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           intcon	equ	0xFF2
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postdec1	equ	0xFE5
  2232                           plusw1	equ	0xFE3
  2233                           fsr1l	equ	0xFE1
  2234                           plusw2	equ	0xFDB
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _Timer2Init *****************
  2238 ;; Defined at:
  2239 ;;		line 15 in file "timer2.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		None
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;Total ram usage:        0 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    3
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text6
  2268  00249E                     __ptext6:
  2269                           	opt stack 0
  2270  00249E                     _Timer2Init:
  2271                           	opt stack 27
  2272                           
  2273                           ;timer2.c: 16: PR2 = 255;
  2274                           
  2275                           ;incstack = 0
  2276  00249E  68CB               	setf	4043,c	;volatile
  2277                           
  2278                           ;timer2.c: 17: T2OUTPS3 = 1;
  2279  0024A0  8CCA               	bsf	4042,6,c	;volatile
  2280                           
  2281                           ;timer2.c: 18: T2OUTPS2 = 1;
  2282  0024A2  8ACA               	bsf	4042,5,c	;volatile
  2283                           
  2284                           ;timer2.c: 19: T2OUTPS1 = 1;
  2285  0024A4  88CA               	bsf	4042,4,c	;volatile
  2286                           
  2287                           ;timer2.c: 20: T2OUTPS0 = 1;
  2288  0024A6  86CA               	bsf	4042,3,c	;volatile
  2289                           
  2290                           ;timer2.c: 21: T2CKPS1 = 1;
  2291  0024A8  82CA               	bsf	4042,1,c	;volatile
  2292                           
  2293                           ;timer2.c: 22: T2CONbits.TMR2ON = 1;
  2294  0024AA  84CA               	bsf	4042,2,c	;volatile
  2295  0024AC  0012               	return		;funcret
  2296  0024AE                     __end_of_Timer2Init:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           intcon	equ	0xFF2
  2303                           postinc0	equ	0xFEE
  2304                           wreg	equ	0xFE8
  2305                           postdec1	equ	0xFE5
  2306                           plusw1	equ	0xFE3
  2307                           fsr1l	equ	0xFE1
  2308                           plusw2	equ	0xFDB
  2309                           status	equ	0xFD8
  2310                           
  2311 ;; *************** function _TimeSetting *****************
  2312 ;; Defined at:
  2313 ;;		line 41 in file "timing_controller.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  readADCInput    2   14[BANK0 ] unsigned int 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  minContainer    2   23[BANK1 ] unsigned char [2]
  2318 ;;  minContainer    1   26[BANK1 ] unsigned char [1]
  2319 ;;  hourContaine    2   21[BANK1 ] unsigned char [2]
  2320 ;;  hourContaine    1   25[BANK1 ] unsigned char [1]
  2321 ;;  setTimeDispl    9    0[BANK1 ] unsigned char [9]
  2322 ;;  next            6   15[BANK1 ] unsigned char [6]
  2323 ;;  move            6    9[BANK1 ] unsigned char [6]
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Locals:         0       0      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Totals:         0       3      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;Total ram usage:       30 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    5
  2340 ;; This function calls:
  2341 ;;		___lwdiv
  2342 ;;		_lcd_char
  2343 ;;		_lcd_command
  2344 ;;		_lcd_string
  2345 ;;		_sprintf
  2346 ;; This function is called by:
  2347 ;;		_main
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text7
  2352  001248                     __ptext7:
  2353                           	opt stack 0
  2354  001248                     _TimeSetting:
  2355                           	opt stack 25
  2356                           
  2357                           ;timing_controller.c: 44: lcd_command(0x80);
  2358                           
  2359                           ;incstack = 0
  2360  001248  0E80               	movlw	128
  2361  00124A  EC53  F00C         	call	_lcd_command
  2362                           
  2363                           ;timing_controller.c: 45: char setTimeDisplay[] = "Set Time";
  2364  00124E  EE20  F09F         	lfsr	2,TimeSetting@F3160
  2365  001252  EE11  F000         	lfsr	1,TimeSetting@setTimeDisplay
  2366  001256  0E08               	movlw	8
  2367  001258                     u2211:
  2368  001258  CFDB FFE3          	movff	plusw2,plusw1
  2369  00125C  06E8               	decf	wreg,f,c
  2370  00125E  E2FC               	bc	u2211
  2371                           
  2372                           ;timing_controller.c: 46: lcd_string(setTimeDisplay);
  2373  001260  0E00               	movlw	low TimeSetting@setTimeDisplay
  2374  001262  6E29               	movwf	lcd_string@x,c
  2375  001264  0E01               	movlw	high TimeSetting@setTimeDisplay
  2376  001266  6E2A               	movwf	lcd_string@x+1,c
  2377  001268  EC48  F011         	call	_lcd_string	;wreg free
  2378                           
  2379                           ;timing_controller.c: 48: lcd_command(0x8B);
  2380  00126C  0E8B               	movlw	139
  2381  00126E  EC53  F00C         	call	_lcd_command
  2382                           
  2383                           ;timing_controller.c: 49: char move[] = "|Move";
  2384  001272  EE20  F0CD         	lfsr	2,TimeSetting@F3162
  2385  001276  EE11  F009         	lfsr	1,TimeSetting@move
  2386  00127A  0E05               	movlw	5
  2387  00127C                     u2221:
  2388  00127C  CFDB FFE3          	movff	plusw2,plusw1
  2389  001280  06E8               	decf	wreg,f,c
  2390  001282  E2FC               	bc	u2221
  2391                           
  2392                           ;timing_controller.c: 50: lcd_string(move);
  2393  001284  0E09               	movlw	low TimeSetting@move
  2394  001286  6E29               	movwf	lcd_string@x,c
  2395  001288  0E01               	movlw	high TimeSetting@move
  2396  00128A  6E2A               	movwf	lcd_string@x+1,c
  2397  00128C  EC48  F011         	call	_lcd_string	;wreg free
  2398                           
  2399                           ;timing_controller.c: 52: lcd_command(0xCB);
  2400  001290  0ECB               	movlw	203
  2401  001292  EC53  F00C         	call	_lcd_command
  2402                           
  2403                           ;timing_controller.c: 53: char next[] = "|Next";
  2404  001296  EE20  F0C7         	lfsr	2,TimeSetting@F3164
  2405  00129A  EE11  F00F         	lfsr	1,TimeSetting@next
  2406  00129E  0E05               	movlw	5
  2407  0012A0                     u2231:
  2408  0012A0  CFDB FFE3          	movff	plusw2,plusw1
  2409  0012A4  06E8               	decf	wreg,f,c
  2410  0012A6  E2FC               	bc	u2231
  2411                           
  2412                           ;timing_controller.c: 54: lcd_string(next);
  2413  0012A8  0E0F               	movlw	low TimeSetting@next
  2414  0012AA  6E29               	movwf	lcd_string@x,c
  2415  0012AC  0E01               	movlw	high TimeSetting@next
  2416  0012AE  6E2A               	movwf	lcd_string@x+1,c
  2417  0012B0  EC48  F011         	call	_lcd_string	;wreg free
  2418                           
  2419                           ;timing_controller.c: 56: lcd_command(0xC2);
  2420  0012B4  0EC2               	movlw	194
  2421  0012B6  EC53  F00C         	call	_lcd_command
  2422                           
  2423                           ;timing_controller.c: 57: lcd_char(':');
  2424  0012BA  0E3A               	movlw	58
  2425  0012BC  ECFC  F00B         	call	_lcd_char
  2426                           
  2427                           ;timing_controller.c: 59: lcd_command(0xC0);
  2428  0012C0  0EC0               	movlw	192
  2429  0012C2  EC53  F00C         	call	_lcd_command
  2430                           
  2431                           ;timing_controller.c: 63: _delay((unsigned long)((30)*(8000000/4000.0)));
  2432  0012C6  0E4E               	movlw	78
  2433  0012C8  0100               	movlb	0	; () banked
  2434  0012CA  6FE9               	movwf	??_TimeSetting& (0+255),b
  2435  0012CC  0EEB               	movlw	235
  2436  0012CE                     u2607:
  2437  0012CE  2EE8               	decfsz	wreg,f,c
  2438  0012D0  D7FE               	bra	u2607
  2439  0012D2  2FE9               	decfsz	??_TimeSetting& (0+255),f,b
  2440  0012D4  D7FC               	bra	u2607
  2441                           
  2442                           ;timing_controller.c: 64: if(PORTDbits.RD3 == 1)
  2443  0012D6  A683               	btfss	3971,3,c	;volatile
  2444  0012D8  D00F               	goto	l392
  2445                           
  2446                           ;timing_controller.c: 65: {
  2447                           ;timing_controller.c: 66: cursorLocation++;
  2448  0012DA  2A46               	incf	_cursorLocation,f,c	;volatile
  2449                           
  2450                           ;timing_controller.c: 67: if(cursorLocation == 1)
  2451  0012DC  0446               	decf	_cursorLocation,w,c	;volatile
  2452  0012DE  B4D8               	btfsc	status,2,c
  2453                           
  2454                           ;timing_controller.c: 68: {
  2455                           ;timing_controller.c: 69: cursorLocation = hr;
  2456  0012E0  C057  F046         	movff	_hr,_cursorLocation	;volatile
  2457                           
  2458                           ;timing_controller.c: 70: }
  2459                           ;timing_controller.c: 71: if(cursorLocation == 2)
  2460  0012E4  0E02               	movlw	2
  2461  0012E6  1846               	xorwf	_cursorLocation,w,c	;volatile
  2462  0012E8  B4D8               	btfsc	status,2,c
  2463                           
  2464                           ;timing_controller.c: 72: {
  2465                           ;timing_controller.c: 73: cursorLocation = min;
  2466  0012EA  C056  F046         	movff	_min,_cursorLocation	;volatile
  2467                           
  2468                           ;timing_controller.c: 74: }
  2469                           ;timing_controller.c: 75: if(cursorLocation > 2)
  2470  0012EE  0E02               	movlw	2
  2471  0012F0  6446               	cpfsgt	_cursorLocation,c	;volatile
  2472  0012F2  D002               	goto	l392
  2473                           
  2474                           ;timing_controller.c: 76: {
  2475                           ;timing_controller.c: 77: cursorLocation = 1;
  2476  0012F4  0E01               	movlw	1
  2477  0012F6  6E46               	movwf	_cursorLocation,c	;volatile
  2478  0012F8                     l392:
  2479                           
  2480                           ;timing_controller.c: 78: }
  2481                           ;timing_controller.c: 79: }
  2482                           ;timing_controller.c: 81: if(cursorLocation == hr)
  2483  0012F8  5057               	movf	_hr,w,c	;volatile
  2484  0012FA  1846               	xorwf	_cursorLocation,w,c	;volatile
  2485  0012FC  A4D8               	btfss	status,2,c
  2486  0012FE  D05B               	goto	l396
  2487                           
  2488                           ;timing_controller.c: 82: {
  2489                           ;timing_controller.c: 83: _delay((unsigned long)((30)*(8000000/4000.0)));
  2490  001300  0E4E               	movlw	78
  2491  001302  0100               	movlb	0	; () banked
  2492  001304  6FE9               	movwf	??_TimeSetting& (0+255),b
  2493  001306  0EEB               	movlw	235
  2494  001308                     u2617:
  2495  001308  2EE8               	decfsz	wreg,f,c
  2496  00130A  D7FE               	bra	u2617
  2497  00130C  2FE9               	decfsz	??_TimeSetting& (0+255),f,b
  2498  00130E  D7FC               	bra	u2617
  2499                           
  2500                           ;timing_controller.c: 84: hrAdcRead = readADCInput/85;
  2501  001310  C0E7  F026         	movff	TimeSetting@readADCInput,___lwdiv@dividend
  2502  001314  C0E8  F027         	movff	TimeSetting@readADCInput+1,___lwdiv@dividend+1
  2503  001318  0E00               	movlw	0
  2504  00131A  6E29               	movwf	___lwdiv@divisor+1,c
  2505  00131C  0E55               	movlw	85
  2506  00131E  6E28               	movwf	___lwdiv@divisor,c
  2507  001320  EC1A  F010         	call	___lwdiv	;wreg free
  2508  001324  C026  F039         	movff	?___lwdiv,_hrAdcRead	;volatile
  2509  001328  C027  F03A         	movff	?___lwdiv+1,_hrAdcRead+1	;volatile
  2510                           
  2511                           ;timing_controller.c: 85: if(hrAdcRead <= 0)
  2512  00132C  5039               	movf	_hrAdcRead,w,c	;volatile
  2513  00132E  103A               	iorwf	_hrAdcRead+1,w,c	;volatile
  2514  001330  A4D8               	btfss	status,2,c
  2515  001332  D004               	goto	l394
  2516                           
  2517                           ;timing_controller.c: 86: {
  2518                           ;timing_controller.c: 87: hrAdcRead = 1;
  2519  001334  0E00               	movlw	0
  2520  001336  6E3A               	movwf	_hrAdcRead+1,c	;volatile
  2521  001338  0E01               	movlw	1
  2522  00133A  6E39               	movwf	_hrAdcRead,c	;volatile
  2523  00133C                     l394:
  2524                           
  2525                           ;timing_controller.c: 88: }
  2526                           ;timing_controller.c: 89: if(hrAdcRead < 10)
  2527  00133C  503A               	movf	_hrAdcRead+1,w,c	;volatile
  2528  00133E  E123               	bnz	l3740
  2529  001340  0E0A               	movlw	10
  2530  001342  5C39               	subwf	_hrAdcRead,w,c	;volatile
  2531  001344  B0D8               	btfsc	status,0,c
  2532  001346  D01F               	goto	l395
  2533                           
  2534                           ;timing_controller.c: 90: {
  2535                           ;timing_controller.c: 91: lcd_command(0xC0);
  2536  001348  0EC0               	movlw	192
  2537  00134A  EC53  F00C         	call	_lcd_command
  2538                           
  2539                           ;timing_controller.c: 92: lcd_char('0');
  2540  00134E  0E30               	movlw	48
  2541  001350  ECFC  F00B         	call	_lcd_char
  2542                           
  2543                           ;timing_controller.c: 93: lcd_command(0xC1);
  2544  001354  0EC1               	movlw	193
  2545  001356  EC53  F00C         	call	_lcd_command
  2546                           
  2547                           ;timing_controller.c: 94: char hourContainer[1];
  2548                           ;timing_controller.c: 95: sprintf(hourContainer, "%u", hrAdcRead);
  2549  00135A  0E19               	movlw	low TimeSetting@hourContainer
  2550  00135C  0100               	movlb	0	; () banked
  2551  00135E  6FDA               	movwf	sprintf@sp& (0+255),b
  2552  001360  0E01               	movlw	high TimeSetting@hourContainer
  2553  001362  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  2554  001364  0E0B               	movlw	low STR_1
  2555  001366  6FDC               	movwf	sprintf@f& (0+255),b
  2556  001368  0E10               	movlw	high STR_1
  2557  00136A  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  2558  00136C  C039  F0DE         	movff	_hrAdcRead,?_sprintf+4	;volatile
  2559  001370  C03A  F0DF         	movff	_hrAdcRead+1,?_sprintf+5	;volatile
  2560  001374  ECDA  F00A         	call	_sprintf	;wreg free
  2561                           
  2562                           ;timing_controller.c: 96: lcd_string(hourContainer);
  2563  001378  0E19               	movlw	low TimeSetting@hourContainer
  2564  00137A  6E29               	movwf	lcd_string@x,c
  2565  00137C  0E01               	movlw	high TimeSetting@hourContainer
  2566  00137E  6E2A               	movwf	lcd_string@x+1,c
  2567  001380  EC48  F011         	call	_lcd_string	;wreg free
  2568                           
  2569                           ;timing_controller.c: 97: }
  2570  001384  D018               	goto	l396
  2571  001386                     l395:
  2572  001386                     l3740:
  2573                           
  2574                           ;timing_controller.c: 98: else{
  2575                           ;timing_controller.c: 99: lcd_command(0xC0);
  2576  001386  0EC0               	movlw	192
  2577  001388  EC53  F00C         	call	_lcd_command
  2578                           
  2579                           ;timing_controller.c: 100: char hourContainer[2];
  2580                           ;timing_controller.c: 101: sprintf(hourContainer, "%u", hrAdcRead);
  2581  00138C  0E15               	movlw	low TimeSetting@hourContainer_1229
  2582  00138E  0100               	movlb	0	; () banked
  2583  001390  6FDA               	movwf	sprintf@sp& (0+255),b
  2584  001392  0E01               	movlw	high TimeSetting@hourContainer_1229
  2585  001394  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  2586  001396  0E0B               	movlw	low STR_1
  2587  001398  6FDC               	movwf	sprintf@f& (0+255),b
  2588  00139A  0E10               	movlw	high STR_1
  2589  00139C  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  2590  00139E  C039  F0DE         	movff	_hrAdcRead,?_sprintf+4	;volatile
  2591  0013A2  C03A  F0DF         	movff	_hrAdcRead+1,?_sprintf+5	;volatile
  2592  0013A6  ECDA  F00A         	call	_sprintf	;wreg free
  2593                           
  2594                           ;timing_controller.c: 102: lcd_string(hourContainer);
  2595  0013AA  0E15               	movlw	low TimeSetting@hourContainer_1229
  2596  0013AC  6E29               	movwf	lcd_string@x,c
  2597  0013AE  0E01               	movlw	high TimeSetting@hourContainer_1229
  2598  0013B0  6E2A               	movwf	lcd_string@x+1,c
  2599  0013B2  EC48  F011         	call	_lcd_string	;wreg free
  2600  0013B6                     l396:
  2601                           
  2602                           ;timing_controller.c: 103: }
  2603                           ;timing_controller.c: 104: }
  2604                           ;timing_controller.c: 106: if(cursorLocation == min)
  2605  0013B6  5056               	movf	_min,w,c	;volatile
  2606  0013B8  1846               	xorwf	_cursorLocation,w,c	;volatile
  2607  0013BA  A4D8               	btfss	status,2,c
  2608  0013BC  0012               	return	
  2609                           
  2610                           ;timing_controller.c: 107: {
  2611                           ;timing_controller.c: 108: _delay((unsigned long)((30)*(8000000/4000.0)));
  2612  0013BE  0E4E               	movlw	78
  2613  0013C0  0100               	movlb	0	; () banked
  2614  0013C2  6FE9               	movwf	??_TimeSetting& (0+255),b
  2615  0013C4  0EEB               	movlw	235
  2616  0013C6                     u2627:
  2617  0013C6  2EE8               	decfsz	wreg,f,c
  2618  0013C8  D7FE               	bra	u2627
  2619  0013CA  2FE9               	decfsz	??_TimeSetting& (0+255),f,b
  2620  0013CC  D7FC               	bra	u2627
  2621                           
  2622                           ;timing_controller.c: 109: minAdcRead = readADCInput/17;
  2623  0013CE  C0E7  F026         	movff	TimeSetting@readADCInput,___lwdiv@dividend
  2624  0013D2  C0E8  F027         	movff	TimeSetting@readADCInput+1,___lwdiv@dividend+1
  2625  0013D6  0E00               	movlw	0
  2626  0013D8  6E29               	movwf	___lwdiv@divisor+1,c
  2627  0013DA  0E11               	movlw	17
  2628  0013DC  6E28               	movwf	___lwdiv@divisor,c
  2629  0013DE  EC1A  F010         	call	___lwdiv	;wreg free
  2630  0013E2  C026  F037         	movff	?___lwdiv,_minAdcRead	;volatile
  2631  0013E6  C027  F038         	movff	?___lwdiv+1,_minAdcRead+1	;volatile
  2632                           
  2633                           ;timing_controller.c: 111: if(minAdcRead >= 60)
  2634  0013EA  5038               	movf	_minAdcRead+1,w,c	;volatile
  2635  0013EC  E104               	bnz	u2320
  2636  0013EE  0E3C               	movlw	60
  2637  0013F0  5C37               	subwf	_minAdcRead,w,c	;volatile
  2638  0013F2  A0D8               	btfss	status,0,c
  2639  0013F4  D004               	goto	l398
  2640  0013F6                     u2320:
  2641                           
  2642                           ;timing_controller.c: 112: {
  2643                           ;timing_controller.c: 113: minAdcRead = 59;
  2644  0013F6  0E00               	movlw	0
  2645  0013F8  6E38               	movwf	_minAdcRead+1,c	;volatile
  2646  0013FA  0E3B               	movlw	59
  2647  0013FC  6E37               	movwf	_minAdcRead,c	;volatile
  2648  0013FE                     l398:
  2649                           
  2650                           ;timing_controller.c: 114: }
  2651                           ;timing_controller.c: 116: if(minAdcRead < 10)
  2652  0013FE  5038               	movf	_minAdcRead+1,w,c	;volatile
  2653  001400  E123               	bnz	l3764
  2654  001402  0E0A               	movlw	10
  2655  001404  5C37               	subwf	_minAdcRead,w,c	;volatile
  2656  001406  B0D8               	btfsc	status,0,c
  2657  001408  D01F               	goto	l399
  2658                           
  2659                           ;timing_controller.c: 117: {
  2660                           ;timing_controller.c: 118: lcd_command(0xC3);
  2661  00140A  0EC3               	movlw	195
  2662  00140C  EC53  F00C         	call	_lcd_command
  2663                           
  2664                           ;timing_controller.c: 119: lcd_char('0');
  2665  001410  0E30               	movlw	48
  2666  001412  ECFC  F00B         	call	_lcd_char
  2667                           
  2668                           ;timing_controller.c: 120: lcd_command(0xC4);
  2669  001416  0EC4               	movlw	196
  2670  001418  EC53  F00C         	call	_lcd_command
  2671                           
  2672                           ;timing_controller.c: 121: char minContainer[1];
  2673                           ;timing_controller.c: 122: sprintf(minContainer, "%u", minAdcRead);
  2674  00141C  0E1A               	movlw	low TimeSetting@minContainer
  2675  00141E  0100               	movlb	0	; () banked
  2676  001420  6FDA               	movwf	sprintf@sp& (0+255),b
  2677  001422  0E01               	movlw	high TimeSetting@minContainer
  2678  001424  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  2679  001426  0E0B               	movlw	low STR_1
  2680  001428  6FDC               	movwf	sprintf@f& (0+255),b
  2681  00142A  0E10               	movlw	high STR_1
  2682  00142C  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  2683  00142E  C037  F0DE         	movff	_minAdcRead,?_sprintf+4	;volatile
  2684  001432  C038  F0DF         	movff	_minAdcRead+1,?_sprintf+5	;volatile
  2685  001436  ECDA  F00A         	call	_sprintf	;wreg free
  2686                           
  2687                           ;timing_controller.c: 123: lcd_string(minContainer);
  2688  00143A  0E1A               	movlw	low TimeSetting@minContainer
  2689  00143C  6E29               	movwf	lcd_string@x,c
  2690  00143E  0E01               	movlw	high TimeSetting@minContainer
  2691  001440  6E2A               	movwf	lcd_string@x+1,c
  2692  001442  EC48  F011         	call	_lcd_string	;wreg free
  2693                           
  2694                           ;timing_controller.c: 124: }
  2695  001446  0012               	return	
  2696  001448                     l399:
  2697  001448                     l3764:
  2698                           
  2699                           ;timing_controller.c: 125: else{
  2700                           ;timing_controller.c: 126: lcd_command(0xC3);
  2701  001448  0EC3               	movlw	195
  2702  00144A  EC53  F00C         	call	_lcd_command
  2703                           
  2704                           ;timing_controller.c: 127: char minContainer[2];
  2705                           ;timing_controller.c: 128: sprintf(minContainer, "%u", minAdcRead);
  2706  00144E  0E17               	movlw	low TimeSetting@minContainer_1233
  2707  001450  0100               	movlb	0	; () banked
  2708  001452  6FDA               	movwf	sprintf@sp& (0+255),b
  2709  001454  0E01               	movlw	high TimeSetting@minContainer_1233
  2710  001456  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  2711  001458  0E0B               	movlw	low STR_1
  2712  00145A  6FDC               	movwf	sprintf@f& (0+255),b
  2713  00145C  0E10               	movlw	high STR_1
  2714  00145E  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  2715  001460  C037  F0DE         	movff	_minAdcRead,?_sprintf+4	;volatile
  2716  001464  C038  F0DF         	movff	_minAdcRead+1,?_sprintf+5	;volatile
  2717  001468  ECDA  F00A         	call	_sprintf	;wreg free
  2718                           
  2719                           ;timing_controller.c: 129: lcd_string(minContainer);
  2720  00146C  0E17               	movlw	low TimeSetting@minContainer_1233
  2721  00146E  6E29               	movwf	lcd_string@x,c
  2722  001470  0E01               	movlw	high TimeSetting@minContainer_1233
  2723  001472  6E2A               	movwf	lcd_string@x+1,c
  2724  001474  EC48  F011         	call	_lcd_string	;wreg free
  2725  001478  0012               	return	
  2726  00147A                     __end_of_TimeSetting:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           intcon	equ	0xFF2
  2733                           postinc0	equ	0xFEE
  2734                           wreg	equ	0xFE8
  2735                           postdec1	equ	0xFE5
  2736                           plusw1	equ	0xFE3
  2737                           fsr1l	equ	0xFE1
  2738                           plusw2	equ	0xFDB
  2739                           status	equ	0xFD8
  2740                           
  2741 ;; *************** function _SpiInit *****************
  2742 ;; Defined at:
  2743 ;;		line 18 in file "spi.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		wreg, status,2
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:        0 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    3
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_main
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           	psect	text8
  2772  002426                     __ptext8:
  2773                           	opt stack 0
  2774  002426                     _SpiInit:
  2775                           	opt stack 27
  2776                           
  2777                           ;spi.c: 25: TRISC = 0x00;
  2778                           
  2779                           ;incstack = 0
  2780  002426  0E00               	movlw	0
  2781  002428  6E94               	movwf	3988,c	;volatile
  2782                           
  2783                           ;spi.c: 26: TRISCbits.TRISC5 = 0;
  2784  00242A  9A94               	bcf	3988,5,c	;volatile
  2785                           
  2786                           ;spi.c: 27: TRISCbits.TRISC4 = 1;
  2787  00242C  8894               	bsf	3988,4,c	;volatile
  2788                           
  2789                           ;spi.c: 28: TRISCbits.TRISC3 = 0;
  2790  00242E  9694               	bcf	3988,3,c	;volatile
  2791                           
  2792                           ;spi.c: 29: TRISAbits.TRISA5 = 1;
  2793  002430  8A92               	bsf	3986,5,c	;volatile
  2794                           
  2795                           ;spi.c: 33: SSPSTATbits.SMP = 1;
  2796  002432  8EC7               	bsf	4039,7,c	;volatile
  2797                           
  2798                           ;spi.c: 38: SSPSTATbits.CKE = 0;
  2799  002434  9CC7               	bcf	4039,6,c	;volatile
  2800                           
  2801                           ;spi.c: 40: SSPCON1bits.SSPEN = 1;
  2802  002436  8AC6               	bsf	4038,5,c	;volatile
  2803                           
  2804                           ;spi.c: 42: SSPCON1bits.CKP = 1;
  2805  002438  88C6               	bsf	4038,4,c	;volatile
  2806                           
  2807                           ;spi.c: 47: SSPCON1bits.SSPM3 = 0;
  2808  00243A  96C6               	bcf	4038,3,c	;volatile
  2809                           
  2810                           ;spi.c: 48: SSPCON1bits.SSPM2 = 0;
  2811  00243C  94C6               	bcf	4038,2,c	;volatile
  2812                           
  2813                           ;spi.c: 49: SSPCON1bits.SSPM1 = 1;
  2814  00243E  82C6               	bsf	4038,1,c	;volatile
  2815                           
  2816                           ;spi.c: 50: SSPCON1bits.SSPM0 = 0;
  2817  002440  90C6               	bcf	4038,0,c	;volatile
  2818  002442  0012               	return		;funcret
  2819  002444                     __end_of_SpiInit:
  2820                           	opt stack 0
  2821                           tblptru	equ	0xFF8
  2822                           tblptrh	equ	0xFF7
  2823                           tblptrl	equ	0xFF6
  2824                           tablat	equ	0xFF5
  2825                           intcon	equ	0xFF2
  2826                           postinc0	equ	0xFEE
  2827                           wreg	equ	0xFE8
  2828                           postdec1	equ	0xFE5
  2829                           plusw1	equ	0xFE3
  2830                           fsr1l	equ	0xFE1
  2831                           plusw2	equ	0xFDB
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function _ReadRTCAndDisplay *****************
  2835 ;; Defined at:
  2836 ;;		line 259 in file "timing_controller.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  bakeT           6   18[BANK0 ] unsigned char [6]
  2841 ;;  time            5   24[BANK0 ] unsigned char [5]
  2842 ;;  deliminator     2   29[BANK0 ] unsigned char [2]
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;Total ram usage:       13 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    7
  2859 ;; This function calls:
  2860 ;;		_ReadAndDisplayHrFromRTC
  2861 ;;		_ReadAndDisplayMinFromRTC
  2862 ;;		_ReadAndDisplaySecFromRTC
  2863 ;;		_lcd_char
  2864 ;;		_lcd_command
  2865 ;;		_lcd_string
  2866 ;; This function is called by:
  2867 ;;		_main
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text9
  2872  001C52                     __ptext9:
  2873                           	opt stack 0
  2874  001C52                     _ReadRTCAndDisplay:
  2875                           	opt stack 23
  2876                           
  2877                           ;timing_controller.c: 261: lcd_command(0x80);
  2878                           
  2879                           ;incstack = 0
  2880  001C52  0E80               	movlw	128
  2881  001C54  EC53  F00C         	call	_lcd_command
  2882                           
  2883                           ;timing_controller.c: 262: char time[] = "Time";
  2884  001C58  EE20  F04B         	lfsr	2,ReadRTCAndDisplay@F3194
  2885  001C5C  EE10  F0F1         	lfsr	1,ReadRTCAndDisplay@time
  2886  001C60  0E04               	movlw	4
  2887  001C62                     u2341:
  2888  001C62  CFDB FFE3          	movff	plusw2,plusw1
  2889  001C66  06E8               	decf	wreg,f,c
  2890  001C68  E2FC               	bc	u2341
  2891                           
  2892                           ;timing_controller.c: 263: lcd_string(time);
  2893  001C6A  0EF1               	movlw	low ReadRTCAndDisplay@time
  2894  001C6C  6E29               	movwf	lcd_string@x,c
  2895  001C6E  0E00               	movlw	high ReadRTCAndDisplay@time
  2896  001C70  6E2A               	movwf	lcd_string@x+1,c
  2897  001C72  EC48  F011         	call	_lcd_string	;wreg free
  2898                           
  2899                           ;timing_controller.c: 265: lcd_command(0x8B);
  2900  001C76  0E8B               	movlw	139
  2901  001C78  EC53  F00C         	call	_lcd_command
  2902                           
  2903                           ;timing_controller.c: 266: char deliminator[] = "|";
  2904  001C7C  C054  F0F6         	movff	ReadRTCAndDisplay@F3196,ReadRTCAndDisplay@deliminator
  2905  001C80  C055  F0F7         	movff	ReadRTCAndDisplay@F3196+1,ReadRTCAndDisplay@deliminator+1
  2906                           
  2907                           ;timing_controller.c: 267: lcd_string(deliminator);
  2908  001C84  0EF6               	movlw	low ReadRTCAndDisplay@deliminator
  2909  001C86  6E29               	movwf	lcd_string@x,c
  2910  001C88  0E00               	movlw	high ReadRTCAndDisplay@deliminator
  2911  001C8A  6E2A               	movwf	lcd_string@x+1,c
  2912  001C8C  EC48  F011         	call	_lcd_string	;wreg free
  2913                           
  2914                           ;timing_controller.c: 269: lcd_command(0xCB);
  2915  001C90  0ECB               	movlw	203
  2916  001C92  EC53  F00C         	call	_lcd_command
  2917                           
  2918                           ;timing_controller.c: 270: char bakeT[] = "|Bake";
  2919  001C96  EE20  F0C1         	lfsr	2,ReadRTCAndDisplay@F3198
  2920  001C9A  EE10  F0EB         	lfsr	1,ReadRTCAndDisplay@bakeT
  2921  001C9E  0E05               	movlw	5
  2922  001CA0                     u2351:
  2923  001CA0  CFDB FFE3          	movff	plusw2,plusw1
  2924  001CA4  06E8               	decf	wreg,f,c
  2925  001CA6  E2FC               	bc	u2351
  2926                           
  2927                           ;timing_controller.c: 271: lcd_string(bakeT);
  2928  001CA8  0EEB               	movlw	low ReadRTCAndDisplay@bakeT
  2929  001CAA  6E29               	movwf	lcd_string@x,c
  2930  001CAC  0E00               	movlw	high ReadRTCAndDisplay@bakeT
  2931  001CAE  6E2A               	movwf	lcd_string@x+1,c
  2932  001CB0  EC48  F011         	call	_lcd_string	;wreg free
  2933                           
  2934                           ;timing_controller.c: 274: ReadAndDisplayHrFromRTC();
  2935  001CB4  ECE2  F00D         	call	_ReadAndDisplayHrFromRTC	;wreg free
  2936                           
  2937                           ;timing_controller.c: 277: lcd_command(0xC2);
  2938  001CB8  0EC2               	movlw	194
  2939  001CBA  EC53  F00C         	call	_lcd_command
  2940                           
  2941                           ;timing_controller.c: 278: lcd_char(':');
  2942  001CBE  0E3A               	movlw	58
  2943  001CC0  ECFC  F00B         	call	_lcd_char
  2944                           
  2945                           ;timing_controller.c: 281: ReadAndDisplayMinFromRTC();
  2946  001CC4  EC52  F00D         	call	_ReadAndDisplayMinFromRTC	;wreg free
  2947                           
  2948                           ;timing_controller.c: 284: lcd_command(0xC5);
  2949  001CC8  0EC5               	movlw	197
  2950  001CCA  EC53  F00C         	call	_lcd_command
  2951                           
  2952                           ;timing_controller.c: 285: lcd_char(':');
  2953  001CCE  0E3A               	movlw	58
  2954  001CD0  ECFC  F00B         	call	_lcd_char
  2955                           
  2956                           ;timing_controller.c: 288: ReadAndDisplaySecFromRTC();
  2957  001CD4  EC9B  F00D         	call	_ReadAndDisplaySecFromRTC	;wreg free
  2958  001CD8  0012               	return		;funcret
  2959  001CDA                     __end_of_ReadRTCAndDisplay:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           intcon	equ	0xFF2
  2966                           postinc0	equ	0xFEE
  2967                           wreg	equ	0xFE8
  2968                           postdec1	equ	0xFE5
  2969                           plusw1	equ	0xFE3
  2970                           fsr1l	equ	0xFE1
  2971                           plusw2	equ	0xFDB
  2972                           status	equ	0xFD8
  2973                           
  2974 ;; *************** function _ReadAndDisplaySecFromRTC *****************
  2975 ;; Defined at:
  2976 ;;		line 232 in file "timing_controller.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  secondContai    2   14[BANK0 ] unsigned char [2]
  2981 ;;  secondContai    1   17[BANK0 ] unsigned char [1]
  2982 ;;  seconds         1   16[BANK0 ] unsigned char 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  2  425[None  ] int 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;Total ram usage:        4 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    6
  2999 ;; This function calls:
  3000 ;;		_I2C_ReadFromSlave
  3001 ;;		_bcd_to_decimal
  3002 ;;		_lcd_char
  3003 ;;		_lcd_command
  3004 ;;		_lcd_string
  3005 ;;		_sprintf
  3006 ;; This function is called by:
  3007 ;;		_ReadRTCAndDisplay
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text10
  3012  001B36                     __ptext10:
  3013                           	opt stack 0
  3014  001B36                     _ReadAndDisplaySecFromRTC:
  3015                           	opt stack 23
  3016                           
  3017                           ;timing_controller.c: 234: uint8_t seconds;
  3018                           ;timing_controller.c: 236: secondsRead = I2C_ReadFromSlave(0x00);
  3019                           
  3020                           ;incstack = 0
  3021  001B36  0E00               	movlw	0
  3022  001B38  EC7B  F011         	call	_I2C_ReadFromSlave
  3023  001B3C  6E41               	movwf	_secondsRead,c	;volatile
  3024                           
  3025                           ;timing_controller.c: 237: __nop();
  3026  001B3E  F000               	nop	
  3027                           
  3028                           ;timing_controller.c: 238: secondsRead = secondsRead & 0x7F;
  3029  001B40  5041               	movf	_secondsRead,w,c	;volatile
  3030  001B42  0B7F               	andlw	127
  3031  001B44  6E41               	movwf	_secondsRead,c	;volatile
  3032                           
  3033                           ;timing_controller.c: 239: seconds = bcd_to_decimal(secondsRead);
  3034  001B46  5041               	movf	_secondsRead,w,c	;volatile
  3035  001B48  ECBC  F011         	call	_bcd_to_decimal
  3036  001B4C  5026               	movf	?_bcd_to_decimal,w,c
  3037  001B4E  0100               	movlb	0	; () banked
  3038  001B50  6FE9               	movwf	ReadAndDisplaySecFromRTC@seconds& (0+255),b
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;timing_controller.c: 242: if(seconds < 10)
  3042  001B52  0E0A               	movlw	10
  3043  001B54  61E9               	cpfslt	ReadAndDisplaySecFromRTC@seconds& (0+255),b
  3044  001B56  D01E               	goto	l426
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;timing_controller.c: 243: {
  3048                           ;timing_controller.c: 244: lcd_command(0xC6);
  3049  001B58  0EC6               	movlw	198
  3050  001B5A  EC53  F00C         	call	_lcd_command
  3051                           
  3052                           ;timing_controller.c: 245: lcd_char('0');
  3053  001B5E  0E30               	movlw	48
  3054  001B60  ECFC  F00B         	call	_lcd_char
  3055                           
  3056                           ;timing_controller.c: 246: lcd_command(0xC7);
  3057  001B64  0EC7               	movlw	199
  3058  001B66  EC53  F00C         	call	_lcd_command
  3059                           
  3060                           ;timing_controller.c: 247: char secondContainerDisplay[1];
  3061                           ;timing_controller.c: 248: sprintf(secondContainerDisplay, "%u", seconds);
  3062  001B6A  0EEA               	movlw	low ReadAndDisplaySecFromRTC@secondContainerDisplay
  3063  001B6C  0100               	movlb	0	; () banked
  3064  001B6E  6FDA               	movwf	sprintf@sp& (0+255),b
  3065  001B70  0E00               	movlw	high ReadAndDisplaySecFromRTC@secondContainerDisplay
  3066  001B72  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3067  001B74  0E0B               	movlw	low STR_1
  3068  001B76  6FDC               	movwf	sprintf@f& (0+255),b
  3069  001B78  0E10               	movlw	high STR_1
  3070  001B7A  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3071  001B7C  C0E9  F0DE         	movff	ReadAndDisplaySecFromRTC@seconds,?_sprintf+4
  3072  001B80  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3073  001B82  ECDA  F00A         	call	_sprintf	;wreg free
  3074                           
  3075                           ;timing_controller.c: 249: lcd_string(secondContainerDisplay);
  3076  001B86  0EEA               	movlw	low ReadAndDisplaySecFromRTC@secondContainerDisplay
  3077  001B88  6E29               	movwf	lcd_string@x,c
  3078  001B8A  0E00               	movlw	high ReadAndDisplaySecFromRTC@secondContainerDisplay
  3079  001B8C  6E2A               	movwf	lcd_string@x+1,c
  3080  001B8E  EC48  F011         	call	_lcd_string	;wreg free
  3081                           
  3082                           ;timing_controller.c: 250: }
  3083  001B92  0012               	return	
  3084  001B94                     l426:
  3085                           
  3086                           ;timing_controller.c: 251: else{
  3087                           ;timing_controller.c: 252: lcd_command(0xC6);
  3088  001B94  0EC6               	movlw	198
  3089  001B96  EC53  F00C         	call	_lcd_command
  3090                           
  3091                           ;timing_controller.c: 253: char secondContainerDisplay[2];
  3092                           ;timing_controller.c: 254: sprintf(secondContainerDisplay, "%u", seconds);
  3093  001B9A  0EE7               	movlw	low ReadAndDisplaySecFromRTC@secondContainerDisplay_1263
  3094  001B9C  0100               	movlb	0	; () banked
  3095  001B9E  6FDA               	movwf	sprintf@sp& (0+255),b
  3096  001BA0  0E00               	movlw	high ReadAndDisplaySecFromRTC@secondContainerDisplay_1263
  3097  001BA2  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3098  001BA4  0E0B               	movlw	low STR_1
  3099  001BA6  6FDC               	movwf	sprintf@f& (0+255),b
  3100  001BA8  0E10               	movlw	high STR_1
  3101  001BAA  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3102  001BAC  C0E9  F0DE         	movff	ReadAndDisplaySecFromRTC@seconds,?_sprintf+4
  3103  001BB0  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3104  001BB2  ECDA  F00A         	call	_sprintf	;wreg free
  3105                           
  3106                           ;timing_controller.c: 255: lcd_string(secondContainerDisplay);
  3107  001BB6  0EE7               	movlw	low ReadAndDisplaySecFromRTC@secondContainerDisplay_1263
  3108  001BB8  6E29               	movwf	lcd_string@x,c
  3109  001BBA  0E00               	movlw	high ReadAndDisplaySecFromRTC@secondContainerDisplay_1263
  3110  001BBC  6E2A               	movwf	lcd_string@x+1,c
  3111  001BBE  EC48  F011         	call	_lcd_string	;wreg free
  3112  001BC2  0012               	return	
  3113  001BC4                     __end_of_ReadAndDisplaySecFromRTC:
  3114                           	opt stack 0
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           intcon	equ	0xFF2
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           postdec1	equ	0xFE5
  3123                           plusw1	equ	0xFE3
  3124                           fsr1l	equ	0xFE1
  3125                           plusw2	equ	0xFDB
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function _ReadAndDisplayMinFromRTC *****************
  3129 ;; Defined at:
  3130 ;;		line 179 in file "timing_controller.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  minContainer    2   14[BANK0 ] unsigned char [2]
  3135 ;;  minContainer    1   17[BANK0 ] unsigned char [1]
  3136 ;;  min             1   16[BANK0 ] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;Total ram usage:        4 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    6
  3153 ;; This function calls:
  3154 ;;		_I2C_ReadFromSlave
  3155 ;;		_bcd_to_decimal
  3156 ;;		_lcd_char
  3157 ;;		_lcd_command
  3158 ;;		_lcd_string
  3159 ;;		_sprintf
  3160 ;; This function is called by:
  3161 ;;		_ReadRTCAndDisplay
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text11
  3166  001AA4                     __ptext11:
  3167                           	opt stack 0
  3168  001AA4                     _ReadAndDisplayMinFromRTC:
  3169                           	opt stack 23
  3170                           
  3171                           ;timing_controller.c: 181: uint8_t min;
  3172                           ;timing_controller.c: 183: minRead = I2C_ReadFromSlave(0x01);
  3173                           
  3174                           ;incstack = 0
  3175  001AA4  0E01               	movlw	1
  3176  001AA6  EC7B  F011         	call	_I2C_ReadFromSlave
  3177  001AAA  6E43               	movwf	_minRead,c	;volatile
  3178                           
  3179                           ;timing_controller.c: 184: __nop();
  3180  001AAC  F000               	nop	
  3181                           
  3182                           ;timing_controller.c: 185: minRead = minRead & 0x7F;
  3183  001AAE  5043               	movf	_minRead,w,c	;volatile
  3184  001AB0  0B7F               	andlw	127
  3185  001AB2  6E43               	movwf	_minRead,c	;volatile
  3186                           
  3187                           ;timing_controller.c: 186: min = bcd_to_decimal(minRead);
  3188  001AB4  5043               	movf	_minRead,w,c	;volatile
  3189  001AB6  ECBC  F011         	call	_bcd_to_decimal
  3190  001ABA  5026               	movf	?_bcd_to_decimal,w,c
  3191  001ABC  0100               	movlb	0	; () banked
  3192  001ABE  6FE9               	movwf	ReadAndDisplayMinFromRTC@min& (0+255),b
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;timing_controller.c: 187: __nop();
  3196  001AC0  F000               	nop	
  3197                           
  3198                           ;timing_controller.c: 189: if(min < 10)
  3199  001AC2  0E0A               	movlw	10
  3200  001AC4  0100               	movlb	0	; () banked
  3201  001AC6  61E9               	cpfslt	ReadAndDisplayMinFromRTC@min& (0+255),b
  3202  001AC8  D01E               	goto	l416
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;timing_controller.c: 190: {
  3206                           ;timing_controller.c: 191: lcd_command(0xC3);
  3207  001ACA  0EC3               	movlw	195
  3208  001ACC  EC53  F00C         	call	_lcd_command
  3209                           
  3210                           ;timing_controller.c: 192: lcd_char('0');
  3211  001AD0  0E30               	movlw	48
  3212  001AD2  ECFC  F00B         	call	_lcd_char
  3213                           
  3214                           ;timing_controller.c: 193: lcd_command(0xC4);
  3215  001AD6  0EC4               	movlw	196
  3216  001AD8  EC53  F00C         	call	_lcd_command
  3217                           
  3218                           ;timing_controller.c: 194: char minContainerDisplay[1];
  3219                           ;timing_controller.c: 195: sprintf(minContainerDisplay, "%u", min);
  3220  001ADC  0EEA               	movlw	low ReadAndDisplayMinFromRTC@minContainerDisplay
  3221  001ADE  0100               	movlb	0	; () banked
  3222  001AE0  6FDA               	movwf	sprintf@sp& (0+255),b
  3223  001AE2  0E00               	movlw	high ReadAndDisplayMinFromRTC@minContainerDisplay
  3224  001AE4  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3225  001AE6  0E0B               	movlw	low STR_1
  3226  001AE8  6FDC               	movwf	sprintf@f& (0+255),b
  3227  001AEA  0E10               	movlw	high STR_1
  3228  001AEC  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3229  001AEE  C0E9  F0DE         	movff	ReadAndDisplayMinFromRTC@min,?_sprintf+4
  3230  001AF2  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3231  001AF4  ECDA  F00A         	call	_sprintf	;wreg free
  3232                           
  3233                           ;timing_controller.c: 196: lcd_string(minContainerDisplay);
  3234  001AF8  0EEA               	movlw	low ReadAndDisplayMinFromRTC@minContainerDisplay
  3235  001AFA  6E29               	movwf	lcd_string@x,c
  3236  001AFC  0E00               	movlw	high ReadAndDisplayMinFromRTC@minContainerDisplay
  3237  001AFE  6E2A               	movwf	lcd_string@x+1,c
  3238  001B00  EC48  F011         	call	_lcd_string	;wreg free
  3239                           
  3240                           ;timing_controller.c: 197: }
  3241  001B04  0012               	return	
  3242  001B06                     l416:
  3243                           
  3244                           ;timing_controller.c: 198: else{
  3245                           ;timing_controller.c: 199: lcd_command(0xC3);
  3246  001B06  0EC3               	movlw	195
  3247  001B08  EC53  F00C         	call	_lcd_command
  3248                           
  3249                           ;timing_controller.c: 200: char minContainerDisplay[2];
  3250                           ;timing_controller.c: 201: sprintf(minContainerDisplay, "%u", min);
  3251  001B0C  0EE7               	movlw	low ReadAndDisplayMinFromRTC@minContainerDisplay_1251
  3252  001B0E  0100               	movlb	0	; () banked
  3253  001B10  6FDA               	movwf	sprintf@sp& (0+255),b
  3254  001B12  0E00               	movlw	high ReadAndDisplayMinFromRTC@minContainerDisplay_1251
  3255  001B14  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3256  001B16  0E0B               	movlw	low STR_1
  3257  001B18  6FDC               	movwf	sprintf@f& (0+255),b
  3258  001B1A  0E10               	movlw	high STR_1
  3259  001B1C  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3260  001B1E  C0E9  F0DE         	movff	ReadAndDisplayMinFromRTC@min,?_sprintf+4
  3261  001B22  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3262  001B24  ECDA  F00A         	call	_sprintf	;wreg free
  3263                           
  3264                           ;timing_controller.c: 202: lcd_string(minContainerDisplay);
  3265  001B28  0EE7               	movlw	low ReadAndDisplayMinFromRTC@minContainerDisplay_1251
  3266  001B2A  6E29               	movwf	lcd_string@x,c
  3267  001B2C  0E00               	movlw	high ReadAndDisplayMinFromRTC@minContainerDisplay_1251
  3268  001B2E  6E2A               	movwf	lcd_string@x+1,c
  3269  001B30  EC48  F011         	call	_lcd_string	;wreg free
  3270  001B34  0012               	return	
  3271  001B36                     __end_of_ReadAndDisplayMinFromRTC:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           intcon	equ	0xFF2
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           postdec1	equ	0xFE5
  3281                           plusw1	equ	0xFE3
  3282                           fsr1l	equ	0xFE1
  3283                           plusw2	equ	0xFDB
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _ReadAndDisplayHrFromRTC *****************
  3287 ;; Defined at:
  3288 ;;		line 206 in file "timing_controller.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  hourContaine    2   14[BANK0 ] unsigned char [2]
  3293 ;;  hourContaine    1   17[BANK0 ] unsigned char [1]
  3294 ;;  hours           1   16[BANK0 ] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;Total ram usage:        4 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    6
  3311 ;; This function calls:
  3312 ;;		_I2C_ReadFromSlave
  3313 ;;		_bcd_to_decimal
  3314 ;;		_lcd_char
  3315 ;;		_lcd_command
  3316 ;;		_lcd_string
  3317 ;;		_sprintf
  3318 ;; This function is called by:
  3319 ;;		_ReadRTCAndDisplay
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text12
  3324  001BC4                     __ptext12:
  3325                           	opt stack 0
  3326  001BC4                     _ReadAndDisplayHrFromRTC:
  3327                           	opt stack 23
  3328                           
  3329                           ;timing_controller.c: 208: uint8_t hours;
  3330                           ;timing_controller.c: 210: hrRead = I2C_ReadFromSlave(0x02);
  3331                           
  3332                           ;incstack = 0
  3333  001BC4  0E02               	movlw	2
  3334  001BC6  EC7B  F011         	call	_I2C_ReadFromSlave
  3335  001BCA  6E42               	movwf	_hrRead,c	;volatile
  3336                           
  3337                           ;timing_controller.c: 211: __nop();
  3338  001BCC  F000               	nop	
  3339                           
  3340                           ;timing_controller.c: 212: hrRead = hrRead & 0x1F;
  3341  001BCE  5042               	movf	_hrRead,w,c	;volatile
  3342  001BD0  0B1F               	andlw	31
  3343  001BD2  6E42               	movwf	_hrRead,c	;volatile
  3344                           
  3345                           ;timing_controller.c: 213: hours = bcd_to_decimal(hrRead);
  3346  001BD4  5042               	movf	_hrRead,w,c	;volatile
  3347  001BD6  ECBC  F011         	call	_bcd_to_decimal
  3348  001BDA  5026               	movf	?_bcd_to_decimal,w,c
  3349  001BDC  0100               	movlb	0	; () banked
  3350  001BDE  6FE9               	movwf	ReadAndDisplayHrFromRTC@hours& (0+255),b
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;timing_controller.c: 215: if(hours < 10)
  3354  001BE0  0E0A               	movlw	10
  3355  001BE2  61E9               	cpfslt	ReadAndDisplayHrFromRTC@hours& (0+255),b
  3356  001BE4  D01E               	goto	l421
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;timing_controller.c: 216: {
  3360                           ;timing_controller.c: 217: lcd_command(0xC0);
  3361  001BE6  0EC0               	movlw	192
  3362  001BE8  EC53  F00C         	call	_lcd_command
  3363                           
  3364                           ;timing_controller.c: 218: lcd_char('0');
  3365  001BEC  0E30               	movlw	48
  3366  001BEE  ECFC  F00B         	call	_lcd_char
  3367                           
  3368                           ;timing_controller.c: 219: lcd_command(0xC1);
  3369  001BF2  0EC1               	movlw	193
  3370  001BF4  EC53  F00C         	call	_lcd_command
  3371                           
  3372                           ;timing_controller.c: 220: char hourContainerDisplay[1];
  3373                           ;timing_controller.c: 221: sprintf(hourContainerDisplay, "%u", hours);
  3374  001BF8  0EEA               	movlw	low ReadAndDisplayHrFromRTC@hourContainerDisplay
  3375  001BFA  0100               	movlb	0	; () banked
  3376  001BFC  6FDA               	movwf	sprintf@sp& (0+255),b
  3377  001BFE  0E00               	movlw	high ReadAndDisplayHrFromRTC@hourContainerDisplay
  3378  001C00  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3379  001C02  0E0B               	movlw	low STR_1
  3380  001C04  6FDC               	movwf	sprintf@f& (0+255),b
  3381  001C06  0E10               	movlw	high STR_1
  3382  001C08  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3383  001C0A  C0E9  F0DE         	movff	ReadAndDisplayHrFromRTC@hours,?_sprintf+4
  3384  001C0E  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3385  001C10  ECDA  F00A         	call	_sprintf	;wreg free
  3386                           
  3387                           ;timing_controller.c: 222: lcd_string(hourContainerDisplay);
  3388  001C14  0EEA               	movlw	low ReadAndDisplayHrFromRTC@hourContainerDisplay
  3389  001C16  6E29               	movwf	lcd_string@x,c
  3390  001C18  0E00               	movlw	high ReadAndDisplayHrFromRTC@hourContainerDisplay
  3391  001C1A  6E2A               	movwf	lcd_string@x+1,c
  3392  001C1C  EC48  F011         	call	_lcd_string	;wreg free
  3393                           
  3394                           ;timing_controller.c: 223: }
  3395  001C20  0012               	return	
  3396  001C22                     l421:
  3397                           
  3398                           ;timing_controller.c: 224: else{
  3399                           ;timing_controller.c: 225: lcd_command(0xC0);
  3400  001C22  0EC0               	movlw	192
  3401  001C24  EC53  F00C         	call	_lcd_command
  3402                           
  3403                           ;timing_controller.c: 226: char hourContainerDisplay[2];
  3404                           ;timing_controller.c: 227: sprintf(hourContainerDisplay, "%u", hours);
  3405  001C28  0EE7               	movlw	low ReadAndDisplayHrFromRTC@hourContainerDisplay_1257
  3406  001C2A  0100               	movlb	0	; () banked
  3407  001C2C  6FDA               	movwf	sprintf@sp& (0+255),b
  3408  001C2E  0E00               	movlw	high ReadAndDisplayHrFromRTC@hourContainerDisplay_1257
  3409  001C30  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3410  001C32  0E0B               	movlw	low STR_1
  3411  001C34  6FDC               	movwf	sprintf@f& (0+255),b
  3412  001C36  0E10               	movlw	high STR_1
  3413  001C38  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3414  001C3A  C0E9  F0DE         	movff	ReadAndDisplayHrFromRTC@hours,?_sprintf+4
  3415  001C3E  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3416  001C40  ECDA  F00A         	call	_sprintf	;wreg free
  3417                           
  3418                           ;timing_controller.c: 228: lcd_string(hourContainerDisplay);
  3419  001C44  0EE7               	movlw	low ReadAndDisplayHrFromRTC@hourContainerDisplay_1257
  3420  001C46  6E29               	movwf	lcd_string@x,c
  3421  001C48  0E00               	movlw	high ReadAndDisplayHrFromRTC@hourContainerDisplay_1257
  3422  001C4A  6E2A               	movwf	lcd_string@x+1,c
  3423  001C4C  EC48  F011         	call	_lcd_string	;wreg free
  3424  001C50  0012               	return	
  3425  001C52                     __end_of_ReadAndDisplayHrFromRTC:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           intcon	equ	0xFF2
  3432                           postinc0	equ	0xFEE
  3433                           wreg	equ	0xFE8
  3434                           postdec1	equ	0xFE5
  3435                           plusw1	equ	0xFE3
  3436                           fsr1l	equ	0xFE1
  3437                           plusw2	equ	0xFDB
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function _bcd_to_decimal *****************
  3441 ;; Defined at:
  3442 ;;		line 175 in file "timing_controller.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  x               1    wreg     unsigned char 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  x               1   40[COMRAM] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  2   37[COMRAM] int 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0, prodl, prodh
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;Total ram usage:        4 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    3
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_ReadAndDisplayMinFromRTC
  3467 ;;		_ReadAndDisplayHrFromRTC
  3468 ;;		_ReadAndDisplaySecFromRTC
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           	psect	text13
  3473  002378                     __ptext13:
  3474                           	opt stack 0
  3475  002378                     _bcd_to_decimal:
  3476                           	opt stack 25
  3477                           
  3478                           ;incstack = 0
  3479                           ;bcd_to_decimal@x stored from wreg
  3480  002378  6E29               	movwf	bcd_to_decimal@x,c
  3481                           
  3482                           ;timing_controller.c: 176: return x - 6 * (x >> 4);
  3483  00237A  C029  F028         	movff	bcd_to_decimal@x,??_bcd_to_decimal
  3484  00237E  3A28               	swapf	??_bcd_to_decimal,f,c
  3485  002380  0E0F               	movlw	15
  3486  002382  1628               	andwf	??_bcd_to_decimal,f,c
  3487  002384  5028               	movf	??_bcd_to_decimal,w,c
  3488  002386  0D06               	mullw	6
  3489  002388  1EF3               	comf	prodl,f,c
  3490  00238A  1EF4               	comf	prodh,f,c
  3491  00238C  4AF3               	infsnz	prodl,f,c
  3492  00238E  2AF4               	incf	prodh,f,c
  3493  002390  5029               	movf	bcd_to_decimal@x,w,c
  3494  002392  24F3               	addwf	prodl,w,c
  3495  002394  6E26               	movwf	?_bcd_to_decimal,c
  3496  002396  0E00               	movlw	0
  3497  002398  20F4               	addwfc	prodh,w,c
  3498  00239A  6E27               	movwf	?_bcd_to_decimal+1,c
  3499  00239C  0012               	return	
  3500  00239E                     __end_of_bcd_to_decimal:
  3501                           	opt stack 0
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           intcon	equ	0xFF2
  3509                           postinc0	equ	0xFEE
  3510                           wreg	equ	0xFE8
  3511                           postdec1	equ	0xFE5
  3512                           plusw1	equ	0xFE3
  3513                           fsr1l	equ	0xFE1
  3514                           plusw2	equ	0xFDB
  3515                           status	equ	0xFD8
  3516                           
  3517 ;; *************** function _IfButtonPressedMovedToNextState *****************
  3518 ;; Defined at:
  3519 ;;		line 278 in file "main.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  nextState       1    wreg     unsigned char 
  3522 ;;  currentState    1   37[COMRAM] unsigned char 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  nextState       1   39[COMRAM] unsigned char 
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3534 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;Total ram usage:        3 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    3
  3541 ;; This function calls:
  3542 ;;		Nothing
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text14
  3549  002406                     __ptext14:
  3550                           	opt stack 0
  3551  002406                     _IfButtonPressedMovedToNextState:
  3552                           	opt stack 27
  3553                           
  3554                           ;incstack = 0
  3555                           ;IfButtonPressedMovedToNextState@nextState stored from wreg
  3556  002406  6E28               	movwf	IfButtonPressedMovedToNextState@nextState,c
  3557                           
  3558                           ;main.c: 280: _delay((unsigned long)((80)*(8000000/4000.0)));
  3559  002408  0ED0               	movlw	208
  3560  00240A  6E27               	movwf	??_IfButtonPressedMovedToNextState& (0+255),c
  3561  00240C  0ECA               	movlw	202
  3562  00240E                     u2637:
  3563  00240E  2EE8               	decfsz	wreg,f,c
  3564  002410  D7FE               	bra	u2637
  3565  002412  2E27               	decfsz	??_IfButtonPressedMovedToNextState& (0+255),f,c
  3566  002414  D7FC               	bra	u2637
  3567                           
  3568                           ;main.c: 281: if(PORTDbits.RD2 == 1)
  3569  002416  A483               	btfss	3971,2,c	;volatile
  3570  002418  D003               	goto	l148
  3571                           
  3572                           ;main.c: 282: {
  3573                           ;main.c: 283: LCD_STATES = nextState;
  3574  00241A  C028  F1C6         	movff	IfButtonPressedMovedToNextState@nextState,_LCD_STATES
  3575                           
  3576                           ;main.c: 284: }
  3577  00241E  0012               	return	
  3578  002420                     l148:
  3579                           
  3580                           ;main.c: 285: else{
  3581                           ;main.c: 286: LCD_STATES = currentState;
  3582  002420  C026  F1C6         	movff	IfButtonPressedMovedToNextState@currentState,_LCD_STATES
  3583  002424  0012               	return	
  3584  002426                     __end_of_IfButtonPressedMovedToNextState:
  3585                           	opt stack 0
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           postinc0	equ	0xFEE
  3594                           wreg	equ	0xFE8
  3595                           postdec1	equ	0xFE5
  3596                           plusw1	equ	0xFE3
  3597                           fsr1l	equ	0xFE1
  3598                           plusw2	equ	0xFDB
  3599                           status	equ	0xFD8
  3600                           
  3601 ;; *************** function _GenerateAmplitude *****************
  3602 ;; Defined at:
  3603 ;;		line 290 in file "main.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  readAmplitud    2   37[COMRAM] unsigned int 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      void 
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3617 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;Total ram usage:        2 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; Hardware stack levels required when called:    3
  3624 ;; This function calls:
  3625 ;;		Nothing
  3626 ;; This function is called by:
  3627 ;;		_main
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           	psect	text15
  3632  001954                     __ptext15:
  3633                           	opt stack 0
  3634  001954                     _GenerateAmplitude:
  3635                           	opt stack 27
  3636                           
  3637                           ;main.c: 292: if(readAmplitude >= 100 && readAmplitude < 150)
  3638                           
  3639                           ;incstack = 0
  3640  001954  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3641  001956  E104               	bnz	u1490
  3642  001958  0E64               	movlw	100
  3643  00195A  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3644  00195C  A0D8               	btfss	status,0,c
  3645  00195E  D00B               	goto	l153
  3646  001960                     u1490:
  3647  001960  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3648  001962  E109               	bnz	l2860
  3649  001964  0E96               	movlw	150
  3650  001966  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3651  001968  B0D8               	btfsc	status,0,c
  3652  00196A  D005               	goto	l153
  3653                           
  3654                           ;main.c: 293: {
  3655                           ;main.c: 294: amplitudeDivision = 5;
  3656  00196C  0E00               	movlw	0
  3657  00196E  6E3C               	movwf	_amplitudeDivision+1,c
  3658  001970  0E05               	movlw	5
  3659  001972  6E3B               	movwf	_amplitudeDivision,c
  3660                           
  3661                           ;main.c: 295: }
  3662  001974  0012               	return	
  3663  001976                     l153:
  3664  001976                     l2860:
  3665                           
  3666                           ;main.c: 296: else if(readAmplitude > 150 && readAmplitude < 200)
  3667  001976  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3668  001978  E104               	bnz	u1510
  3669  00197A  0E97               	movlw	151
  3670  00197C  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3671  00197E  A0D8               	btfss	status,0,c
  3672  001980  D00B               	goto	l155
  3673  001982                     u1510:
  3674  001982  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3675  001984  E109               	bnz	l2866
  3676  001986  0EC8               	movlw	200
  3677  001988  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3678  00198A  B0D8               	btfsc	status,0,c
  3679  00198C  D005               	goto	l155
  3680                           
  3681                           ;main.c: 297: {
  3682                           ;main.c: 298: amplitudeDivision = 4;
  3683  00198E  0E00               	movlw	0
  3684  001990  6E3C               	movwf	_amplitudeDivision+1,c
  3685  001992  0E04               	movlw	4
  3686  001994  6E3B               	movwf	_amplitudeDivision,c
  3687                           
  3688                           ;main.c: 299: }
  3689  001996  0012               	return	
  3690  001998                     l155:
  3691  001998                     l2866:
  3692                           
  3693                           ;main.c: 300: else if(readAmplitude > 200 && readAmplitude < 250)
  3694  001998  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3695  00199A  E104               	bnz	u1530
  3696  00199C  0EC9               	movlw	201
  3697  00199E  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3698  0019A0  A0D8               	btfss	status,0,c
  3699  0019A2  D00B               	goto	l157
  3700  0019A4                     u1530:
  3701  0019A4  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3702  0019A6  E109               	bnz	l2872
  3703  0019A8  0EFA               	movlw	250
  3704  0019AA  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3705  0019AC  B0D8               	btfsc	status,0,c
  3706  0019AE  D005               	goto	l157
  3707                           
  3708                           ;main.c: 301: {
  3709                           ;main.c: 302: amplitudeDivision = 3;
  3710  0019B0  0E00               	movlw	0
  3711  0019B2  6E3C               	movwf	_amplitudeDivision+1,c
  3712  0019B4  0E03               	movlw	3
  3713  0019B6  6E3B               	movwf	_amplitudeDivision,c
  3714                           
  3715                           ;main.c: 303: }
  3716  0019B8  0012               	return	
  3717  0019BA                     l157:
  3718  0019BA                     l2872:
  3719                           
  3720                           ;main.c: 304: else if(readAmplitude > 250 && readAmplitude < 300)
  3721  0019BA  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3722  0019BC  E104               	bnz	u1550
  3723  0019BE  0EFB               	movlw	251
  3724  0019C0  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3725  0019C2  A0D8               	btfss	status,0,c
  3726  0019C4  D00B               	goto	l159
  3727  0019C6                     u1550:
  3728  0019C6  0E2C               	movlw	44
  3729  0019C8  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3730  0019CA  0E01               	movlw	1
  3731  0019CC  5827               	subwfb	GenerateAmplitude@readAmplitude+1,w,c
  3732  0019CE  B0D8               	btfsc	status,0,c
  3733  0019D0  D005               	goto	l159
  3734                           
  3735                           ;main.c: 305: {
  3736                           ;main.c: 306: amplitudeDivision = 2;
  3737  0019D2  0E00               	movlw	0
  3738  0019D4  6E3C               	movwf	_amplitudeDivision+1,c
  3739  0019D6  0E02               	movlw	2
  3740  0019D8  6E3B               	movwf	_amplitudeDivision,c
  3741                           
  3742                           ;main.c: 307: }
  3743  0019DA  0012               	return	
  3744  0019DC                     l159:
  3745                           
  3746                           ;main.c: 308: else if(readAmplitude > 300 && readAmplitude < 370)
  3747  0019DC  0E2D               	movlw	45
  3748  0019DE  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3749  0019E0  0E01               	movlw	1
  3750  0019E2  5827               	subwfb	GenerateAmplitude@readAmplitude+1,w,c
  3751  0019E4  A0D8               	btfss	status,0,c
  3752  0019E6  0012               	return	
  3753  0019E8  0E72               	movlw	114
  3754  0019EA  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3755  0019EC  0E01               	movlw	1
  3756  0019EE  5827               	subwfb	GenerateAmplitude@readAmplitude+1,w,c
  3757  0019F0  B0D8               	btfsc	status,0,c
  3758  0019F2  0012               	return	
  3759                           
  3760                           ;main.c: 309: {
  3761                           ;main.c: 310: amplitudeDivision = 1;
  3762  0019F4  0E00               	movlw	0
  3763  0019F6  6E3C               	movwf	_amplitudeDivision+1,c
  3764  0019F8  0E01               	movlw	1
  3765  0019FA  6E3B               	movwf	_amplitudeDivision,c
  3766  0019FC  0012               	return	
  3767  0019FE                     __end_of_GenerateAmplitude:
  3768                           	opt stack 0
  3769                           tblptru	equ	0xFF8
  3770                           tblptrh	equ	0xFF7
  3771                           tblptrl	equ	0xFF6
  3772                           tablat	equ	0xFF5
  3773                           prodh	equ	0xFF4
  3774                           prodl	equ	0xFF3
  3775                           intcon	equ	0xFF2
  3776                           postinc0	equ	0xFEE
  3777                           wreg	equ	0xFE8
  3778                           postdec1	equ	0xFE5
  3779                           plusw1	equ	0xFE3
  3780                           fsr1l	equ	0xFE1
  3781                           plusw2	equ	0xFDB
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _GPIOInit *****************
  3785 ;; Defined at:
  3786 ;;		line 20 in file "gpio.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;		None
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;		None
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		None
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3804 ;;Total ram usage:        0 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; Hardware stack levels required when called:    3
  3807 ;; This function calls:
  3808 ;;		Nothing
  3809 ;; This function is called by:
  3810 ;;		_main
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           	psect	text16
  3815  0024E6                     __ptext16:
  3816                           	opt stack 0
  3817  0024E6                     _GPIOInit:
  3818                           	opt stack 27
  3819                           
  3820                           ;gpio.c: 23: TRISDbits.TRISD2 = 1;
  3821                           
  3822                           ;incstack = 0
  3823  0024E6  8495               	bsf	3989,2,c	;volatile
  3824                           
  3825                           ;gpio.c: 26: TRISDbits.TRISD3 = 1;
  3826  0024E8  8695               	bsf	3989,3,c	;volatile
  3827                           
  3828                           ;gpio.c: 29: TRISDbits.TRISD0 = 1;
  3829  0024EA  8095               	bsf	3989,0,c	;volatile
  3830                           
  3831                           ;gpio.c: 32: TRISDbits.TRISD1 = 0;
  3832  0024EC  9295               	bcf	3989,1,c	;volatile
  3833  0024EE  0012               	return		;funcret
  3834  0024F0                     __end_of_GPIOInit:
  3835                           	opt stack 0
  3836                           tblptru	equ	0xFF8
  3837                           tblptrh	equ	0xFF7
  3838                           tblptrl	equ	0xFF6
  3839                           tablat	equ	0xFF5
  3840                           prodh	equ	0xFF4
  3841                           prodl	equ	0xFF3
  3842                           intcon	equ	0xFF2
  3843                           postinc0	equ	0xFEE
  3844                           wreg	equ	0xFE8
  3845                           postdec1	equ	0xFE5
  3846                           plusw1	equ	0xFE3
  3847                           fsr1l	equ	0xFE1
  3848                           plusw2	equ	0xFDB
  3849                           status	equ	0xFD8
  3850                           
  3851 ;; *************** function _CookTimeSet *****************
  3852 ;; Defined at:
  3853 ;;		line 97 in file "cooktime_controller.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;		None
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  convertedCoo    1    1[BANK0 ] unsigned char 
  3858 ;;  currentMin      1    0[BANK0 ] unsigned char 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;Total ram usage:        2 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    6
  3875 ;; This function calls:
  3876 ;;		_I2C_ReadFromSlave
  3877 ;;		_IntToBcd_cook_time
  3878 ;;		_bcd_to_decimal_cook_time
  3879 ;; This function is called by:
  3880 ;;		_main
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           	psect	text17
  3885  0021A8                     __ptext17:
  3886                           	opt stack 0
  3887  0021A8                     _CookTimeSet:
  3888                           	opt stack 24
  3889                           
  3890                           ;cooktime_controller.c: 100: uint8_t currentMin;
  3891                           ;cooktime_controller.c: 101: currentMinFromRTC = I2C_ReadFromSlave(0x01);
  3892                           
  3893                           ;incstack = 0
  3894  0021A8  0E01               	movlw	1
  3895  0021AA  EC7B  F011         	call	_I2C_ReadFromSlave
  3896  0021AE  6E3F               	movwf	_currentMinFromRTC,c	;volatile
  3897                           
  3898                           ;cooktime_controller.c: 102: currentMinFromRTC = currentMinFromRTC & 0x7F;
  3899  0021B0  503F               	movf	_currentMinFromRTC,w,c	;volatile
  3900  0021B2  0B7F               	andlw	127
  3901  0021B4  6E3F               	movwf	_currentMinFromRTC,c	;volatile
  3902                           
  3903                           ;cooktime_controller.c: 103: currentMin = bcd_to_decimal_cook_time(currentMinFromRTC);
  3904  0021B6  503F               	movf	_currentMinFromRTC,w,c	;volatile
  3905  0021B8  ECCF  F011         	call	_bcd_to_decimal_cook_time
  3906  0021BC  5026               	movf	?_bcd_to_decimal_cook_time,w,c
  3907  0021BE  0100               	movlb	0	; () banked
  3908  0021C0  6FD9               	movwf	CookTimeSet@currentMin& (0+255),b
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;cooktime_controller.c: 106: setCookTimeMin = (uint8_t)cookTimeAdcRead;
  3912  0021C2  C031  F040         	movff	_cookTimeAdcRead,_setCookTimeMin	;volatile
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;cooktime_controller.c: 107: setCookTimeMin = setCookTimeMin + currentMin;
  3916  0021C6  5040               	movf	_setCookTimeMin,w,c	;volatile
  3917  0021C8  25D9               	addwf	CookTimeSet@currentMin& (0+255),w,b
  3918  0021CA  6E40               	movwf	_setCookTimeMin,c	;volatile
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;cooktime_controller.c: 110: if(setCookTimeMin > 59)
  3922  0021CC  0E3B               	movlw	59
  3923  0021CE  6440               	cpfsgt	_setCookTimeMin,c	;volatile
  3924  0021D0  D002               	goto	l504
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;cooktime_controller.c: 111: {
  3928                           ;cooktime_controller.c: 112: setCookTimeMin = (uint8_t)cookTimeAdcRead - (uint8_t)1;
  3929  0021D2  0431               	decf	_cookTimeAdcRead,w,c	;volatile
  3930  0021D4  6E40               	movwf	_setCookTimeMin,c	;volatile
  3931  0021D6                     l504:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;cooktime_controller.c: 113: }
  3935                           ;cooktime_controller.c: 116: uint8_t convertedCookMinutesToBCD = IntToBcd_cook_time(setC
      +                          ookTimeMin);
  3936                           
  3937                           ; BSR set to: 0
  3938  0021D6  5040               	movf	_setCookTimeMin,w,c	;volatile
  3939  0021D8  EC2D  F011         	call	_IntToBcd_cook_time
  3940  0021DC  0100               	movlb	0	; () banked
  3941  0021DE  6FDA               	movwf	CookTimeSet@convertedCookMinutesToBCD& (0+255),b
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;cooktime_controller.c: 117: setCookTimeMin = convertedCookMinutesToBCD;
  3945  0021E0  C0DA  F040         	movff	CookTimeSet@convertedCookMinutesToBCD,_setCookTimeMin	;volatile
  3946                           
  3947                           ; BSR set to: 0
  3948  0021E4  0012               	return		;funcret
  3949  0021E6                     __end_of_CookTimeSet:
  3950                           	opt stack 0
  3951                           tblptru	equ	0xFF8
  3952                           tblptrh	equ	0xFF7
  3953                           tblptrl	equ	0xFF6
  3954                           tablat	equ	0xFF5
  3955                           prodh	equ	0xFF4
  3956                           prodl	equ	0xFF3
  3957                           intcon	equ	0xFF2
  3958                           postinc0	equ	0xFEE
  3959                           wreg	equ	0xFE8
  3960                           postdec1	equ	0xFE5
  3961                           plusw1	equ	0xFE3
  3962                           fsr1l	equ	0xFE1
  3963                           plusw2	equ	0xFDB
  3964                           status	equ	0xFD8
  3965                           
  3966 ;; *************** function _bcd_to_decimal_cook_time *****************
  3967 ;; Defined at:
  3968 ;;		line 93 in file "cooktime_controller.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  x               1    wreg     unsigned char 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  x               1   40[COMRAM] unsigned char 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  2   37[COMRAM] int 
  3975 ;; Registers used:
  3976 ;;		wreg, status,2, status,0, prodl, prodh
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;Total ram usage:        4 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    3
  3989 ;; This function calls:
  3990 ;;		Nothing
  3991 ;; This function is called by:
  3992 ;;		_CookTimeSet
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text18
  3997  00239E                     __ptext18:
  3998                           	opt stack 0
  3999  00239E                     _bcd_to_decimal_cook_time:
  4000                           	opt stack 26
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;incstack = 0
  4004                           ;bcd_to_decimal_cook_time@x stored from wreg
  4005  00239E  6E29               	movwf	bcd_to_decimal_cook_time@x,c
  4006                           
  4007                           ;cooktime_controller.c: 94: return x - 6 * (x >> 4);
  4008  0023A0  C029  F028         	movff	bcd_to_decimal_cook_time@x,??_bcd_to_decimal_cook_time
  4009  0023A4  3A28               	swapf	??_bcd_to_decimal_cook_time,f,c
  4010  0023A6  0E0F               	movlw	15
  4011  0023A8  1628               	andwf	??_bcd_to_decimal_cook_time,f,c
  4012  0023AA  5028               	movf	??_bcd_to_decimal_cook_time,w,c
  4013  0023AC  0D06               	mullw	6
  4014  0023AE  1EF3               	comf	prodl,f,c
  4015  0023B0  1EF4               	comf	prodh,f,c
  4016  0023B2  4AF3               	infsnz	prodl,f,c
  4017  0023B4  2AF4               	incf	prodh,f,c
  4018  0023B6  5029               	movf	bcd_to_decimal_cook_time@x,w,c
  4019  0023B8  24F3               	addwf	prodl,w,c
  4020  0023BA  6E26               	movwf	?_bcd_to_decimal_cook_time,c
  4021  0023BC  0E00               	movlw	0
  4022  0023BE  20F4               	addwfc	prodh,w,c
  4023  0023C0  6E27               	movwf	?_bcd_to_decimal_cook_time+1,c
  4024  0023C2  0012               	return	
  4025  0023C4                     __end_of_bcd_to_decimal_cook_time:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           intcon	equ	0xFF2
  4034                           postinc0	equ	0xFEE
  4035                           wreg	equ	0xFE8
  4036                           postdec1	equ	0xFE5
  4037                           plusw1	equ	0xFE3
  4038                           fsr1l	equ	0xFE1
  4039                           plusw2	equ	0xFDB
  4040                           status	equ	0xFD8
  4041                           
  4042 ;; *************** function _IntToBcd_cook_time *****************
  4043 ;; Defined at:
  4044 ;;		line 88 in file "cooktime_controller.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  x               1    wreg     unsigned char 
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  x               1   47[COMRAM] unsigned char 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      unsigned char 
  4051 ;; Registers used:
  4052 ;;		wreg, status,2, status,0, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;Total ram usage:        3 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    4
  4065 ;; This function calls:
  4066 ;;		___awdiv
  4067 ;;		___awmod
  4068 ;; This function is called by:
  4069 ;;		_CookTimeSet
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text19
  4074  00225A                     __ptext19:
  4075                           	opt stack 0
  4076  00225A                     _IntToBcd_cook_time:
  4077                           	opt stack 25
  4078                           
  4079                           ;incstack = 0
  4080                           ;IntToBcd_cook_time@x stored from wreg
  4081  00225A  6E30               	movwf	IntToBcd_cook_time@x,c
  4082                           
  4083                           ;cooktime_controller.c: 90: return ((x / 10) << 4) | (x % 10);
  4084  00225C  C030  F026         	movff	IntToBcd_cook_time@x,___awmod@dividend
  4085  002260  6A27               	clrf	___awmod@dividend+1,c
  4086  002262  0E00               	movlw	0
  4087  002264  6E29               	movwf	___awmod@divisor+1,c
  4088  002266  0E0A               	movlw	10
  4089  002268  6E28               	movwf	___awmod@divisor,c
  4090  00226A  ECB5  F00F         	call	___awmod	;wreg free
  4091  00226E  C026  F02E         	movff	?___awmod,??_IntToBcd_cook_time
  4092  002272  C027  F02F         	movff	?___awmod+1,??_IntToBcd_cook_time+1
  4093  002276  C030  F026         	movff	IntToBcd_cook_time@x,___awdiv@dividend
  4094  00227A  6A27               	clrf	___awdiv@dividend+1,c
  4095  00227C  0E00               	movlw	0
  4096  00227E  6E29               	movwf	___awdiv@divisor+1,c
  4097  002280  0E0A               	movlw	10
  4098  002282  6E28               	movwf	___awdiv@divisor,c
  4099  002284  ECF1  F00E         	call	___awdiv	;wreg free
  4100  002288  3826               	swapf	?___awdiv,w,c
  4101  00228A  0BF0               	andlw	240
  4102  00228C  102E               	iorwf	??_IntToBcd_cook_time,w,c
  4103  00228E  0012               	return	
  4104  002290                     __end_of_IntToBcd_cook_time:
  4105                           	opt stack 0
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           intcon	equ	0xFF2
  4113                           postinc0	equ	0xFEE
  4114                           wreg	equ	0xFE8
  4115                           postdec1	equ	0xFE5
  4116                           plusw1	equ	0xFE3
  4117                           fsr1l	equ	0xFE1
  4118                           plusw2	equ	0xFDB
  4119                           status	equ	0xFD8
  4120                           
  4121 ;; *************** function ___awmod *****************
  4122 ;; Defined at:
  4123 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;  dividend        2   37[COMRAM] int 
  4126 ;;  divisor         2   39[COMRAM] int 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  sign            1   42[COMRAM] unsigned char 
  4129 ;;  counter         1   41[COMRAM] unsigned char 
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  2   37[COMRAM] int 
  4132 ;; Registers used:
  4133 ;;		wreg, status,2, status,0
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;Total ram usage:        6 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    3
  4146 ;; This function calls:
  4147 ;;		Nothing
  4148 ;; This function is called by:
  4149 ;;		_IntToBcd
  4150 ;;		_IntToBcd_cook_time
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           	psect	text20
  4155  001F6A                     __ptext20:
  4156                           	opt stack 0
  4157  001F6A                     ___awmod:
  4158                           	opt stack 25
  4159                           
  4160                           ;incstack = 0
  4161  001F6A  0E00               	movlw	0
  4162  001F6C  6E2B               	movwf	___awmod@sign,c
  4163  001F6E  AE27               	btfss	___awmod@dividend+1,7,c
  4164  001F70  D006               	goto	l711
  4165  001F72  6C26               	negf	___awmod@dividend,c
  4166  001F74  1E27               	comf	___awmod@dividend+1,f,c
  4167  001F76  B0D8               	btfsc	status,0,c
  4168  001F78  2A27               	incf	___awmod@dividend+1,f,c
  4169  001F7A  0E01               	movlw	1
  4170  001F7C  6E2B               	movwf	___awmod@sign,c
  4171  001F7E                     l711:
  4172  001F7E  AE29               	btfss	___awmod@divisor+1,7,c
  4173  001F80  D004               	goto	l712
  4174  001F82  6C28               	negf	___awmod@divisor,c
  4175  001F84  1E29               	comf	___awmod@divisor+1,f,c
  4176  001F86  B0D8               	btfsc	status,0,c
  4177  001F88  2A29               	incf	___awmod@divisor+1,f,c
  4178  001F8A                     l712:
  4179  001F8A  5028               	movf	___awmod@divisor,w,c
  4180  001F8C  1029               	iorwf	___awmod@divisor+1,w,c
  4181  001F8E  B4D8               	btfsc	status,2,c
  4182  001F90  D018               	goto	l719
  4183  001F92  0E01               	movlw	1
  4184  001F94  6E2A               	movwf	___awmod@counter,c
  4185  001F96  D004               	goto	l714
  4186  001F98  90D8               	bcf	status,0,c
  4187  001F9A  3628               	rlcf	___awmod@divisor,f,c
  4188  001F9C  3629               	rlcf	___awmod@divisor+1,f,c
  4189  001F9E  2A2A               	incf	___awmod@counter,f,c
  4190  001FA0                     l714:
  4191  001FA0  AE29               	btfss	___awmod@divisor+1,7,c
  4192  001FA2  D7FA               	goto	l715
  4193  001FA4                     u2120:
  4194  001FA4  5028               	movf	___awmod@divisor,w,c
  4195  001FA6  5C26               	subwf	___awmod@dividend,w,c
  4196  001FA8  5029               	movf	___awmod@divisor+1,w,c
  4197  001FAA  5827               	subwfb	___awmod@dividend+1,w,c
  4198  001FAC  A0D8               	btfss	status,0,c
  4199  001FAE  D004               	goto	l718
  4200  001FB0  5028               	movf	___awmod@divisor,w,c
  4201  001FB2  5E26               	subwf	___awmod@dividend,f,c
  4202  001FB4  5029               	movf	___awmod@divisor+1,w,c
  4203  001FB6  5A27               	subwfb	___awmod@dividend+1,f,c
  4204  001FB8                     l718:
  4205  001FB8  90D8               	bcf	status,0,c
  4206  001FBA  3229               	rrcf	___awmod@divisor+1,f,c
  4207  001FBC  3228               	rrcf	___awmod@divisor,f,c
  4208  001FBE  2E2A               	decfsz	___awmod@counter,f,c
  4209  001FC0  D7F1               	goto	u2120
  4210  001FC2                     l719:
  4211  001FC2  502B               	movf	___awmod@sign,w,c
  4212  001FC4  B4D8               	btfsc	status,2,c
  4213  001FC6  D004               	goto	l720
  4214  001FC8  6C26               	negf	___awmod@dividend,c
  4215  001FCA  1E27               	comf	___awmod@dividend+1,f,c
  4216  001FCC  B0D8               	btfsc	status,0,c
  4217  001FCE  2A27               	incf	___awmod@dividend+1,f,c
  4218  001FD0                     l720:
  4219  001FD0  C026  F026         	movff	___awmod@dividend,?___awmod
  4220  001FD4  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  4221  001FD8  0012               	return	
  4222  001FDA                     __end_of___awmod:
  4223                           	opt stack 0
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           prodh	equ	0xFF4
  4229                           prodl	equ	0xFF3
  4230                           intcon	equ	0xFF2
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           postdec1	equ	0xFE5
  4234                           plusw1	equ	0xFE3
  4235                           fsr1l	equ	0xFE1
  4236                           plusw2	equ	0xFDB
  4237                           status	equ	0xFD8
  4238                           
  4239 ;; *************** function ___awdiv *****************
  4240 ;; Defined at:
  4241 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  dividend        2   37[COMRAM] int 
  4244 ;;  divisor         2   39[COMRAM] int 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  quotient        2   43[COMRAM] int 
  4247 ;;  sign            1   42[COMRAM] unsigned char 
  4248 ;;  counter         1   41[COMRAM] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  2   37[COMRAM] int 
  4251 ;; Registers used:
  4252 ;;		wreg, status,2, status,0
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        8 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    3
  4265 ;; This function calls:
  4266 ;;		Nothing
  4267 ;; This function is called by:
  4268 ;;		_IntToBcd
  4269 ;;		_IntToBcd_cook_time
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text21
  4274  001DE2                     __ptext21:
  4275                           	opt stack 0
  4276  001DE2                     ___awdiv:
  4277                           	opt stack 25
  4278                           
  4279                           ;incstack = 0
  4280  001DE2  0E00               	movlw	0
  4281  001DE4  6E2B               	movwf	___awdiv@sign,c
  4282  001DE6  AE29               	btfss	___awdiv@divisor+1,7,c
  4283  001DE8  D006               	goto	l698
  4284  001DEA  6C28               	negf	___awdiv@divisor,c
  4285  001DEC  1E29               	comf	___awdiv@divisor+1,f,c
  4286  001DEE  B0D8               	btfsc	status,0,c
  4287  001DF0  2A29               	incf	___awdiv@divisor+1,f,c
  4288  001DF2  0E01               	movlw	1
  4289  001DF4  6E2B               	movwf	___awdiv@sign,c
  4290  001DF6                     l698:
  4291  001DF6  AE27               	btfss	___awdiv@dividend+1,7,c
  4292  001DF8  D006               	goto	l699
  4293  001DFA  6C26               	negf	___awdiv@dividend,c
  4294  001DFC  1E27               	comf	___awdiv@dividend+1,f,c
  4295  001DFE  B0D8               	btfsc	status,0,c
  4296  001E00  2A27               	incf	___awdiv@dividend+1,f,c
  4297  001E02  0E01               	movlw	1
  4298  001E04  1A2B               	xorwf	___awdiv@sign,f,c
  4299  001E06                     l699:
  4300  001E06  0E00               	movlw	0
  4301  001E08  6E2D               	movwf	___awdiv@quotient+1,c
  4302  001E0A  0E00               	movlw	0
  4303  001E0C  6E2C               	movwf	___awdiv@quotient,c
  4304  001E0E  5028               	movf	___awdiv@divisor,w,c
  4305  001E10  1029               	iorwf	___awdiv@divisor+1,w,c
  4306  001E12  B4D8               	btfsc	status,2,c
  4307  001E14  D01C               	goto	l706
  4308  001E16  0E01               	movlw	1
  4309  001E18  6E2A               	movwf	___awdiv@counter,c
  4310  001E1A  D004               	goto	l701
  4311  001E1C  90D8               	bcf	status,0,c
  4312  001E1E  3628               	rlcf	___awdiv@divisor,f,c
  4313  001E20  3629               	rlcf	___awdiv@divisor+1,f,c
  4314  001E22  2A2A               	incf	___awdiv@counter,f,c
  4315  001E24                     l701:
  4316  001E24  AE29               	btfss	___awdiv@divisor+1,7,c
  4317  001E26  D7FA               	goto	l702
  4318  001E28                     u2060:
  4319  001E28  90D8               	bcf	status,0,c
  4320  001E2A  362C               	rlcf	___awdiv@quotient,f,c
  4321  001E2C  362D               	rlcf	___awdiv@quotient+1,f,c
  4322  001E2E  5028               	movf	___awdiv@divisor,w,c
  4323  001E30  5C26               	subwf	___awdiv@dividend,w,c
  4324  001E32  5029               	movf	___awdiv@divisor+1,w,c
  4325  001E34  5827               	subwfb	___awdiv@dividend+1,w,c
  4326  001E36  A0D8               	btfss	status,0,c
  4327  001E38  D005               	goto	l705
  4328  001E3A  5028               	movf	___awdiv@divisor,w,c
  4329  001E3C  5E26               	subwf	___awdiv@dividend,f,c
  4330  001E3E  5029               	movf	___awdiv@divisor+1,w,c
  4331  001E40  5A27               	subwfb	___awdiv@dividend+1,f,c
  4332  001E42  802C               	bsf	___awdiv@quotient,0,c
  4333  001E44                     l705:
  4334  001E44  90D8               	bcf	status,0,c
  4335  001E46  3229               	rrcf	___awdiv@divisor+1,f,c
  4336  001E48  3228               	rrcf	___awdiv@divisor,f,c
  4337  001E4A  2E2A               	decfsz	___awdiv@counter,f,c
  4338  001E4C  D7ED               	goto	u2060
  4339  001E4E                     l706:
  4340  001E4E  502B               	movf	___awdiv@sign,w,c
  4341  001E50  B4D8               	btfsc	status,2,c
  4342  001E52  D004               	goto	l707
  4343  001E54  6C2C               	negf	___awdiv@quotient,c
  4344  001E56  1E2D               	comf	___awdiv@quotient+1,f,c
  4345  001E58  B0D8               	btfsc	status,0,c
  4346  001E5A  2A2D               	incf	___awdiv@quotient+1,f,c
  4347  001E5C                     l707:
  4348  001E5C  C02C  F026         	movff	___awdiv@quotient,?___awdiv
  4349  001E60  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
  4350  001E64  0012               	return	
  4351  001E66                     __end_of___awdiv:
  4352                           	opt stack 0
  4353                           tblptru	equ	0xFF8
  4354                           tblptrh	equ	0xFF7
  4355                           tblptrl	equ	0xFF6
  4356                           tablat	equ	0xFF5
  4357                           prodh	equ	0xFF4
  4358                           prodl	equ	0xFF3
  4359                           intcon	equ	0xFF2
  4360                           postinc0	equ	0xFEE
  4361                           wreg	equ	0xFE8
  4362                           postdec1	equ	0xFE5
  4363                           plusw1	equ	0xFE3
  4364                           fsr1l	equ	0xFE1
  4365                           plusw2	equ	0xFDB
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function _I2C_ReadFromSlave *****************
  4369 ;; Defined at:
  4370 ;;		line 104 in file "i2c.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  addressByte     1    wreg     unsigned char 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  addressByte     1   40[COMRAM] unsigned char 
  4375 ;;  dataFromAddr    1   41[COMRAM] unsigned char 
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      unsigned char 
  4378 ;; Registers used:
  4379 ;;		wreg, status,2, status,0, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;Total ram usage:        2 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    5
  4392 ;; This function calls:
  4393 ;;		_I2C_Read
  4394 ;;		_I2C_Start
  4395 ;;		_I2C_WriteControl
  4396 ;;		_I2C_WriteData
  4397 ;; This function is called by:
  4398 ;;		_ReadAndDisplayMinFromRTC
  4399 ;;		_ReadAndDisplayHrFromRTC
  4400 ;;		_ReadAndDisplaySecFromRTC
  4401 ;;		_CookTimeSet
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text22
  4406  0022F6                     __ptext22:
  4407                           	opt stack 0
  4408  0022F6                     _I2C_ReadFromSlave:
  4409                           	opt stack 23
  4410                           
  4411                           ;incstack = 0
  4412                           ;I2C_ReadFromSlave@addressByte stored from wreg
  4413  0022F6  6E29               	movwf	I2C_ReadFromSlave@addressByte,c
  4414                           
  4415                           ;i2c.c: 106: unsigned char dataFromAddress;
  4416                           ;i2c.c: 107: I2C_Start();
  4417  0022F8  EC80  F012         	call	_I2C_Start	;wreg free
  4418                           
  4419                           ;i2c.c: 108: I2C_WriteControl(0b11011110, WRITE_MODE);
  4420  0022FC  C047  F027         	movff	_WRITE_MODE,I2C_WriteControl@R_W_mode
  4421  002300  0EDE               	movlw	222
  4422  002302  EC22  F012         	call	_I2C_WriteControl
  4423                           
  4424                           ;i2c.c: 109: I2C_WriteData(addressByte);
  4425  002306  5029               	movf	I2C_ReadFromSlave@addressByte,w,c
  4426  002308  EC6D  F012         	call	_I2C_WriteData
  4427                           
  4428                           ;i2c.c: 111: I2C_Start();
  4429  00230C  EC80  F012         	call	_I2C_Start	;wreg free
  4430                           
  4431                           ;i2c.c: 113: I2C_WriteControl(0b11011110, READ_MODE);
  4432  002310  C059  F027         	movff	_READ_MODE,I2C_WriteControl@R_W_mode
  4433  002314  0EDE               	movlw	222
  4434  002316  EC22  F012         	call	_I2C_WriteControl
  4435                           
  4436                           ;i2c.c: 115: dataFromAddress = I2C_Read(0);
  4437  00231A  0E00               	movlw	0
  4438  00231C  EC94  F011         	call	_I2C_Read
  4439  002320  6E2A               	movwf	I2C_ReadFromSlave@dataFromAddress,c
  4440                           
  4441                           ;i2c.c: 117: PEN = 1;
  4442  002322  84C5               	bsf	4037,2,c	;volatile
  4443                           
  4444                           ;i2c.c: 119: return dataFromAddress;
  4445  002324  502A               	movf	I2C_ReadFromSlave@dataFromAddress,w,c
  4446  002326  0012               	return	
  4447  002328                     __end_of_I2C_ReadFromSlave:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           intcon	equ	0xFF2
  4456                           postinc0	equ	0xFEE
  4457                           wreg	equ	0xFE8
  4458                           postdec1	equ	0xFE5
  4459                           plusw1	equ	0xFE3
  4460                           fsr1l	equ	0xFE1
  4461                           plusw2	equ	0xFDB
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function _I2C_Read *****************
  4465 ;; Defined at:
  4466 ;;		line 85 in file "i2c.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  ack             1    wreg     unsigned char 
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  ack             1   38[COMRAM] unsigned char 
  4471 ;;  readData        1   39[COMRAM] unsigned char 
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  1    wreg      unsigned char 
  4474 ;; Registers used:
  4475 ;;		wreg, status,2, status,0, cstack
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4485 ;;Total ram usage:        2 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:    4
  4488 ;; This function calls:
  4489 ;;		_I2C_Wait
  4490 ;; This function is called by:
  4491 ;;		_I2C_ReadFromSlave
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text23
  4496  002328                     __ptext23:
  4497                           	opt stack 0
  4498  002328                     _I2C_Read:
  4499                           	opt stack 23
  4500                           
  4501                           ;incstack = 0
  4502                           ;I2C_Read@ack stored from wreg
  4503  002328  6E27               	movwf	I2C_Read@ack,c
  4504                           
  4505                           ;i2c.c: 87: unsigned char readData;
  4506                           ;i2c.c: 89: I2C_Wait();
  4507  00232A  EC3D  F012         	call	_I2C_Wait	;wreg free
  4508                           
  4509                           ;i2c.c: 90: RCEN = 1;
  4510  00232E  86C5               	bsf	4037,3,c	;volatile
  4511                           
  4512                           ;i2c.c: 92: I2C_Wait();
  4513  002330  EC3D  F012         	call	_I2C_Wait	;wreg free
  4514                           
  4515                           ;i2c.c: 94: __nop();
  4516  002334  F000               	nop	
  4517                           
  4518                           ;i2c.c: 96: readData = SSPBUF;
  4519  002336  CFC9 F028          	movff	4041,I2C_Read@readData	;volatile
  4520                           
  4521                           ;i2c.c: 97: I2C_Wait();
  4522  00233A  EC3D  F012         	call	_I2C_Wait	;wreg free
  4523                           
  4524                           ;i2c.c: 98: if(ack) ACKDT = 0;
  4525  00233E  5027               	movf	I2C_Read@ack,w,c
  4526  002340  B4D8               	btfsc	status,2,c
  4527  002342  D002               	goto	l250
  4528  002344  9AC5               	bcf	4037,5,c	;volatile
  4529  002346  D001               	goto	l251
  4530  002348                     l250:
  4531                           
  4532                           ;i2c.c: 99: else ACKDT = 1;
  4533  002348  8AC5               	bsf	4037,5,c	;volatile
  4534  00234A                     l251:
  4535                           
  4536                           ;i2c.c: 100: ACKEN = 1;
  4537  00234A  88C5               	bsf	4037,4,c	;volatile
  4538                           
  4539                           ;i2c.c: 101: return readData;
  4540  00234C  5028               	movf	I2C_Read@readData,w,c
  4541  00234E  0012               	return	
  4542  002350                     __end_of_I2C_Read:
  4543                           	opt stack 0
  4544                           tblptru	equ	0xFF8
  4545                           tblptrh	equ	0xFF7
  4546                           tblptrl	equ	0xFF6
  4547                           tablat	equ	0xFF5
  4548                           prodh	equ	0xFF4
  4549                           prodl	equ	0xFF3
  4550                           intcon	equ	0xFF2
  4551                           postinc0	equ	0xFEE
  4552                           wreg	equ	0xFE8
  4553                           postdec1	equ	0xFE5
  4554                           plusw1	equ	0xFE3
  4555                           fsr1l	equ	0xFE1
  4556                           plusw2	equ	0xFDB
  4557                           status	equ	0xFD8
  4558                           
  4559 ;; *************** function _CookTimeDisplay *****************
  4560 ;; Defined at:
  4561 ;;		line 29 in file "cooktime_controller.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  adcRead         2   14[BANK0 ] unsigned int 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  cookTimeCont    2   27[BANK1 ] unsigned char [2]
  4566 ;;  cookTimeCont    1   29[BANK1 ] unsigned char [1]
  4567 ;;  setBakeTimeD   10    0[BANK1 ] unsigned char [10]
  4568 ;;  nextMenu        7   10[BANK1 ] unsigned char [7]
  4569 ;;  backMenu        6   17[BANK1 ] unsigned char [6]
  4570 ;;  minDisplay      4   23[BANK1 ] unsigned char [4]
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4580 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Totals:         0       2      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;Total ram usage:       32 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    5
  4587 ;; This function calls:
  4588 ;;		___lwdiv
  4589 ;;		_lcd_char
  4590 ;;		_lcd_command
  4591 ;;		_lcd_string
  4592 ;;		_sprintf
  4593 ;; This function is called by:
  4594 ;;		_main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text24
  4599  00147A                     __ptext24:
  4600                           	opt stack 0
  4601  00147A                     _CookTimeDisplay:
  4602                           	opt stack 25
  4603                           
  4604                           ;cooktime_controller.c: 31: lcd_command(0x80);
  4605                           
  4606                           ;incstack = 0
  4607  00147A  0E80               	movlw	128
  4608  00147C  EC53  F00C         	call	_lcd_command
  4609                           
  4610                           ;cooktime_controller.c: 32: char setBakeTimeDisplay[] = "Bake Time";
  4611  001480  EE20  F08B         	lfsr	2,CookTimeDisplay@F3152
  4612  001484  EE11  F000         	lfsr	1,CookTimeDisplay@setBakeTimeDisplay
  4613  001488  0E09               	movlw	9
  4614  00148A                     u2391:
  4615  00148A  CFDB FFE3          	movff	plusw2,plusw1
  4616  00148E  06E8               	decf	wreg,f,c
  4617  001490  E2FC               	bc	u2391
  4618                           
  4619                           ;cooktime_controller.c: 33: lcd_string(setBakeTimeDisplay);
  4620  001492  0E00               	movlw	low CookTimeDisplay@setBakeTimeDisplay
  4621  001494  6E29               	movwf	lcd_string@x,c
  4622  001496  0E01               	movlw	high CookTimeDisplay@setBakeTimeDisplay
  4623  001498  6E2A               	movwf	lcd_string@x+1,c
  4624  00149A  EC48  F011         	call	_lcd_string	;wreg free
  4625                           
  4626                           ;cooktime_controller.c: 35: lcd_command(0x8A);
  4627  00149E  0E8A               	movlw	138
  4628  0014A0  EC53  F00C         	call	_lcd_command
  4629                           
  4630                           ;cooktime_controller.c: 36: char backMenu[] = "|Back";
  4631  0014A4  EE20  F0AF         	lfsr	2,CookTimeDisplay@F3154
  4632  0014A8  EE11  F011         	lfsr	1,CookTimeDisplay@backMenu
  4633  0014AC  0E05               	movlw	5
  4634  0014AE                     u2401:
  4635  0014AE  CFDB FFE3          	movff	plusw2,plusw1
  4636  0014B2  06E8               	decf	wreg,f,c
  4637  0014B4  E2FC               	bc	u2401
  4638                           
  4639                           ;cooktime_controller.c: 37: lcd_string(backMenu);
  4640  0014B6  0E11               	movlw	low CookTimeDisplay@backMenu
  4641  0014B8  6E29               	movwf	lcd_string@x,c
  4642  0014BA  0E01               	movlw	high CookTimeDisplay@backMenu
  4643  0014BC  6E2A               	movwf	lcd_string@x+1,c
  4644  0014BE  EC48  F011         	call	_lcd_string	;wreg free
  4645                           
  4646                           ;cooktime_controller.c: 39: lcd_command(0xCA);
  4647  0014C2  0ECA               	movlw	202
  4648  0014C4  EC53  F00C         	call	_lcd_command
  4649                           
  4650                           ;cooktime_controller.c: 40: char nextMenu[] = "|Start";
  4651  0014C8  EE20  F0A8         	lfsr	2,CookTimeDisplay@F3156
  4652  0014CC  EE11  F00A         	lfsr	1,CookTimeDisplay@nextMenu
  4653  0014D0  0E06               	movlw	6
  4654  0014D2                     u2411:
  4655  0014D2  CFDB FFE3          	movff	plusw2,plusw1
  4656  0014D6  06E8               	decf	wreg,f,c
  4657  0014D8  E2FC               	bc	u2411
  4658                           
  4659                           ;cooktime_controller.c: 41: lcd_string(nextMenu);
  4660  0014DA  0E0A               	movlw	low CookTimeDisplay@nextMenu
  4661  0014DC  6E29               	movwf	lcd_string@x,c
  4662  0014DE  0E01               	movlw	high CookTimeDisplay@nextMenu
  4663  0014E0  6E2A               	movwf	lcd_string@x+1,c
  4664  0014E2  EC48  F011         	call	_lcd_string	;wreg free
  4665                           
  4666                           ;cooktime_controller.c: 43: lcd_command(0xC6);
  4667  0014E6  0EC6               	movlw	198
  4668  0014E8  EC53  F00C         	call	_lcd_command
  4669                           
  4670                           ;cooktime_controller.c: 44: char minDisplay[] = "MIN";
  4671  0014EC  C050  F117         	movff	CookTimeDisplay@F3158,CookTimeDisplay@minDisplay
  4672  0014F0  C051  F118         	movff	CookTimeDisplay@F3158+1,CookTimeDisplay@minDisplay+1
  4673  0014F4  C052  F119         	movff	CookTimeDisplay@F3158+2,CookTimeDisplay@minDisplay+2
  4674  0014F8  C053  F11A         	movff	CookTimeDisplay@F3158+3,CookTimeDisplay@minDisplay+3
  4675                           
  4676                           ;cooktime_controller.c: 45: lcd_string(minDisplay);
  4677  0014FC  0E17               	movlw	low CookTimeDisplay@minDisplay
  4678  0014FE  6E29               	movwf	lcd_string@x,c
  4679  001500  0E01               	movlw	high CookTimeDisplay@minDisplay
  4680  001502  6E2A               	movwf	lcd_string@x+1,c
  4681  001504  EC48  F011         	call	_lcd_string	;wreg free
  4682                           
  4683                           ;cooktime_controller.c: 48: cookTimeAdcRead = adcRead/17;
  4684  001508  C0E7  F026         	movff	CookTimeDisplay@adcRead,___lwdiv@dividend
  4685  00150C  C0E8  F027         	movff	CookTimeDisplay@adcRead+1,___lwdiv@dividend+1
  4686  001510  0E00               	movlw	0
  4687  001512  6E29               	movwf	___lwdiv@divisor+1,c
  4688  001514  0E11               	movlw	17
  4689  001516  6E28               	movwf	___lwdiv@divisor,c
  4690  001518  EC1A  F010         	call	___lwdiv	;wreg free
  4691  00151C  C026  F031         	movff	?___lwdiv,_cookTimeAdcRead	;volatile
  4692  001520  C027  F032         	movff	?___lwdiv+1,_cookTimeAdcRead+1	;volatile
  4693                           
  4694                           ;cooktime_controller.c: 50: if(cookTimeAdcRead >= 60)
  4695  001524  5032               	movf	_cookTimeAdcRead+1,w,c	;volatile
  4696  001526  E104               	bnz	u2420
  4697  001528  0E3C               	movlw	60
  4698  00152A  5C31               	subwf	_cookTimeAdcRead,w,c	;volatile
  4699  00152C  A0D8               	btfss	status,0,c
  4700  00152E  D004               	goto	l489
  4701  001530                     u2420:
  4702                           
  4703                           ;cooktime_controller.c: 51: {
  4704                           ;cooktime_controller.c: 52: cookTimeAdcRead = 59;
  4705  001530  0E00               	movlw	0
  4706  001532  6E32               	movwf	_cookTimeAdcRead+1,c	;volatile
  4707  001534  0E3B               	movlw	59
  4708  001536  6E31               	movwf	_cookTimeAdcRead,c	;volatile
  4709  001538                     l489:
  4710                           
  4711                           ;cooktime_controller.c: 53: }
  4712                           ;cooktime_controller.c: 55: if(cookTimeAdcRead < 10)
  4713  001538  5032               	movf	_cookTimeAdcRead+1,w,c	;volatile
  4714  00153A  E123               	bnz	l3906
  4715  00153C  0E0A               	movlw	10
  4716  00153E  5C31               	subwf	_cookTimeAdcRead,w,c	;volatile
  4717  001540  B0D8               	btfsc	status,0,c
  4718  001542  D01F               	goto	l490
  4719                           
  4720                           ;cooktime_controller.c: 56: {
  4721                           ;cooktime_controller.c: 57: lcd_command(0xC3);
  4722  001544  0EC3               	movlw	195
  4723  001546  EC53  F00C         	call	_lcd_command
  4724                           
  4725                           ;cooktime_controller.c: 58: lcd_char('0');
  4726  00154A  0E30               	movlw	48
  4727  00154C  ECFC  F00B         	call	_lcd_char
  4728                           
  4729                           ;cooktime_controller.c: 59: lcd_command(0xC4);
  4730  001550  0EC4               	movlw	196
  4731  001552  EC53  F00C         	call	_lcd_command
  4732                           
  4733                           ;cooktime_controller.c: 60: char cookTimeContainer[1];
  4734                           ;cooktime_controller.c: 61: sprintf(cookTimeContainer, "%u", cookTimeAdcRead);
  4735  001556  0E1D               	movlw	low CookTimeDisplay@cookTimeContainer
  4736  001558  0100               	movlb	0	; () banked
  4737  00155A  6FDA               	movwf	sprintf@sp& (0+255),b
  4738  00155C  0E01               	movlw	high CookTimeDisplay@cookTimeContainer
  4739  00155E  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  4740  001560  0E0B               	movlw	low STR_1
  4741  001562  6FDC               	movwf	sprintf@f& (0+255),b
  4742  001564  0E10               	movlw	high STR_1
  4743  001566  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  4744  001568  C031  F0DE         	movff	_cookTimeAdcRead,?_sprintf+4	;volatile
  4745  00156C  C032  F0DF         	movff	_cookTimeAdcRead+1,?_sprintf+5	;volatile
  4746  001570  ECDA  F00A         	call	_sprintf	;wreg free
  4747                           
  4748                           ;cooktime_controller.c: 62: lcd_string(cookTimeContainer);
  4749  001574  0E1D               	movlw	low CookTimeDisplay@cookTimeContainer
  4750  001576  6E29               	movwf	lcd_string@x,c
  4751  001578  0E01               	movlw	high CookTimeDisplay@cookTimeContainer
  4752  00157A  6E2A               	movwf	lcd_string@x+1,c
  4753  00157C  EC48  F011         	call	_lcd_string	;wreg free
  4754                           
  4755                           ;cooktime_controller.c: 63: }
  4756  001580  0012               	return	
  4757  001582                     l490:
  4758  001582                     l3906:
  4759                           
  4760                           ;cooktime_controller.c: 64: else{
  4761                           ;cooktime_controller.c: 65: lcd_command(0xC3);
  4762  001582  0EC3               	movlw	195
  4763  001584  EC53  F00C         	call	_lcd_command
  4764                           
  4765                           ;cooktime_controller.c: 66: char cookTimeContainer[2];
  4766                           ;cooktime_controller.c: 67: sprintf(cookTimeContainer, "%u", cookTimeAdcRead);
  4767  001588  0E1B               	movlw	low CookTimeDisplay@cookTimeContainer_1314
  4768  00158A  0100               	movlb	0	; () banked
  4769  00158C  6FDA               	movwf	sprintf@sp& (0+255),b
  4770  00158E  0E01               	movlw	high CookTimeDisplay@cookTimeContainer_1314
  4771  001590  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  4772  001592  0E0B               	movlw	low STR_1
  4773  001594  6FDC               	movwf	sprintf@f& (0+255),b
  4774  001596  0E10               	movlw	high STR_1
  4775  001598  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  4776  00159A  C031  F0DE         	movff	_cookTimeAdcRead,?_sprintf+4	;volatile
  4777  00159E  C032  F0DF         	movff	_cookTimeAdcRead+1,?_sprintf+5	;volatile
  4778  0015A2  ECDA  F00A         	call	_sprintf	;wreg free
  4779                           
  4780                           ;cooktime_controller.c: 68: lcd_string(cookTimeContainer);
  4781  0015A6  0E1B               	movlw	low CookTimeDisplay@cookTimeContainer_1314
  4782  0015A8  6E29               	movwf	lcd_string@x,c
  4783  0015AA  0E01               	movlw	high CookTimeDisplay@cookTimeContainer_1314
  4784  0015AC  6E2A               	movwf	lcd_string@x+1,c
  4785  0015AE  EC48  F011         	call	_lcd_string	;wreg free
  4786  0015B2  0012               	return	
  4787  0015B4                     __end_of_CookTimeDisplay:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           intcon	equ	0xFF2
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           postdec1	equ	0xFE5
  4799                           plusw1	equ	0xFE3
  4800                           fsr1l	equ	0xFE1
  4801                           plusw2	equ	0xFDB
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function _CheckCookDone *****************
  4805 ;; Defined at:
  4806 ;;		line 242 in file "main.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  bakeDone       11    6[BANK0 ] unsigned char [11]
  4811 ;;  clear           6   17[BANK0 ] unsigned char [6]
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      void 
  4814 ;; Registers used:
  4815 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;Total ram usage:       17 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    7
  4828 ;; This function calls:
  4829 ;;		_InitI2C_MasterMode
  4830 ;;		_WriteToDac
  4831 ;;		_clearAlarm
  4832 ;;		_lcd_clear
  4833 ;;		_lcd_command
  4834 ;;		_lcd_string
  4835 ;; This function is called by:
  4836 ;;		_main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text25
  4841  001E66                     __ptext25:
  4842                           	opt stack 0
  4843  001E66                     _CheckCookDone:
  4844                           	opt stack 23
  4845                           
  4846                           ;main.c: 244: if(PORTDbits.RD0 == 1)
  4847                           
  4848                           ;incstack = 0
  4849  001E66  A083               	btfss	3971,0,c	;volatile
  4850  001E68  0012               	return	
  4851                           
  4852                           ;main.c: 245: {
  4853                           ;main.c: 246: WriteToDac(0x00,0);
  4854  001E6A  0E00               	movlw	0
  4855  001E6C  6E28               	movwf	WriteToDac@data+1,c
  4856  001E6E  0E00               	movlw	0
  4857  001E70  6E27               	movwf	WriteToDac@data,c
  4858  001E72  0E00               	movlw	0
  4859  001E74  6E2A               	movwf	WriteToDac@frequency+1,c
  4860  001E76  0E00               	movlw	0
  4861  001E78  6E29               	movwf	WriteToDac@frequency,c
  4862  001E7A  EC6C  F010         	call	_WriteToDac	;wreg free
  4863                           
  4864                           ;main.c: 247: LATDbits.LATD6 = 0;
  4865  001E7E  9C8C               	bcf	3980,6,c	;volatile
  4866                           
  4867                           ;main.c: 248: LATDbits.LATD7 = 1;
  4868  001E80  8E8C               	bsf	3980,7,c	;volatile
  4869                           
  4870                           ;main.c: 249: sineOut = 0;
  4871  001E82  0E00               	movlw	0
  4872  001E84  6E49               	movwf	_sineOut,c	;volatile
  4873                           
  4874                           ;main.c: 250: InitI2C_MasterMode();
  4875  001E86  EC31  F012         	call	_InitI2C_MasterMode	;wreg free
  4876                           
  4877                           ;main.c: 252: clearAlarm();
  4878  001E8A  ECF3  F010         	call	_clearAlarm	;wreg free
  4879                           
  4880                           ;main.c: 254: lcd_clear();
  4881  001E8E  EC78  F012         	call	_lcd_clear	;wreg free
  4882                           
  4883                           ;main.c: 255: lcd_command(0x80);
  4884  001E92  0E80               	movlw	128
  4885  001E94  EC53  F00C         	call	_lcd_command
  4886                           
  4887                           ;main.c: 256: char bakeDone[] = "Bake Done!";
  4888  001E98  EE20  F080         	lfsr	2,CheckCookDone@F3210
  4889  001E9C  EE10  F0DF         	lfsr	1,CheckCookDone@bakeDone
  4890  001EA0  0E0A               	movlw	10
  4891  001EA2                     u2191:
  4892  001EA2  CFDB FFE3          	movff	plusw2,plusw1
  4893  001EA6  06E8               	decf	wreg,f,c
  4894  001EA8  E2FC               	bc	u2191
  4895                           
  4896                           ;main.c: 257: lcd_string(bakeDone);
  4897  001EAA  0EDF               	movlw	low CheckCookDone@bakeDone
  4898  001EAC  6E29               	movwf	lcd_string@x,c
  4899  001EAE  0E00               	movlw	high CheckCookDone@bakeDone
  4900  001EB0  6E2A               	movwf	lcd_string@x+1,c
  4901  001EB2  EC48  F011         	call	_lcd_string	;wreg free
  4902                           
  4903                           ;main.c: 259: lcd_command(0xCB);
  4904  001EB6  0ECB               	movlw	203
  4905  001EB8  EC53  F00C         	call	_lcd_command
  4906                           
  4907                           ;main.c: 260: char clear[] = "Clear";
  4908  001EBC  EE20  F0D3         	lfsr	2,CheckCookDone@F3212
  4909  001EC0  EE10  F0EA         	lfsr	1,CheckCookDone@clear
  4910  001EC4  0E05               	movlw	5
  4911  001EC6                     u2201:
  4912  001EC6  CFDB FFE3          	movff	plusw2,plusw1
  4913  001ECA  06E8               	decf	wreg,f,c
  4914  001ECC  E2FC               	bc	u2201
  4915                           
  4916                           ;main.c: 261: lcd_string(clear);
  4917  001ECE  0EEA               	movlw	low CheckCookDone@clear
  4918  001ED0  6E29               	movwf	lcd_string@x,c
  4919  001ED2  0E00               	movlw	high CheckCookDone@clear
  4920  001ED4  6E2A               	movwf	lcd_string@x+1,c
  4921  001ED6  EC48  F011         	call	_lcd_string	;wreg free
  4922                           
  4923                           ;main.c: 263: LCD_STATES = CookTimeDone;
  4924  001EDA  0E09               	movlw	9
  4925  001EDC  0101               	movlb	1	; () banked
  4926  001EDE  6FC6               	movwf	_LCD_STATES& (0+255),b
  4927                           
  4928                           ; BSR set to: 1
  4929                           ;main.c: 265: alarmSet = 1;
  4930  001EE0  0E01               	movlw	1
  4931  001EE2  6E4A               	movwf	_alarmSet,c	;volatile
  4932                           
  4933                           ; BSR set to: 1
  4934                           ;main.c: 266: PR2 = 1;
  4935  001EE4  0E01               	movlw	1
  4936  001EE6  6ECB               	movwf	4043,c	;volatile
  4937  001EE8  0012               	return	
  4938  001EEA                     __end_of_CheckCookDone:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           postdec1	equ	0xFE5
  4950                           plusw1	equ	0xFE3
  4951                           fsr1l	equ	0xFE1
  4952                           plusw2	equ	0xFDB
  4953                           status	equ	0xFD8
  4954                           
  4955 ;; *************** function _lcd_clear *****************
  4956 ;; Defined at:
  4957 ;;		line 76 in file "lcd.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;		None
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;		None
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;Total ram usage:        0 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    4
  4978 ;; This function calls:
  4979 ;;		_lcd_command
  4980 ;; This function is called by:
  4981 ;;		_main
  4982 ;;		_CheckCookDone
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text26
  4987  0024F0                     __ptext26:
  4988                           	opt stack 0
  4989  0024F0                     _lcd_clear:
  4990                           	opt stack 26
  4991                           
  4992                           ;lcd.c: 78: lcd_command(0x01);
  4993                           
  4994                           ;incstack = 0
  4995  0024F0  0E01               	movlw	1
  4996  0024F2  EC53  F00C         	call	_lcd_command
  4997  0024F6  0012               	return		;funcret
  4998  0024F8                     __end_of_lcd_clear:
  4999                           	opt stack 0
  5000                           tblptru	equ	0xFF8
  5001                           tblptrh	equ	0xFF7
  5002                           tblptrl	equ	0xFF6
  5003                           tablat	equ	0xFF5
  5004                           prodh	equ	0xFF4
  5005                           prodl	equ	0xFF3
  5006                           intcon	equ	0xFF2
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           postdec1	equ	0xFE5
  5010                           plusw1	equ	0xFE3
  5011                           fsr1l	equ	0xFE1
  5012                           plusw2	equ	0xFDB
  5013                           status	equ	0xFD8
  5014                           
  5015 ;; *************** function _clearAlarm *****************
  5016 ;; Defined at:
  5017 ;;		line 270 in file "main.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, status,2, status,0, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;Total ram usage:        2 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    6
  5038 ;; This function calls:
  5039 ;;		_I2C_WriteToSlave
  5040 ;; This function is called by:
  5041 ;;		_main
  5042 ;;		_CheckCookDone
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           	psect	text27
  5047  0021E6                     __ptext27:
  5048                           	opt stack 0
  5049  0021E6                     _clearAlarm:
  5050                           	opt stack 24
  5051                           
  5052                           ;main.c: 272: I2C_WriteToSlave(0b11011110, 0, 0x07, 0x00);
  5053                           
  5054                           ;incstack = 0
  5055  0021E6  0E00               	movlw	0
  5056  0021E8  6E29               	movwf	I2C_WriteToSlave@R_W_mode,c
  5057  0021EA  0E07               	movlw	7
  5058  0021EC  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  5059  0021EE  0E00               	movlw	0
  5060  0021F0  6E2B               	movwf	I2C_WriteToSlave@data,c
  5061  0021F2  0EDE               	movlw	222
  5062  0021F4  ECE2  F011         	call	_I2C_WriteToSlave
  5063                           
  5064                           ;main.c: 273: _delay((unsigned long)((100)*(8000000/4000.0)));
  5065  0021F8  0E02               	movlw	2
  5066  0021FA  6E2E               	movwf	(??_clearAlarm+1)& (0+255),c
  5067  0021FC  0E04               	movlw	4
  5068  0021FE  6E2D               	movwf	??_clearAlarm& (0+255),c
  5069  002200  0EBA               	movlw	186
  5070  002202                     u2647:
  5071  002202  2EE8               	decfsz	wreg,f,c
  5072  002204  D7FE               	bra	u2647
  5073  002206  2E2D               	decfsz	??_clearAlarm& (0+255),f,c
  5074  002208  D7FC               	bra	u2647
  5075  00220A  2E2E               	decfsz	(??_clearAlarm+1)& (0+255),f,c
  5076  00220C  D7FA               	bra	u2647
  5077  00220E  D000               	nop2	
  5078                           
  5079                           ;main.c: 274: I2C_WriteToSlave(0b11011110, 0, 0x0D, 0x00);
  5080  002210  0E00               	movlw	0
  5081  002212  6E29               	movwf	I2C_WriteToSlave@R_W_mode,c
  5082  002214  0E0D               	movlw	13
  5083  002216  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  5084  002218  0E00               	movlw	0
  5085  00221A  6E2B               	movwf	I2C_WriteToSlave@data,c
  5086  00221C  0EDE               	movlw	222
  5087  00221E  ECE2  F011         	call	_I2C_WriteToSlave
  5088  002222  0012               	return		;funcret
  5089  002224                     __end_of_clearAlarm:
  5090                           	opt stack 0
  5091                           tblptru	equ	0xFF8
  5092                           tblptrh	equ	0xFF7
  5093                           tblptrl	equ	0xFF6
  5094                           tablat	equ	0xFF5
  5095                           prodh	equ	0xFF4
  5096                           prodl	equ	0xFF3
  5097                           intcon	equ	0xFF2
  5098                           postinc0	equ	0xFEE
  5099                           wreg	equ	0xFE8
  5100                           postdec1	equ	0xFE5
  5101                           plusw1	equ	0xFE3
  5102                           fsr1l	equ	0xFE1
  5103                           plusw2	equ	0xFDB
  5104                           status	equ	0xFD8
  5105                           
  5106 ;; *************** function _I2C_WriteToSlave *****************
  5107 ;; Defined at:
  5108 ;;		line 122 in file "i2c.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  slaveAddress    1    wreg     unsigned char 
  5111 ;;  R_W_mode        1   40[COMRAM] unsigned char 
  5112 ;;  addressByte     1   41[COMRAM] unsigned char 
  5113 ;;  data            1   42[COMRAM] unsigned char 
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  slaveAddress    1   43[COMRAM] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  1    wreg      void 
  5118 ;; Registers used:
  5119 ;;		wreg, status,2, status,0, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5125 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5128 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5129 ;;Total ram usage:        4 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    5
  5132 ;; This function calls:
  5133 ;;		_I2C_Start
  5134 ;;		_I2C_Stop
  5135 ;;		_I2C_WriteControl
  5136 ;;		_I2C_WriteData
  5137 ;; This function is called by:
  5138 ;;		_clearAlarm
  5139 ;;		_WriteToRTC
  5140 ;;		_WriteTimeToCookToRTC
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text28
  5145  0023C4                     __ptext28:
  5146                           	opt stack 0
  5147  0023C4                     _I2C_WriteToSlave:
  5148                           	opt stack 24
  5149                           
  5150                           ;incstack = 0
  5151                           ;I2C_WriteToSlave@slaveAddress stored from wreg
  5152  0023C4  6E2C               	movwf	I2C_WriteToSlave@slaveAddress,c
  5153                           
  5154                           ;i2c.c: 125: I2C_Start();
  5155  0023C6  EC80  F012         	call	_I2C_Start	;wreg free
  5156                           
  5157                           ;i2c.c: 126: I2C_WriteControl(slaveAddress, R_W_mode);
  5158  0023CA  C029  F027         	movff	I2C_WriteToSlave@R_W_mode,I2C_WriteControl@R_W_mode
  5159  0023CE  502C               	movf	I2C_WriteToSlave@slaveAddress,w,c
  5160  0023D0  EC22  F012         	call	_I2C_WriteControl
  5161                           
  5162                           ;i2c.c: 127: I2C_WriteData(addressByte);
  5163  0023D4  502A               	movf	I2C_WriteToSlave@addressByte,w,c
  5164  0023D6  EC6D  F012         	call	_I2C_WriteData
  5165                           
  5166                           ;i2c.c: 128: I2C_WriteData(data);
  5167  0023DA  502B               	movf	I2C_WriteToSlave@data,w,c
  5168  0023DC  EC6D  F012         	call	_I2C_WriteData
  5169                           
  5170                           ;i2c.c: 129: I2C_Stop();
  5171  0023E0  EC7C  F012         	call	_I2C_Stop	;wreg free
  5172  0023E4  0012               	return		;funcret
  5173  0023E6                     __end_of_I2C_WriteToSlave:
  5174                           	opt stack 0
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           intcon	equ	0xFF2
  5182                           postinc0	equ	0xFEE
  5183                           wreg	equ	0xFE8
  5184                           postdec1	equ	0xFE5
  5185                           plusw1	equ	0xFE3
  5186                           fsr1l	equ	0xFE1
  5187                           plusw2	equ	0xFDB
  5188                           status	equ	0xFD8
  5189                           
  5190 ;; *************** function _I2C_WriteData *****************
  5191 ;; Defined at:
  5192 ;;		line 61 in file "i2c.c"
  5193 ;; Parameters:    Size  Location     Type
  5194 ;;  data            1    wreg     unsigned char 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  data            1   38[COMRAM] unsigned char 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  1    wreg      void 
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;Total ram usage:        1 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    4
  5213 ;; This function calls:
  5214 ;;		_I2C_Wait
  5215 ;; This function is called by:
  5216 ;;		_I2C_ReadFromSlave
  5217 ;;		_I2C_WriteToSlave
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           	psect	text29
  5222  0024DA                     __ptext29:
  5223                           	opt stack 0
  5224  0024DA                     _I2C_WriteData:
  5225                           	opt stack 24
  5226                           
  5227                           ;incstack = 0
  5228                           ;I2C_WriteData@data stored from wreg
  5229  0024DA  6E27               	movwf	I2C_WriteData@data,c
  5230                           
  5231                           ;i2c.c: 63: I2C_Wait();
  5232  0024DC  EC3D  F012         	call	_I2C_Wait	;wreg free
  5233                           
  5234                           ;i2c.c: 64: SSPBUF = data;
  5235  0024E0  C027  FFC9         	movff	I2C_WriteData@data,4041	;volatile
  5236  0024E4  0012               	return		;funcret
  5237  0024E6                     __end_of_I2C_WriteData:
  5238                           	opt stack 0
  5239                           tblptru	equ	0xFF8
  5240                           tblptrh	equ	0xFF7
  5241                           tblptrl	equ	0xFF6
  5242                           tablat	equ	0xFF5
  5243                           prodh	equ	0xFF4
  5244                           prodl	equ	0xFF3
  5245                           intcon	equ	0xFF2
  5246                           postinc0	equ	0xFEE
  5247                           wreg	equ	0xFE8
  5248                           postdec1	equ	0xFE5
  5249                           plusw1	equ	0xFE3
  5250                           fsr1l	equ	0xFE1
  5251                           plusw2	equ	0xFDB
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function _I2C_WriteControl *****************
  5255 ;; Defined at:
  5256 ;;		line 68 in file "i2c.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  slaveAddress    1    wreg     unsigned char 
  5259 ;;  R_W_mode        1   38[COMRAM] unsigned char 
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  slaveAddress    1   39[COMRAM] unsigned char 
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      void 
  5264 ;; Registers used:
  5265 ;;		wreg, status,2, status,0, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5271 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;Total ram usage:        2 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    4
  5278 ;; This function calls:
  5279 ;;		_I2C_Wait
  5280 ;; This function is called by:
  5281 ;;		_I2C_ReadFromSlave
  5282 ;;		_I2C_WriteToSlave
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           	psect	text30
  5287  002444                     __ptext30:
  5288                           	opt stack 0
  5289  002444                     _I2C_WriteControl:
  5290                           	opt stack 24
  5291                           
  5292                           ;incstack = 0
  5293                           ;I2C_WriteControl@slaveAddress stored from wreg
  5294  002444  6E28               	movwf	I2C_WriteControl@slaveAddress,c
  5295                           
  5296                           ;i2c.c: 72: if(R_W_mode)
  5297  002446  5027               	movf	I2C_WriteControl@R_W_mode,w,c
  5298  002448  B4D8               	btfsc	status,2,c
  5299  00244A  D003               	goto	l245
  5300                           
  5301                           ;i2c.c: 73: {
  5302                           ;i2c.c: 74: slaveAddress = slaveAddress | (1 << 0);
  5303  00244C  5028               	movf	I2C_WriteControl@slaveAddress,w,c
  5304  00244E  0901               	iorlw	1
  5305  002450  D002               	goto	L7
  5306  002452                     l245:
  5307                           
  5308                           ;i2c.c: 76: else{
  5309                           ;i2c.c: 77: slaveAddress = slaveAddress & ~(1 << 0);
  5310  002452  5028               	movf	I2C_WriteControl@slaveAddress,w,c
  5311  002454  0BFE               	andlw	254
  5312  002456                     L7:
  5313  002456  6E28               	movwf	I2C_WriteControl@slaveAddress,c
  5314                           
  5315                           ;i2c.c: 79: }
  5316                           ;i2c.c: 81: I2C_Wait();
  5317  002458  EC3D  F012         	call	_I2C_Wait	;wreg free
  5318                           
  5319                           ;i2c.c: 82: SSPBUF = slaveAddress;
  5320  00245C  C028  FFC9         	movff	I2C_WriteControl@slaveAddress,4041	;volatile
  5321  002460  0012               	return		;funcret
  5322  002462                     __end_of_I2C_WriteControl:
  5323                           	opt stack 0
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           intcon	equ	0xFF2
  5331                           postinc0	equ	0xFEE
  5332                           wreg	equ	0xFE8
  5333                           postdec1	equ	0xFE5
  5334                           plusw1	equ	0xFE3
  5335                           fsr1l	equ	0xFE1
  5336                           plusw2	equ	0xFDB
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _I2C_Stop *****************
  5340 ;; Defined at:
  5341 ;;		line 48 in file "i2c.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;Total ram usage:        0 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    4
  5362 ;; This function calls:
  5363 ;;		_I2C_Wait
  5364 ;; This function is called by:
  5365 ;;		_I2C_WriteToSlave
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text31
  5370  0024F8                     __ptext31:
  5371                           	opt stack 0
  5372  0024F8                     _I2C_Stop:
  5373                           	opt stack 24
  5374                           
  5375                           ;i2c.c: 50: I2C_Wait();
  5376                           
  5377                           ;incstack = 0
  5378  0024F8  EC3D  F012         	call	_I2C_Wait	;wreg free
  5379                           
  5380                           ;i2c.c: 51: PEN = 1;
  5381  0024FC  84C5               	bsf	4037,2,c	;volatile
  5382  0024FE  0012               	return		;funcret
  5383  002500                     __end_of_I2C_Stop:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           intcon	equ	0xFF2
  5392                           postinc0	equ	0xFEE
  5393                           wreg	equ	0xFE8
  5394                           postdec1	equ	0xFE5
  5395                           plusw1	equ	0xFE3
  5396                           fsr1l	equ	0xFE1
  5397                           plusw2	equ	0xFDB
  5398                           status	equ	0xFD8
  5399                           
  5400 ;; *************** function _I2C_Start *****************
  5401 ;; Defined at:
  5402 ;;		line 42 in file "i2c.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;		None
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;		None
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  1    wreg      void 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;Total ram usage:        0 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    4
  5423 ;; This function calls:
  5424 ;;		_I2C_Wait
  5425 ;; This function is called by:
  5426 ;;		_I2C_ReadFromSlave
  5427 ;;		_I2C_WriteToSlave
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text32
  5432  002500                     __ptext32:
  5433                           	opt stack 0
  5434  002500                     _I2C_Start:
  5435                           	opt stack 24
  5436                           
  5437                           ;i2c.c: 44: I2C_Wait();
  5438                           
  5439                           ;incstack = 0
  5440  002500  EC3D  F012         	call	_I2C_Wait	;wreg free
  5441                           
  5442                           ;i2c.c: 45: SSPCON2bits.SEN = 1;
  5443  002504  80C5               	bsf	4037,0,c	;volatile
  5444  002506  0012               	return		;funcret
  5445  002508                     __end_of_I2C_Start:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           plusw1	equ	0xFE3
  5458                           fsr1l	equ	0xFE1
  5459                           plusw2	equ	0xFDB
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _I2C_Wait *****************
  5463 ;; Defined at:
  5464 ;;		line 54 in file "i2c.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      void 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2, status,0
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;Total ram usage:        1 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:    3
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		_I2C_Start
  5489 ;;		_I2C_Stop
  5490 ;;		_I2C_WriteData
  5491 ;;		_I2C_WriteControl
  5492 ;;		_I2C_Read
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text33
  5497  00247A                     __ptext33:
  5498                           	opt stack 0
  5499  00247A                     _I2C_Wait:
  5500                           	opt stack 24
  5501                           
  5502                           ;i2c.c: 56: while((SSPCON2 & 0x1F) || (SSPSTAT & 0x04));
  5503                           
  5504                           ;incstack = 0
  5505  00247A  CFC5 F026          	movff	4037,??_I2C_Wait	;volatile
  5506  00247E  0E1F               	movlw	31
  5507  002480  1626               	andwf	??_I2C_Wait,f,c
  5508  002482  A4D8               	btfss	status,2,c
  5509  002484  D7FA               	goto	_I2C_Wait
  5510  002486  A4C7               	btfss	4039,2,c	;volatile
  5511  002488  0012               	return	
  5512  00248A  D7F7               	goto	_I2C_Wait
  5513  00248C                     __end_of_I2C_Wait:
  5514                           	opt stack 0
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           postinc0	equ	0xFEE
  5523                           wreg	equ	0xFE8
  5524                           postdec1	equ	0xFE5
  5525                           plusw1	equ	0xFE3
  5526                           fsr1l	equ	0xFE1
  5527                           plusw2	equ	0xFDB
  5528                           status	equ	0xFD8
  5529                           
  5530 ;; *************** function _WriteToDac *****************
  5531 ;; Defined at:
  5532 ;;		line 61 in file "spi.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  data            2   38[COMRAM] unsigned int 
  5535 ;;  frequency       2   40[COMRAM] unsigned int 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  output          2    4[BANK0 ] unsigned int 
  5538 ;;  command         2    0[BANK0 ] unsigned int 
  5539 ;;  low             1    3[BANK0 ] unsigned char 
  5540 ;;  high            1    2[BANK0 ] unsigned char 
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, status,2, status,0, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5550 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;Total ram usage:       12 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    4
  5557 ;; This function calls:
  5558 ;;		_WriteSpi
  5559 ;; This function is called by:
  5560 ;;		_main
  5561 ;;		_CheckCookDone
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text34
  5566  0020D8                     __ptext34:
  5567                           	opt stack 0
  5568  0020D8                     _WriteToDac:
  5569                           	opt stack 26
  5570                           
  5571                           ;spi.c: 62: TRISCbits.TRISC2 = 0;
  5572                           
  5573                           ;incstack = 0
  5574  0020D8  9494               	bcf	3988,2,c	;volatile
  5575                           
  5576                           ;spi.c: 64: PORTCbits.RC2 = 0;
  5577  0020DA  9482               	bcf	3970,2,c	;volatile
  5578                           
  5579                           ;spi.c: 66: uint16_t command = 0xF000;
  5580  0020DC  0EF0               	movlw	240
  5581  0020DE  0100               	movlb	0	; () banked
  5582  0020E0  6FDA               	movwf	(WriteToDac@command+1)& (0+255),b
  5583  0020E2  0E00               	movlw	0
  5584  0020E4  6FD9               	movwf	WriteToDac@command& (0+255),b
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;spi.c: 68: uint16_t output = command |(data<<2);
  5588  0020E6  C027  F02B         	movff	WriteToDac@data,??_WriteToDac
  5589  0020EA  C028  F02C         	movff	WriteToDac@data+1,??_WriteToDac+1
  5590  0020EE  90D8               	bcf	status,0,c
  5591  0020F0  362B               	rlcf	??_WriteToDac,f,c
  5592  0020F2  362C               	rlcf	??_WriteToDac+1,f,c
  5593  0020F4  90D8               	bcf	status,0,c
  5594  0020F6  362B               	rlcf	??_WriteToDac,f,c
  5595  0020F8  362C               	rlcf	??_WriteToDac+1,f,c
  5596  0020FA  51D9               	movf	WriteToDac@command& (0+255),w,b
  5597  0020FC  102B               	iorwf	??_WriteToDac,w,c
  5598  0020FE  6FDD               	movwf	WriteToDac@output& (0+255),b
  5599  002100  51DA               	movf	(WriteToDac@command+1)& (0+255),w,b
  5600  002102  102C               	iorwf	??_WriteToDac+1,w,c
  5601  002104  6FDE               	movwf	(WriteToDac@output+1)& (0+255),b
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;spi.c: 70: uint8_t high = (uint8_t)(output>>8);
  5605  002106  51DE               	movf	(WriteToDac@output+1)& (0+255),w,b
  5606  002108  6FDB               	movwf	WriteToDac@high& (0+255),b
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;spi.c: 72: uint8_t low = output & 0x00ff;
  5610  00210A  C0DD  F0DC         	movff	WriteToDac@output,WriteToDac@low
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;spi.c: 74: WriteSpi(high);
  5614  00210E  51DB               	movf	WriteToDac@high& (0+255),w,b
  5615  002110  EC5F  F012         	call	_WriteSpi
  5616                           
  5617                           ;spi.c: 75: WriteSpi(low);
  5618  002114  0100               	movlb	0	; () banked
  5619  002116  51DC               	movf	WriteToDac@low& (0+255),w,b
  5620  002118  EC5F  F012         	call	_WriteSpi
  5621                           
  5622                           ;spi.c: 77: PORTCbits.RC2 = 1;
  5623  00211C  8482               	bsf	3970,2,c	;volatile
  5624  00211E  0012               	return		;funcret
  5625  002120                     __end_of_WriteToDac:
  5626                           	opt stack 0
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           postinc0	equ	0xFEE
  5635                           wreg	equ	0xFE8
  5636                           postdec1	equ	0xFE5
  5637                           plusw1	equ	0xFE3
  5638                           fsr1l	equ	0xFE1
  5639                           plusw2	equ	0xFDB
  5640                           status	equ	0xFD8
  5641                           
  5642 ;; *************** function _WriteSpi *****************
  5643 ;; Defined at:
  5644 ;;		line 53 in file "spi.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;  data            1    wreg     unsigned char 
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;  data            1   37[COMRAM] unsigned char 
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  1    wreg      void 
  5651 ;; Registers used:
  5652 ;;		wreg
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5662 ;;Total ram usage:        1 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    3
  5665 ;; This function calls:
  5666 ;;		Nothing
  5667 ;; This function is called by:
  5668 ;;		_WriteToDac
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           	psect	text35
  5673  0024BE                     __ptext35:
  5674                           	opt stack 0
  5675  0024BE                     _WriteSpi:
  5676                           	opt stack 26
  5677                           
  5678                           ;incstack = 0
  5679                           ;WriteSpi@data stored from wreg
  5680  0024BE  6E26               	movwf	WriteSpi@data,c
  5681                           
  5682                           ;spi.c: 55: SSPBUF = data;
  5683  0024C0  C026  FFC9         	movff	WriteSpi@data,4041	;volatile
  5684  0024C4  A69E               	btfss	3998,3,c	;volatile
  5685  0024C6  D7FE               	goto	l281
  5686                           
  5687                           ;spi.c: 57: PIR1bits.SSPIF = 0;
  5688  0024C8  969E               	bcf	3998,3,c	;volatile
  5689  0024CA  0012               	return		;funcret
  5690  0024CC                     __end_of_WriteSpi:
  5691                           	opt stack 0
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           postdec1	equ	0xFE5
  5702                           plusw1	equ	0xFE3
  5703                           fsr1l	equ	0xFE1
  5704                           plusw2	equ	0xFDB
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _InitI2C_MasterMode *****************
  5708 ;; Defined at:
  5709 ;;		line 24 in file "i2c.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;		None
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      void 
  5716 ;; Registers used:
  5717 ;;		wreg, status,2
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;Total ram usage:        0 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    3
  5730 ;; This function calls:
  5731 ;;		Nothing
  5732 ;; This function is called by:
  5733 ;;		_main
  5734 ;;		_CheckCookDone
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           	psect	text36
  5739  002462                     __ptext36:
  5740                           	opt stack 0
  5741  002462                     _InitI2C_MasterMode:
  5742                           	opt stack 27
  5743                           
  5744                           ;i2c.c: 26: SSPCON1 = 0x28;
  5745                           
  5746                           ;incstack = 0
  5747  002462  0E28               	movlw	40
  5748  002464  6EC6               	movwf	4038,c	;volatile
  5749                           
  5750                           ;i2c.c: 29: SSPCON2 = 0x00;
  5751  002466  0E00               	movlw	0
  5752  002468  6EC5               	movwf	4037,c	;volatile
  5753                           
  5754                           ;i2c.c: 31: SSPADD = 0x09;
  5755  00246A  0E09               	movlw	9
  5756  00246C  6EC8               	movwf	4040,c	;volatile
  5757                           
  5758                           ;i2c.c: 33: SSPSTAT = 0x80;
  5759  00246E  0E80               	movlw	128
  5760  002470  6EC7               	movwf	4039,c	;volatile
  5761                           
  5762                           ;i2c.c: 35: TRISCbits.TRISC3 = 1;
  5763  002472  8694               	bsf	3988,3,c	;volatile
  5764                           
  5765                           ;i2c.c: 36: TRISCbits.TRISC4 = 1;
  5766  002474  8894               	bsf	3988,4,c	;volatile
  5767                           
  5768                           ;i2c.c: 39: SSPIF=0;
  5769  002476  969E               	bcf	3998,3,c	;volatile
  5770  002478  0012               	return		;funcret
  5771  00247A                     __end_of_InitI2C_MasterMode:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           postinc0	equ	0xFEE
  5781                           wreg	equ	0xFE8
  5782                           postdec1	equ	0xFE5
  5783                           plusw1	equ	0xFE3
  5784                           fsr1l	equ	0xFE1
  5785                           plusw2	equ	0xFDB
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _BakeTempSet *****************
  5789 ;; Defined at:
  5790 ;;		line 24 in file "bake_temp_set_controller.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  adcRead         2   14[BANK0 ] unsigned int 
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;  setBakeTempD   10    0[BANK1 ] unsigned char [10]
  5795 ;;  nextMenu        6   16[BANK1 ] unsigned char [6]
  5796 ;;  deliminator     6   10[BANK1 ] unsigned char [6]
  5797 ;;  bakeTempCont    3   22[BANK1 ] unsigned char [3]
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  2   14[BANK0 ] unsigned int 
  5800 ;; Registers used:
  5801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5807 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Totals:         0       4      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;Total ram usage:       29 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    5
  5814 ;; This function calls:
  5815 ;;		___lwmod
  5816 ;;		_lcd_char
  5817 ;;		_lcd_command
  5818 ;;		_lcd_string
  5819 ;;		_sprintf
  5820 ;; This function is called by:
  5821 ;;		_main
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           	psect	text37
  5826  0016D8                     __ptext37:
  5827                           	opt stack 0
  5828  0016D8                     _BakeTempSet:
  5829                           	opt stack 25
  5830                           
  5831                           ;bake_temp_set_controller.c: 28: lcd_command(0x80);
  5832                           
  5833                           ;incstack = 0
  5834  0016D8  0E80               	movlw	128
  5835  0016DA  EC53  F00C         	call	_lcd_command
  5836                           
  5837                           ;bake_temp_set_controller.c: 30: char setBakeTempDisplay[] = "Bake Temp";
  5838  0016DE  EE20  F095         	lfsr	2,BakeTempSet@F3127
  5839  0016E2  EE11  F000         	lfsr	1,BakeTempSet@setBakeTempDisplay
  5840  0016E6  0E09               	movlw	9
  5841  0016E8                     u2361:
  5842  0016E8  CFDB FFE3          	movff	plusw2,plusw1
  5843  0016EC  06E8               	decf	wreg,f,c
  5844  0016EE  E2FC               	bc	u2361
  5845                           
  5846                           ;bake_temp_set_controller.c: 31: lcd_string(setBakeTempDisplay);
  5847  0016F0  0E00               	movlw	low BakeTempSet@setBakeTempDisplay
  5848  0016F2  6E29               	movwf	lcd_string@x,c
  5849  0016F4  0E01               	movlw	high BakeTempSet@setBakeTempDisplay
  5850  0016F6  6E2A               	movwf	lcd_string@x+1,c
  5851  0016F8  EC48  F011         	call	_lcd_string	;wreg free
  5852                           
  5853                           ;bake_temp_set_controller.c: 33: lcd_command(0x8B);
  5854  0016FC  0E8B               	movlw	139
  5855  0016FE  EC53  F00C         	call	_lcd_command
  5856                           
  5857                           ;bake_temp_set_controller.c: 34: char deliminator[] = "|Back";
  5858  001702  EE20  F0BB         	lfsr	2,BakeTempSet@F3129
  5859  001706  EE11  F00A         	lfsr	1,BakeTempSet@deliminator
  5860  00170A  0E05               	movlw	5
  5861  00170C                     u2371:
  5862  00170C  CFDB FFE3          	movff	plusw2,plusw1
  5863  001710  06E8               	decf	wreg,f,c
  5864  001712  E2FC               	bc	u2371
  5865                           
  5866                           ;bake_temp_set_controller.c: 35: lcd_string(deliminator);
  5867  001714  0E0A               	movlw	low BakeTempSet@deliminator
  5868  001716  6E29               	movwf	lcd_string@x,c
  5869  001718  0E01               	movlw	high BakeTempSet@deliminator
  5870  00171A  6E2A               	movwf	lcd_string@x+1,c
  5871  00171C  EC48  F011         	call	_lcd_string	;wreg free
  5872                           
  5873                           ;bake_temp_set_controller.c: 37: lcd_command(0xCB);
  5874  001720  0ECB               	movlw	203
  5875  001722  EC53  F00C         	call	_lcd_command
  5876                           
  5877                           ;bake_temp_set_controller.c: 38: char nextMenu[] = "|Next";
  5878  001726  EE20  F0B5         	lfsr	2,BakeTempSet@F3131
  5879  00172A  EE11  F010         	lfsr	1,BakeTempSet@nextMenu
  5880  00172E  0E05               	movlw	5
  5881  001730                     u2381:
  5882  001730  CFDB FFE3          	movff	plusw2,plusw1
  5883  001734  06E8               	decf	wreg,f,c
  5884  001736  E2FC               	bc	u2381
  5885                           
  5886                           ;bake_temp_set_controller.c: 39: lcd_string(nextMenu);
  5887  001738  0E10               	movlw	low BakeTempSet@nextMenu
  5888  00173A  6E29               	movwf	lcd_string@x,c
  5889  00173C  0E01               	movlw	high BakeTempSet@nextMenu
  5890  00173E  6E2A               	movwf	lcd_string@x+1,c
  5891  001740  EC48  F011         	call	_lcd_string	;wreg free
  5892                           
  5893                           ;bake_temp_set_controller.c: 41: lcd_command(0xC8);
  5894  001744  0EC8               	movlw	200
  5895  001746  EC53  F00C         	call	_lcd_command
  5896                           
  5897                           ;bake_temp_set_controller.c: 42: lcd_char('F');
  5898  00174A  0E46               	movlw	70
  5899  00174C  ECFC  F00B         	call	_lcd_char
  5900                           
  5901                           ;bake_temp_set_controller.c: 44: lcd_command(0xC4);
  5902  001750  0EC4               	movlw	196
  5903  001752  EC53  F00C         	call	_lcd_command
  5904                           
  5905                           ;bake_temp_set_controller.c: 45: _delay((unsigned long)((30)*(8000000/4000.0)));
  5906  001756  0E4E               	movlw	78
  5907  001758  0100               	movlb	0	; () banked
  5908  00175A  6FE9               	movwf	??_BakeTempSet& (0+255),b
  5909  00175C  0EEB               	movlw	235
  5910  00175E                     u2657:
  5911  00175E  2EE8               	decfsz	wreg,f,c
  5912  001760  D7FE               	bra	u2657
  5913  001762  2FE9               	decfsz	??_BakeTempSet& (0+255),f,b
  5914  001764  D7FC               	bra	u2657
  5915                           
  5916                           ;bake_temp_set_controller.c: 46: tempAdcRead = adcRead/4;
  5917  001766  C0E7  F0E9         	movff	BakeTempSet@adcRead,??_BakeTempSet
  5918  00176A  C0E8  F0EA         	movff	BakeTempSet@adcRead+1,??_BakeTempSet+1
  5919  00176E  0100               	movlb	0	; () banked
  5920  001770  90D8               	bcf	status,0,c
  5921  001772  33EA               	rrcf	(??_BakeTempSet+1)& (0+255),f,b
  5922  001774  33E9               	rrcf	??_BakeTempSet& (0+255),f,b
  5923  001776  90D8               	bcf	status,0,c
  5924  001778  33EA               	rrcf	(??_BakeTempSet+1)& (0+255),f,b
  5925  00177A  33E9               	rrcf	??_BakeTempSet& (0+255),f,b
  5926  00177C  C0E9  F035         	movff	??_BakeTempSet,_tempAdcRead	;volatile
  5927  001780  C0EA  F036         	movff	??_BakeTempSet+1,_tempAdcRead+1	;volatile
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;bake_temp_set_controller.c: 47: tempAdcRead += 100;
  5931  001784  0E64               	movlw	100
  5932  001786  2635               	addwf	_tempAdcRead,f,c	;volatile
  5933  001788  0E00               	movlw	0
  5934  00178A  2236               	addwfc	_tempAdcRead+1,f,c	;volatile
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;bake_temp_set_controller.c: 48: getModOfTemp = tempAdcRead % 5;
  5938  00178C  C035  F02D         	movff	_tempAdcRead,___lwmod@dividend	;volatile
  5939  001790  C036  F02E         	movff	_tempAdcRead+1,___lwmod@dividend+1	;volatile
  5940  001794  0E00               	movlw	0
  5941  001796  6E30               	movwf	___lwmod@divisor+1,c
  5942  001798  0E05               	movlw	5
  5943  00179A  6E2F               	movwf	___lwmod@divisor,c
  5944  00179C  EC90  F010         	call	___lwmod	;wreg free
  5945  0017A0  C02D  F033         	movff	?___lwmod,_getModOfTemp	;volatile
  5946  0017A4  C02E  F034         	movff	?___lwmod+1,_getModOfTemp+1	;volatile
  5947                           
  5948                           ;bake_temp_set_controller.c: 49: tempAdcRead = tempAdcRead - getModOfTemp;
  5949  0017A8  C033  F0E9         	movff	_getModOfTemp,??_BakeTempSet	;volatile
  5950  0017AC  C034  F0EA         	movff	_getModOfTemp+1,??_BakeTempSet+1	;volatile
  5951  0017B0  0100               	movlb	0	; () banked
  5952  0017B2  1FE9               	comf	??_BakeTempSet& (0+255),f,b
  5953  0017B4  1FEA               	comf	(??_BakeTempSet+1)& (0+255),f,b
  5954  0017B6  4BE9               	infsnz	??_BakeTempSet& (0+255),f,b
  5955  0017B8  2BEA               	incf	(??_BakeTempSet+1)& (0+255),f,b
  5956  0017BA  5035               	movf	_tempAdcRead,w,c	;volatile
  5957  0017BC  25E9               	addwf	??_BakeTempSet& (0+255),w,b
  5958  0017BE  6E35               	movwf	_tempAdcRead,c	;volatile
  5959  0017C0  5036               	movf	_tempAdcRead+1,w,c	;volatile
  5960  0017C2  21EA               	addwfc	(??_BakeTempSet+1)& (0+255),w,b
  5961  0017C4  6E36               	movwf	_tempAdcRead+1,c	;volatile
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;bake_temp_set_controller.c: 52: char bakeTempContainer[3];
  5965                           ;bake_temp_set_controller.c: 53: sprintf(bakeTempContainer, "%u", tempAdcRead);
  5966  0017C6  0E16               	movlw	low BakeTempSet@bakeTempContainer
  5967  0017C8  6FDA               	movwf	sprintf@sp& (0+255),b
  5968  0017CA  0E01               	movlw	high BakeTempSet@bakeTempContainer
  5969  0017CC  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  5970  0017CE  0E0B               	movlw	low STR_1
  5971  0017D0  6FDC               	movwf	sprintf@f& (0+255),b
  5972  0017D2  0E10               	movlw	high STR_1
  5973  0017D4  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  5974  0017D6  C035  F0DE         	movff	_tempAdcRead,?_sprintf+4	;volatile
  5975  0017DA  C036  F0DF         	movff	_tempAdcRead+1,?_sprintf+5	;volatile
  5976  0017DE  ECDA  F00A         	call	_sprintf	;wreg free
  5977                           
  5978                           ;bake_temp_set_controller.c: 54: lcd_string(bakeTempContainer);
  5979  0017E2  0E16               	movlw	low BakeTempSet@bakeTempContainer
  5980  0017E4  6E29               	movwf	lcd_string@x,c
  5981  0017E6  0E01               	movlw	high BakeTempSet@bakeTempContainer
  5982  0017E8  6E2A               	movwf	lcd_string@x+1,c
  5983  0017EA  EC48  F011         	call	_lcd_string	;wreg free
  5984                           
  5985                           ;bake_temp_set_controller.c: 56: return tempAdcRead;
  5986  0017EE  C035  F0E7         	movff	_tempAdcRead,?_BakeTempSet	;volatile
  5987  0017F2  C036  F0E8         	movff	_tempAdcRead+1,?_BakeTempSet+1	;volatile
  5988  0017F6  0012               	return	
  5989  0017F8                     __end_of_BakeTempSet:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           postdec1	equ	0xFE5
  6001                           plusw1	equ	0xFE3
  6002                           fsr1l	equ	0xFE1
  6003                           plusw2	equ	0xFDB
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _sprintf *****************
  6007 ;; Defined at:
  6008 ;;		line 492 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  sp              2    1[BANK0 ] PTR unsigned char 
  6011 ;;		 -> CookTimeDisplay@cookTimeContainer_1314(2), CookTimeDisplay@cookTimeContainer(1), BakeTempSet@bakeTempContainer(3
      +), ReadAndDisplaySecFromRTC@secondContainerDisplay_1263(2), 
  6012 ;;		 -> ReadAndDisplaySecFromRTC@secondContainerDisplay(1), ReadAndDisplayHrFromRTC@hourContainerDisplay_1257(2), ReadAn
      +dDisplayHrFromRTC@hourContainerDisplay(1), ReadAndDisplayMinFromRTC@minContainerDisplay_1251(2), 
  6013 ;;		 -> ReadAndDisplayMinFromRTC@minContainerDisplay(1), TimeSetting@minContainer_1233(2), TimeSetting@minContainer(1), 
      +TimeSetting@hourContainer_1229(2), 
  6014 ;;		 -> TimeSetting@hourContainer(1), 
  6015 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  6016 ;;		 -> STR_13(3), STR_12(3), STR_11(3), STR_10(3), 
  6017 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(3), 
  6018 ;;		 -> STR_5(3), STR_4(3), STR_3(3), STR_2(3), 
  6019 ;;		 -> STR_1(3), 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  tmpval          4    0        struct .
  6022 ;;  cp              3    0        PTR const unsigned char 
  6023 ;;  val             2   10[BANK0 ] unsigned int 
  6024 ;;  ap              2    8[BANK0 ] PTR void [1]
  6025 ;;		 -> ?_sprintf(2), 
  6026 ;;  len             2    0        unsigned int 
  6027 ;;  c               1   13[BANK0 ] char 
  6028 ;;  prec            1   12[BANK0 ] char 
  6029 ;;  flag            1    7[BANK0 ] unsigned char 
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  2    1[BANK0 ] int 
  6032 ;; Registers used:
  6033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6039 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6042 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;Total ram usage:       13 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:    4
  6046 ;; This function calls:
  6047 ;;		___lwdiv
  6048 ;;		___lwmod
  6049 ;; This function is called by:
  6050 ;;		_TimeSetting
  6051 ;;		_ReadAndDisplayMinFromRTC
  6052 ;;		_ReadAndDisplayHrFromRTC
  6053 ;;		_ReadAndDisplaySecFromRTC
  6054 ;;		_BakeTempSet
  6055 ;;		_CookTimeDisplay
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           	psect	text38
  6060  0015B4                     __ptext38:
  6061                           	opt stack 0
  6062  0015B4                     _sprintf:
  6063                           	opt stack 25
  6064                           
  6065                           ;doprnt.c: 494: va_list ap;
  6066                           ;doprnt.c: 499: signed char c;
  6067                           ;doprnt.c: 506: signed char prec;
  6068                           ;doprnt.c: 508: unsigned char flag;
  6069                           ;doprnt.c: 523: union {
  6070                           ;doprnt.c: 524: unsigned long vd;
  6071                           ;doprnt.c: 525: double integ;
  6072                           ;doprnt.c: 526: } tmpval;
  6073                           ;doprnt.c: 528: unsigned int val;
  6074                           ;doprnt.c: 529: unsigned len;
  6075                           ;doprnt.c: 530: const char * cp;
  6076                           ;doprnt.c: 533: *ap = __va_start();
  6077                           
  6078                           ;incstack = 0
  6079  0015B4  0EDE               	movlw	low (?_sprintf+4)
  6080  0015B6  0100               	movlb	0	; () banked
  6081  0015B8  6FE1               	movwf	sprintf@ap& (0+255),b
  6082  0015BA  0E00               	movlw	high (?_sprintf+4)
  6083  0015BC  6FE2               	movwf	(sprintf@ap+1)& (0+255),b
  6084                           
  6085                           ;doprnt.c: 536: while(c = *f++) {
  6086  0015BE  D079               	goto	u2010
  6087  0015C0                     
  6088                           ; BSR set to: 0
  6089                           ;doprnt.c: 538: if(c != '%')
  6090                           
  6091                           ; BSR set to: 0
  6092  0015C0  0E25               	movlw	37
  6093  0015C2  19E6               	xorwf	sprintf@c& (0+255),w,b
  6094  0015C4  B4D8               	btfsc	status,2,c
  6095  0015C6  D009               	goto	l516
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;doprnt.c: 540: {
  6099                           ;doprnt.c: 541: ((*sp++ = (c)));
  6100  0015C8  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  6101  0015CC  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  6102  0015D0  C0E6  FFDF         	movff	sprintf@c,indf2
  6103                           
  6104                           ; BSR set to: 0
  6105  0015D4  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  6106  0015D6  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  6107                           
  6108                           ;doprnt.c: 542: continue;
  6109  0015D8  D06C               	goto	u2010
  6110  0015DA                     l516:
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;doprnt.c: 543: }
  6114                           ;doprnt.c: 548: flag = 0;
  6115                           
  6116                           ; BSR set to: 0
  6117  0015DA  0E00               	movlw	0
  6118  0015DC  6FE0               	movwf	sprintf@flag& (0+255),b
  6119                           
  6120                           ;doprnt.c: 635: switch(c = *f++) {
  6121  0015DE  D003               	goto	l517
  6122  0015E0                     
  6123                           ; BSR set to: 0
  6124                           ;doprnt.c: 818: flag |= 0xC0;
  6125                           
  6126                           ; BSR set to: 0
  6127  0015E0  0EC0               	movlw	192
  6128  0015E2  13E0               	iorwf	sprintf@flag& (0+255),f,b
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;doprnt.c: 822: }
  6132                           
  6133                           ;doprnt.c: 819: break;
  6134  0015E4  D011               	goto	l522
  6135  0015E6                     l517:
  6136                           
  6137                           ; BSR set to: 0
  6138                           
  6139                           ; BSR set to: 0
  6140  0015E6  C0DC  FFF6         	movff	sprintf@f,tblptrl
  6141  0015EA  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  6142  0015EE  4BDC               	infsnz	sprintf@f& (0+255),f,b
  6143  0015F0  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  6144  0015F2                     	if	0	;tblptru may be non-zero
  6145  0015F2                     	endif
  6146  0015F2                     	if	0	;tblptru may be non-zero
  6147  0015F2                     	endif
  6148  0015F2  0008               	tblrd		*
  6149  0015F4  CFF5 F0E6          	movff	tablat,sprintf@c
  6150  0015F8  51E6               	movf	sprintf@c& (0+255),w,b
  6151                           
  6152                           ; Switch size 1, requested type "space"
  6153                           ; Number of cases is 2, Range of values is 0 to 117
  6154                           ; switch strategies available:
  6155                           ; Name         Instructions Cycles
  6156                           ; simple_byte            7     4 (average)
  6157                           ;	Chosen strategy is simple_byte
  6158  0015FA  0A00               	xorlw	0	; case 0
  6159  0015FC  B4D8               	btfsc	status,2,c
  6160  0015FE  D065               	goto	u2020
  6161  001600  0A75               	xorlw	117	; case 117
  6162  001602  B4D8               	btfsc	status,2,c
  6163  001604  D7ED               	goto	l521
  6164  001606  D055               	goto	u2010
  6165  001608                     l522:
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;doprnt.c: 1273: {
  6169                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6170                           
  6171                           ; BSR set to: 0
  6172  001608  C0E1  FFD9         	movff	sprintf@ap,fsr2l
  6173  00160C  C0E2  FFDA         	movff	sprintf@ap+1,fsr2h
  6174  001610  CFDE F0E3          	movff	postinc2,sprintf@val
  6175  001614  CFDD F0E4          	movff	postdec2,sprintf@val+1
  6176                           
  6177                           ; BSR set to: 0
  6178  001618  0E02               	movlw	2
  6179  00161A  27E1               	addwf	sprintf@ap& (0+255),f,b
  6180  00161C  0E00               	movlw	0
  6181  00161E  23E2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;doprnt.c: 1287: }
  6185                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6186  001620  0E01               	movlw	1
  6187  001622  6FE6               	movwf	sprintf@c& (0+255),b
  6188  001624  D011               	goto	l3434
  6189  001626                     
  6190                           ; BSR set to: 0
  6191                           ;doprnt.c: 1306: if(val < dpowers[c])
  6192                           
  6193                           ; BSR set to: 0
  6194  001626  51E6               	movf	sprintf@c& (0+255),w,b
  6195  001628  0D02               	mullw	2
  6196  00162A  0E01               	movlw	low _dpowers
  6197  00162C  24F3               	addwf	prodl,w,c
  6198  00162E  6EF6               	movwf	tblptrl,c
  6199  001630  0E10               	movlw	high _dpowers
  6200  001632  20F4               	addwfc	prodh,w,c
  6201  001634  6EF7               	movwf	tblptrh,c
  6202  001636                     	if	0	;There are less than 3 active tblptr bytes
  6203  001636                     	endif
  6204  001636  0009               	tblrd		*+
  6205  001638  50F5               	movf	tablat,w,c
  6206  00163A  5DE3               	subwf	sprintf@val& (0+255),w,b
  6207  00163C  0009               	tblrd		*+
  6208  00163E  50F5               	movf	tablat,w,c
  6209  001640  59E4               	subwfb	(sprintf@val+1)& (0+255),w,b
  6210  001642  A0D8               	btfss	status,0,c
  6211  001644  D005               	goto	u2000
  6212                           
  6213                           ; BSR set to: 0
  6214                           
  6215                           ; BSR set to: 0
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;doprnt.c: 1307: break;
  6219  001646  2BE6               	incf	sprintf@c& (0+255),f,b
  6220  001648                     l3434:
  6221                           
  6222                           ; BSR set to: 0
  6223  001648  0E05               	movlw	5
  6224  00164A  19E6               	xorwf	sprintf@c& (0+255),w,b
  6225  00164C  A4D8               	btfss	status,2,c
  6226  00164E  D7EB               	goto	l523
  6227  001650                     u2000:
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;doprnt.c: 1422: {
  6231                           ;doprnt.c: 1469: }
  6232                           ;doprnt.c: 1472: prec = c;
  6233  001650  C0E6  F0E5         	movff	sprintf@c,sprintf@prec
  6234                           
  6235                           ;doprnt.c: 1474: while(prec--) {
  6236  001654  D02A               	goto	l526
  6237  001656                     
  6238                           ; BSR set to: 0
  6239                           ;doprnt.c: 1478: {
  6240                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6241                           
  6242                           ; BSR set to: 0
  6243  001656  51E5               	movf	sprintf@prec& (0+255),w,b
  6244  001658  0D02               	mullw	2
  6245  00165A  0E01               	movlw	low _dpowers
  6246  00165C  24F3               	addwf	prodl,w,c
  6247  00165E  6EF6               	movwf	tblptrl,c
  6248  001660  0E10               	movlw	high _dpowers
  6249  001662  20F4               	addwfc	prodh,w,c
  6250  001664  6EF7               	movwf	tblptrh,c
  6251  001666                     	if	0	;There are less than 3 active tblptr bytes
  6252  001666                     	endif
  6253  001666  0009               	tblrd		*+
  6254  001668  CFF5 F028          	movff	tablat,___lwdiv@divisor
  6255  00166C  000A               	tblrd		*-
  6256  00166E  CFF5 F029          	movff	tablat,___lwdiv@divisor+1
  6257  001672  C0E3  F026         	movff	sprintf@val,___lwdiv@dividend
  6258  001676  C0E4  F027         	movff	sprintf@val+1,___lwdiv@dividend+1
  6259  00167A  EC1A  F010         	call	___lwdiv	;wreg free
  6260  00167E  C026  F02D         	movff	?___lwdiv,___lwmod@dividend
  6261  001682  C027  F02E         	movff	?___lwdiv+1,___lwmod@dividend+1
  6262  001686  0E00               	movlw	0
  6263  001688  6E30               	movwf	___lwmod@divisor+1,c
  6264  00168A  0E0A               	movlw	10
  6265  00168C  6E2F               	movwf	___lwmod@divisor,c
  6266  00168E  EC90  F010         	call	___lwmod	;wreg free
  6267  001692  502D               	movf	?___lwmod,w,c
  6268  001694  0F30               	addlw	48
  6269  001696  0100               	movlb	0	; () banked
  6270  001698  6FE6               	movwf	sprintf@c& (0+255),b
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;doprnt.c: 1523: }
  6274                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6275  00169A  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  6276  00169E  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  6277  0016A2  C0E6  FFDF         	movff	sprintf@c,indf2
  6278                           
  6279                           ; BSR set to: 0
  6280  0016A6  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  6281  0016A8  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  6282  0016AA                     l526:
  6283                           
  6284                           ; BSR set to: 0
  6285                           
  6286                           ; BSR set to: 0
  6287  0016AA  07E5               	decf	sprintf@prec& (0+255),f,b
  6288  0016AC  29E5               	incf	sprintf@prec& (0+255),w,b
  6289  0016AE  A4D8               	btfss	status,2,c
  6290  0016B0  D7D2               	goto	l527
  6291  0016B2                     u2010:
  6292                           
  6293                           ; BSR set to: 0
  6294                           
  6295                           ; BSR set to: 0
  6296                           
  6297                           ; BSR set to: 0
  6298  0016B2  C0DC  FFF6         	movff	sprintf@f,tblptrl
  6299  0016B6  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  6300  0016BA  4BDC               	infsnz	sprintf@f& (0+255),f,b
  6301  0016BC  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  6302  0016BE                     	if	0	;tblptru may be non-zero
  6303  0016BE                     	endif
  6304  0016BE                     	if	0	;tblptru may be non-zero
  6305  0016BE                     	endif
  6306  0016BE  0008               	tblrd		*
  6307  0016C0  CFF5 F0E6          	movff	tablat,sprintf@c
  6308  0016C4  51E6               	movf	sprintf@c& (0+255),w,b
  6309  0016C6  A4D8               	btfss	status,2,c
  6310  0016C8  D77B               	goto	l515
  6311  0016CA                     u2020:
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;doprnt.c: 1538: *sp = 0;
  6315                           
  6316                           ; BSR set to: 0
  6317                           
  6318                           ;doprnt.c: 1525: }
  6319                           ;doprnt.c: 1533: }
  6320                           ;doprnt.c: 1535: alldone:
  6321                           
  6322                           ; BSR set to: 0
  6323  0016CA  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  6324  0016CE  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  6325  0016D2  0E00               	movlw	0
  6326  0016D4  6EDF               	movwf	indf2,c
  6327  0016D6  0012               	return	
  6328  0016D8                     __end_of_sprintf:
  6329                           	opt stack 0
  6330                           tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           intcon	equ	0xFF2
  6337                           postinc0	equ	0xFEE
  6338                           wreg	equ	0xFE8
  6339                           postdec1	equ	0xFE5
  6340                           plusw1	equ	0xFE3
  6341                           fsr1l	equ	0xFE1
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           plusw2	equ	0xFDB
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350 ;; *************** function ___lwmod *****************
  6351 ;; Defined at:
  6352 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  dividend        2   44[COMRAM] unsigned int 
  6355 ;;  divisor         2   46[COMRAM] unsigned int 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  counter         1    0[BANK0 ] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  2   44[COMRAM] unsigned int 
  6360 ;; Registers used:
  6361 ;;		wreg, status,2, status,0
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;Total ram usage:        5 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    3
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_BakeTempSet
  6378 ;;		_sprintf
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           	psect	text39
  6383  002120                     __ptext39:
  6384                           	opt stack 0
  6385  002120                     ___lwmod:
  6386                           	opt stack 25
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;incstack = 0
  6390  002120  502F               	movf	___lwmod@divisor,w,c
  6391  002122  1030               	iorwf	___lwmod@divisor+1,w,c
  6392  002124  B4D8               	btfsc	status,2,c
  6393  002126  D019               	goto	l949
  6394  002128  0E01               	movlw	1
  6395  00212A  0100               	movlb	0	; () banked
  6396  00212C  6FD9               	movwf	___lwmod@counter& (0+255),b
  6397  00212E  D004               	goto	l944
  6398  002130                     
  6399                           ; BSR set to: 0
  6400                           
  6401                           ; BSR set to: 0
  6402  002130  90D8               	bcf	status,0,c
  6403  002132  362F               	rlcf	___lwmod@divisor,f,c
  6404  002134  3630               	rlcf	___lwmod@divisor+1,f,c
  6405  002136  2BD9               	incf	___lwmod@counter& (0+255),f,b
  6406  002138                     l944:
  6407                           
  6408                           ; BSR set to: 0
  6409                           
  6410                           ; BSR set to: 0
  6411  002138  AE30               	btfss	___lwmod@divisor+1,7,c
  6412  00213A  D7FA               	goto	l945
  6413  00213C                     u1930:
  6414                           
  6415                           ; BSR set to: 0
  6416                           
  6417                           ; BSR set to: 0
  6418                           
  6419                           ; BSR set to: 0
  6420  00213C  502F               	movf	___lwmod@divisor,w,c
  6421  00213E  5C2D               	subwf	___lwmod@dividend,w,c
  6422  002140  5030               	movf	___lwmod@divisor+1,w,c
  6423  002142  582E               	subwfb	___lwmod@dividend+1,w,c
  6424  002144  A0D8               	btfss	status,0,c
  6425  002146  D004               	goto	l948
  6426                           
  6427                           ; BSR set to: 0
  6428  002148  502F               	movf	___lwmod@divisor,w,c
  6429  00214A  5E2D               	subwf	___lwmod@dividend,f,c
  6430  00214C  5030               	movf	___lwmod@divisor+1,w,c
  6431  00214E  5A2E               	subwfb	___lwmod@dividend+1,f,c
  6432  002150                     l948:
  6433                           
  6434                           ; BSR set to: 0
  6435                           
  6436                           ; BSR set to: 0
  6437  002150  90D8               	bcf	status,0,c
  6438  002152  3230               	rrcf	___lwmod@divisor+1,f,c
  6439  002154  322F               	rrcf	___lwmod@divisor,f,c
  6440                           
  6441                           ; BSR set to: 0
  6442  002156  2FD9               	decfsz	___lwmod@counter& (0+255),f,b
  6443  002158  D7F1               	goto	u1930
  6444  00215A                     l949:
  6445                           
  6446                           ; BSR set to: 0
  6447  00215A  C02D  F02D         	movff	___lwmod@dividend,?___lwmod
  6448  00215E  C02E  F02E         	movff	___lwmod@dividend+1,?___lwmod+1
  6449  002162  0012               	return		;funcret
  6450  002164                     __end_of___lwmod:
  6451                           	opt stack 0
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodh	equ	0xFF4
  6457                           prodl	equ	0xFF3
  6458                           intcon	equ	0xFF2
  6459                           postinc0	equ	0xFEE
  6460                           wreg	equ	0xFE8
  6461                           postdec1	equ	0xFE5
  6462                           plusw1	equ	0xFE3
  6463                           fsr1l	equ	0xFE1
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           plusw2	equ	0xFDB
  6468                           fsr2h	equ	0xFDA
  6469                           fsr2l	equ	0xFD9
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function ___lwdiv *****************
  6473 ;; Defined at:
  6474 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;  dividend        2   37[COMRAM] unsigned int 
  6477 ;;  divisor         2   39[COMRAM] unsigned int 
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  quotient        2   42[COMRAM] unsigned int 
  6480 ;;  counter         1   41[COMRAM] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  2   37[COMRAM] unsigned int 
  6483 ;; Registers used:
  6484 ;;		wreg, status,2, status,0
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;Total ram usage:        7 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    3
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_TimeSetting
  6501 ;;		_CookTimeDisplay
  6502 ;;		_sprintf
  6503 ;; This function uses a non-reentrant model
  6504 ;;
  6505                           
  6506                           	psect	text40
  6507  002034                     __ptext40:
  6508                           	opt stack 0
  6509  002034                     ___lwdiv:
  6510                           	opt stack 25
  6511                           
  6512                           ;incstack = 0
  6513  002034  0E00               	movlw	0
  6514  002036  6E2C               	movwf	___lwdiv@quotient+1,c
  6515  002038  0E00               	movlw	0
  6516  00203A  6E2B               	movwf	___lwdiv@quotient,c
  6517  00203C  5028               	movf	___lwdiv@divisor,w,c
  6518  00203E  1029               	iorwf	___lwdiv@divisor+1,w,c
  6519  002040  B4D8               	btfsc	status,2,c
  6520  002042  D01C               	goto	l939
  6521  002044  0E01               	movlw	1
  6522  002046  6E2A               	movwf	___lwdiv@counter,c
  6523  002048  D004               	goto	l934
  6524  00204A  90D8               	bcf	status,0,c
  6525  00204C  3628               	rlcf	___lwdiv@divisor,f,c
  6526  00204E  3629               	rlcf	___lwdiv@divisor+1,f,c
  6527  002050  2A2A               	incf	___lwdiv@counter,f,c
  6528  002052                     l934:
  6529  002052  AE29               	btfss	___lwdiv@divisor+1,7,c
  6530  002054  D7FA               	goto	l935
  6531  002056                     u1900:
  6532  002056  90D8               	bcf	status,0,c
  6533  002058  362B               	rlcf	___lwdiv@quotient,f,c
  6534  00205A  362C               	rlcf	___lwdiv@quotient+1,f,c
  6535  00205C  5028               	movf	___lwdiv@divisor,w,c
  6536  00205E  5C26               	subwf	___lwdiv@dividend,w,c
  6537  002060  5029               	movf	___lwdiv@divisor+1,w,c
  6538  002062  5827               	subwfb	___lwdiv@dividend+1,w,c
  6539  002064  A0D8               	btfss	status,0,c
  6540  002066  D005               	goto	l938
  6541  002068  5028               	movf	___lwdiv@divisor,w,c
  6542  00206A  5E26               	subwf	___lwdiv@dividend,f,c
  6543  00206C  5029               	movf	___lwdiv@divisor+1,w,c
  6544  00206E  5A27               	subwfb	___lwdiv@dividend+1,f,c
  6545  002070  802B               	bsf	___lwdiv@quotient,0,c
  6546  002072                     l938:
  6547  002072  90D8               	bcf	status,0,c
  6548  002074  3229               	rrcf	___lwdiv@divisor+1,f,c
  6549  002076  3228               	rrcf	___lwdiv@divisor,f,c
  6550  002078  2E2A               	decfsz	___lwdiv@counter,f,c
  6551  00207A  D7ED               	goto	u1900
  6552  00207C                     l939:
  6553  00207C  C02B  F026         	movff	___lwdiv@quotient,?___lwdiv
  6554  002080  C02C  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6555  002084  0012               	return		;funcret
  6556  002086                     __end_of___lwdiv:
  6557                           	opt stack 0
  6558                           tblptru	equ	0xFF8
  6559                           tblptrh	equ	0xFF7
  6560                           tblptrl	equ	0xFF6
  6561                           tablat	equ	0xFF5
  6562                           prodh	equ	0xFF4
  6563                           prodl	equ	0xFF3
  6564                           intcon	equ	0xFF2
  6565                           postinc0	equ	0xFEE
  6566                           wreg	equ	0xFE8
  6567                           postdec1	equ	0xFE5
  6568                           plusw1	equ	0xFE3
  6569                           fsr1l	equ	0xFE1
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           plusw2	equ	0xFDB
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function _lcd_string *****************
  6579 ;; Defined at:
  6580 ;;		line 16 in file "lcd.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  x               2   40[COMRAM] PTR unsigned char 
  6583 ;;		 -> CookTimeDisplay@cookTimeContainer_1314(2), CookTimeDisplay@cookTimeContainer(1), CookTimeDisplay@minDisplay(4), 
      +CookTimeDisplay@nextMenu(7), 
  6584 ;;		 -> CookTimeDisplay@backMenu(6), CookTimeDisplay@setBakeTimeDisplay(10), BakeTempSet@bakeTempContainer(3), BakeTempS
      +et@nextMenu(6), 
  6585 ;;		 -> BakeTempSet@deliminator(6), BakeTempSet@setBakeTempDisplay(10), ReadRTCAndDisplay@bakeT(6), ReadRTCAndDisplay@de
      +liminator(2), 
  6586 ;;		 -> ReadRTCAndDisplay@time(5), ReadAndDisplaySecFromRTC@secondContainerDisplay_1263(2), ReadAndDisplaySecFromRTC@sec
      +ondContainerDisplay(1), ReadAndDisplayHrFromRTC@hourContainerDisplay_1257(2), 
  6587 ;;		 -> ReadAndDisplayHrFromRTC@hourContainerDisplay(1), ReadAndDisplayMinFromRTC@minContainerDisplay_1251(2), ReadAndDi
      +splayMinFromRTC@minContainerDisplay(1), TimeSetting@minContainer_1233(2), 
  6588 ;;		 -> TimeSetting@minContainer(1), TimeSetting@hourContainer_1229(2), TimeSetting@hourContainer(1), TimeSetting@next(6
      +), 
  6589 ;;		 -> TimeSetting@move(6), TimeSetting@setTimeDisplay(9), CheckCookDone@clear(6), CheckCookDone@bakeDone(11), 
  6590 ;;		 -> main@cancel(7), main@baking(10), 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  i               2   42[COMRAM] int 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      void 
  6595 ;; Registers used:
  6596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : 0/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6602 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6605 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;Total ram usage:        4 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    4
  6609 ;; This function calls:
  6610 ;;		_lcd_char
  6611 ;; This function is called by:
  6612 ;;		_main
  6613 ;;		_CheckCookDone
  6614 ;;		_TimeSetting
  6615 ;;		_ReadAndDisplayMinFromRTC
  6616 ;;		_ReadAndDisplayHrFromRTC
  6617 ;;		_ReadAndDisplaySecFromRTC
  6618 ;;		_ReadRTCAndDisplay
  6619 ;;		_BakeTempSet
  6620 ;;		_CookTimeDisplay
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text41
  6625  002290                     __ptext41:
  6626                           	opt stack 0
  6627  002290                     _lcd_string:
  6628                           	opt stack 26
  6629                           
  6630                           ;lcd.c: 18: int i = 0;
  6631                           
  6632                           ;incstack = 0
  6633  002290  0E00               	movlw	0
  6634  002292  6E2C               	movwf	lcd_string@i+1,c
  6635  002294  0E00               	movlw	0
  6636  002296  6E2B               	movwf	lcd_string@i,c
  6637                           
  6638                           ;lcd.c: 19: while(x[i] != 0)
  6639  002298  D00B               	goto	l299
  6640  00229A                     
  6641                           ;lcd.c: 20: {
  6642                           ;lcd.c: 21: lcd_char(x[i]);
  6643  00229A  502B               	movf	lcd_string@i,w,c
  6644  00229C  2429               	addwf	lcd_string@x,w,c
  6645  00229E  6ED9               	movwf	fsr2l,c
  6646  0022A0  502C               	movf	lcd_string@i+1,w,c
  6647  0022A2  202A               	addwfc	lcd_string@x+1,w,c
  6648  0022A4  6EDA               	movwf	fsr2h,c
  6649  0022A6  50DF               	movf	indf2,w,c
  6650  0022A8  ECFC  F00B         	call	_lcd_char
  6651                           
  6652                           ;lcd.c: 22: i++;
  6653  0022AC  4A2B               	infsnz	lcd_string@i,f,c
  6654  0022AE  2A2C               	incf	lcd_string@i+1,f,c
  6655  0022B0                     l299:
  6656  0022B0  502B               	movf	lcd_string@i,w,c
  6657  0022B2  2429               	addwf	lcd_string@x,w,c
  6658  0022B4  6ED9               	movwf	fsr2l,c
  6659  0022B6  502C               	movf	lcd_string@i+1,w,c
  6660  0022B8  202A               	addwfc	lcd_string@x+1,w,c
  6661  0022BA  6EDA               	movwf	fsr2h,c
  6662  0022BC  50DF               	movf	indf2,w,c
  6663  0022BE  B4D8               	btfsc	status,2,c
  6664  0022C0  0012               	return	
  6665  0022C2  D7EB               	goto	l300
  6666  0022C4                     __end_of_lcd_string:
  6667                           	opt stack 0
  6668                           tblptru	equ	0xFF8
  6669                           tblptrh	equ	0xFF7
  6670                           tblptrl	equ	0xFF6
  6671                           tablat	equ	0xFF5
  6672                           prodh	equ	0xFF4
  6673                           prodl	equ	0xFF3
  6674                           intcon	equ	0xFF2
  6675                           postinc0	equ	0xFEE
  6676                           wreg	equ	0xFE8
  6677                           postdec1	equ	0xFE5
  6678                           plusw1	equ	0xFE3
  6679                           fsr1l	equ	0xFE1
  6680                           indf2	equ	0xFDF
  6681                           postinc2	equ	0xFDE
  6682                           postdec2	equ	0xFDD
  6683                           plusw2	equ	0xFDB
  6684                           fsr2h	equ	0xFDA
  6685                           fsr2l	equ	0xFD9
  6686                           status	equ	0xFD8
  6687                           
  6688 ;; *************** function _lcd_char *****************
  6689 ;; Defined at:
  6690 ;;		line 86 in file "lcd.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;  x               1    wreg     unsigned char 
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;  x               1   39[COMRAM] unsigned char 
  6695 ;;  temp            1   38[COMRAM] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;                  1    wreg      void 
  6698 ;; Registers used:
  6699 ;;		wreg, status,2, status,0, cstack
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6708 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;Total ram usage:        3 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    3
  6712 ;; This function calls:
  6713 ;;		Nothing
  6714 ;; This function is called by:
  6715 ;;		_lcd_string
  6716 ;;		_TimeSetting
  6717 ;;		_ReadAndDisplayMinFromRTC
  6718 ;;		_ReadAndDisplayHrFromRTC
  6719 ;;		_ReadAndDisplaySecFromRTC
  6720 ;;		_ReadRTCAndDisplay
  6721 ;;		_BakeTempSet
  6722 ;;		_CookTimeDisplay
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	text42
  6727  0017F8                     __ptext42:
  6728                           	opt stack 0
  6729  0017F8                     _lcd_char:
  6730                           	opt stack 26
  6731                           
  6732                           ;incstack = 0
  6733                           ;lcd_char@x stored from wreg
  6734  0017F8  6E28               	movwf	lcd_char@x,c
  6735                           
  6736                           ;lcd.c: 87: char temp;
  6737                           ;lcd.c: 88: TRISAbits.TRISA0 = 0;
  6738  0017FA  9092               	bcf	3986,0,c	;volatile
  6739                           
  6740                           ;lcd.c: 89: TRISAbits.TRISA1 = 0;
  6741  0017FC  9292               	bcf	3986,1,c	;volatile
  6742                           
  6743                           ;lcd.c: 90: TRISAbits.TRISA2 = 0;
  6744  0017FE  9492               	bcf	3986,2,c	;volatile
  6745                           
  6746                           ;lcd.c: 91: TRISAbits.TRISA3 = 0;
  6747  001800  9692               	bcf	3986,3,c	;volatile
  6748                           
  6749                           ;lcd.c: 92: TRISAbits.TRISA4 = 0;
  6750  001802  9892               	bcf	3986,4,c	;volatile
  6751                           
  6752                           ;lcd.c: 93: TRISAbits.TRISA7 = 0;
  6753  001804  9E92               	bcf	3986,7,c	;volatile
  6754                           
  6755                           ;lcd.c: 94: temp = x;
  6756  001806  C028  F027         	movff	lcd_char@x,lcd_char@temp
  6757                           
  6758                           ;lcd.c: 95: PORTA = 0x10;
  6759  00180A  0E10               	movlw	16
  6760  00180C  6E80               	movwf	3968,c	;volatile
  6761                           
  6762                           ;lcd.c: 96: _delay((unsigned long)((1)*(8000000/4000.0)));
  6763  00180E  0E03               	movlw	3
  6764  001810  6E26               	movwf	??_lcd_char& (0+255),c
  6765  001812  0E98               	movlw	152
  6766  001814                     u2667:
  6767  001814  2EE8               	decfsz	wreg,f,c
  6768  001816  D7FE               	bra	u2667
  6769  001818  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6770  00181A  D7FC               	bra	u2667
  6771                           
  6772                           ;lcd.c: 97: x = x >>4;
  6773  00181C  3828               	swapf	lcd_char@x,w,c
  6774  00181E  0B0F               	andlw	15
  6775  001820  6E28               	movwf	lcd_char@x,c
  6776                           
  6777                           ;lcd.c: 98: x = x & 0xF;
  6778  001822  5028               	movf	lcd_char@x,w,c
  6779  001824  0B0F               	andlw	15
  6780  001826  6E28               	movwf	lcd_char@x,c
  6781                           
  6782                           ;lcd.c: 99: x = x | 0x90;
  6783  001828  5028               	movf	lcd_char@x,w,c
  6784  00182A  0990               	iorlw	144
  6785  00182C  6E28               	movwf	lcd_char@x,c
  6786                           
  6787                           ;lcd.c: 100: PORTA = x;
  6788  00182E  C028  FF80         	movff	lcd_char@x,3968	;volatile
  6789                           
  6790                           ;lcd.c: 101: _delay((unsigned long)((1)*(8000000/4000.0)));
  6791  001832  0E03               	movlw	3
  6792  001834  6E26               	movwf	??_lcd_char& (0+255),c
  6793  001836  0E98               	movlw	152
  6794  001838                     u2677:
  6795  001838  2EE8               	decfsz	wreg,f,c
  6796  00183A  D7FE               	bra	u2677
  6797  00183C  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6798  00183E  D7FC               	bra	u2677
  6799                           
  6800                           ;lcd.c: 102: x = x & 0x1F;
  6801  001840  5028               	movf	lcd_char@x,w,c
  6802  001842  0B1F               	andlw	31
  6803  001844  6E28               	movwf	lcd_char@x,c
  6804                           
  6805                           ;lcd.c: 103: PORTA = x;
  6806  001846  C028  FF80         	movff	lcd_char@x,3968	;volatile
  6807                           
  6808                           ;lcd.c: 104: _delay((unsigned long)((1)*(8000000/4000.0)));
  6809  00184A  0E03               	movlw	3
  6810  00184C  6E26               	movwf	??_lcd_char& (0+255),c
  6811  00184E  0E98               	movlw	152
  6812  001850                     u2687:
  6813  001850  2EE8               	decfsz	wreg,f,c
  6814  001852  D7FE               	bra	u2687
  6815  001854  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6816  001856  D7FC               	bra	u2687
  6817                           
  6818                           ;lcd.c: 105: PORTA = 0x10;
  6819  001858  0E10               	movlw	16
  6820  00185A  6E80               	movwf	3968,c	;volatile
  6821                           
  6822                           ;lcd.c: 106: _delay((unsigned long)((1)*(8000000/4000.0)));
  6823  00185C  0E03               	movlw	3
  6824  00185E  6E26               	movwf	??_lcd_char& (0+255),c
  6825  001860  0E98               	movlw	152
  6826  001862                     u2697:
  6827  001862  2EE8               	decfsz	wreg,f,c
  6828  001864  D7FE               	bra	u2697
  6829  001866  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6830  001868  D7FC               	bra	u2697
  6831                           
  6832                           ;lcd.c: 107: x = temp;
  6833  00186A  C027  F028         	movff	lcd_char@temp,lcd_char@x
  6834                           
  6835                           ;lcd.c: 108: x = x & 0xF;
  6836  00186E  5028               	movf	lcd_char@x,w,c
  6837  001870  0B0F               	andlw	15
  6838  001872  6E28               	movwf	lcd_char@x,c
  6839                           
  6840                           ;lcd.c: 109: x = x | 0x90;
  6841  001874  5028               	movf	lcd_char@x,w,c
  6842  001876  0990               	iorlw	144
  6843  001878  6E28               	movwf	lcd_char@x,c
  6844                           
  6845                           ;lcd.c: 110: PORTA = x;
  6846  00187A  C028  FF80         	movff	lcd_char@x,3968	;volatile
  6847                           
  6848                           ;lcd.c: 111: _delay((unsigned long)((1)*(8000000/4000.0)));
  6849  00187E  0E03               	movlw	3
  6850  001880  6E26               	movwf	??_lcd_char& (0+255),c
  6851  001882  0E98               	movlw	152
  6852  001884                     u2707:
  6853  001884  2EE8               	decfsz	wreg,f,c
  6854  001886  D7FE               	bra	u2707
  6855  001888  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6856  00188A  D7FC               	bra	u2707
  6857                           
  6858                           ;lcd.c: 112: x = x & 0x1F;
  6859  00188C  5028               	movf	lcd_char@x,w,c
  6860  00188E  0B1F               	andlw	31
  6861  001890  6E28               	movwf	lcd_char@x,c
  6862                           
  6863                           ;lcd.c: 113: PORTA = x;
  6864  001892  C028  FF80         	movff	lcd_char@x,3968	;volatile
  6865                           
  6866                           ;lcd.c: 114: _delay((unsigned long)((1)*(8000000/4000.0)));
  6867  001896  0E03               	movlw	3
  6868  001898  6E26               	movwf	??_lcd_char& (0+255),c
  6869  00189A  0E98               	movlw	152
  6870  00189C                     u2717:
  6871  00189C  2EE8               	decfsz	wreg,f,c
  6872  00189E  D7FE               	bra	u2717
  6873  0018A0  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6874  0018A2  D7FC               	bra	u2717
  6875  0018A4  0012               	return		;funcret
  6876  0018A6                     __end_of_lcd_char:
  6877                           	opt stack 0
  6878                           tblptru	equ	0xFF8
  6879                           tblptrh	equ	0xFF7
  6880                           tblptrl	equ	0xFF6
  6881                           tablat	equ	0xFF5
  6882                           prodh	equ	0xFF4
  6883                           prodl	equ	0xFF3
  6884                           intcon	equ	0xFF2
  6885                           postinc0	equ	0xFEE
  6886                           wreg	equ	0xFE8
  6887                           postdec1	equ	0xFE5
  6888                           plusw1	equ	0xFE3
  6889                           fsr1l	equ	0xFE1
  6890                           indf2	equ	0xFDF
  6891                           postinc2	equ	0xFDE
  6892                           postdec2	equ	0xFDD
  6893                           plusw2	equ	0xFDB
  6894                           fsr2h	equ	0xFDA
  6895                           fsr2l	equ	0xFD9
  6896                           status	equ	0xFD8
  6897                           
  6898 ;; *************** function _lcd_command *****************
  6899 ;; Defined at:
  6900 ;;		line 35 in file "lcd.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;  x               1    wreg     unsigned char 
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;  x               1   39[COMRAM] unsigned char 
  6905 ;;  temp            1   38[COMRAM] unsigned char 
  6906 ;; Return value:  Size  Location     Type
  6907 ;;                  1    wreg      void 
  6908 ;; Registers used:
  6909 ;;		wreg, status,2, status,0, cstack
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6916 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;Total ram usage:        3 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    3
  6922 ;; This function calls:
  6923 ;;		Nothing
  6924 ;; This function is called by:
  6925 ;;		_main
  6926 ;;		_CheckCookDone
  6927 ;;		_lcd_init
  6928 ;;		_lcd_clear
  6929 ;;		_TimeSetting
  6930 ;;		_ReadAndDisplayMinFromRTC
  6931 ;;		_ReadAndDisplayHrFromRTC
  6932 ;;		_ReadAndDisplaySecFromRTC
  6933 ;;		_ReadRTCAndDisplay
  6934 ;;		_BakeTempSet
  6935 ;;		_CookTimeDisplay
  6936 ;;		_lcd_shiftRight
  6937 ;;		_lcd_shiftLeft
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           	psect	text43
  6942  0018A6                     __ptext43:
  6943                           	opt stack 0
  6944  0018A6                     _lcd_command:
  6945                           	opt stack 26
  6946                           
  6947                           ;incstack = 0
  6948                           ;lcd_command@x stored from wreg
  6949  0018A6  6E28               	movwf	lcd_command@x,c
  6950                           
  6951                           ;lcd.c: 37: char temp;
  6952                           ;lcd.c: 39: TRISAbits.TRISA0 = 0;
  6953  0018A8  9092               	bcf	3986,0,c	;volatile
  6954                           
  6955                           ;lcd.c: 40: TRISAbits.TRISA1 = 0;
  6956  0018AA  9292               	bcf	3986,1,c	;volatile
  6957                           
  6958                           ;lcd.c: 41: TRISAbits.TRISA2 = 0;
  6959  0018AC  9492               	bcf	3986,2,c	;volatile
  6960                           
  6961                           ;lcd.c: 42: TRISAbits.TRISA3 = 0;
  6962  0018AE  9692               	bcf	3986,3,c	;volatile
  6963                           
  6964                           ;lcd.c: 43: TRISAbits.TRISA4 = 0;
  6965  0018B0  9892               	bcf	3986,4,c	;volatile
  6966                           
  6967                           ;lcd.c: 44: TRISAbits.TRISA7 = 0;
  6968  0018B2  9E92               	bcf	3986,7,c	;volatile
  6969                           
  6970                           ;lcd.c: 46: temp = x;
  6971  0018B4  C028  F027         	movff	lcd_command@x,lcd_command@temp
  6972                           
  6973                           ;lcd.c: 48: PORTA = 0;
  6974  0018B8  0E00               	movlw	0
  6975  0018BA  6E80               	movwf	3968,c	;volatile
  6976                           
  6977                           ;lcd.c: 49: _delay((unsigned long)((5)*(8000000/4000.0)));
  6978  0018BC  0E0D               	movlw	13
  6979  0018BE  6E26               	movwf	??_lcd_command& (0+255),c
  6980  0018C0  0EFC               	movlw	252
  6981  0018C2                     u2727:
  6982  0018C2  2EE8               	decfsz	wreg,f,c
  6983  0018C4  D7FE               	bra	u2727
  6984  0018C6  2E26               	decfsz	??_lcd_command& (0+255),f,c
  6985  0018C8  D7FC               	bra	u2727
  6986                           
  6987                           ;lcd.c: 50: x = x >>4;
  6988  0018CA  3828               	swapf	lcd_command@x,w,c
  6989  0018CC  0B0F               	andlw	15
  6990  0018CE  6E28               	movwf	lcd_command@x,c
  6991                           
  6992                           ;lcd.c: 51: x = x & 0xF;
  6993  0018D0  5028               	movf	lcd_command@x,w,c
  6994  0018D2  0B0F               	andlw	15
  6995  0018D4  6E28               	movwf	lcd_command@x,c
  6996                           
  6997                           ;lcd.c: 52: x = x | 0x80;
  6998  0018D6  5028               	movf	lcd_command@x,w,c
  6999  0018D8  0980               	iorlw	128
  7000  0018DA  6E28               	movwf	lcd_command@x,c
  7001                           
  7002                           ;lcd.c: 53: PORTA = x;
  7003  0018DC  C028  FF80         	movff	lcd_command@x,3968	;volatile
  7004                           
  7005                           ;lcd.c: 54: _delay((unsigned long)((5)*(8000000/4000.0)));
  7006  0018E0  0E0D               	movlw	13
  7007  0018E2  6E26               	movwf	??_lcd_command& (0+255),c
  7008  0018E4  0EFC               	movlw	252
  7009  0018E6                     u2737:
  7010  0018E6  2EE8               	decfsz	wreg,f,c
  7011  0018E8  D7FE               	bra	u2737
  7012  0018EA  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7013  0018EC  D7FC               	bra	u2737
  7014                           
  7015                           ;lcd.c: 55: x = x & 0xF;
  7016  0018EE  5028               	movf	lcd_command@x,w,c
  7017  0018F0  0B0F               	andlw	15
  7018  0018F2  6E28               	movwf	lcd_command@x,c
  7019                           
  7020                           ;lcd.c: 56: PORTA = x;
  7021  0018F4  C028  FF80         	movff	lcd_command@x,3968	;volatile
  7022                           
  7023                           ;lcd.c: 57: _delay((unsigned long)((5)*(8000000/4000.0)));
  7024  0018F8  0E0D               	movlw	13
  7025  0018FA  6E26               	movwf	??_lcd_command& (0+255),c
  7026  0018FC  0EFC               	movlw	252
  7027  0018FE                     u2747:
  7028  0018FE  2EE8               	decfsz	wreg,f,c
  7029  001900  D7FE               	bra	u2747
  7030  001902  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7031  001904  D7FC               	bra	u2747
  7032                           
  7033                           ;lcd.c: 58: PORTA = 0;
  7034  001906  0E00               	movlw	0
  7035  001908  6E80               	movwf	3968,c	;volatile
  7036                           
  7037                           ;lcd.c: 59: _delay((unsigned long)((5)*(8000000/4000.0)));
  7038  00190A  0E0D               	movlw	13
  7039  00190C  6E26               	movwf	??_lcd_command& (0+255),c
  7040  00190E  0EFC               	movlw	252
  7041  001910                     u2757:
  7042  001910  2EE8               	decfsz	wreg,f,c
  7043  001912  D7FE               	bra	u2757
  7044  001914  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7045  001916  D7FC               	bra	u2757
  7046                           
  7047                           ;lcd.c: 61: x = temp;
  7048  001918  C027  F028         	movff	lcd_command@temp,lcd_command@x
  7049                           
  7050                           ;lcd.c: 62: x = x & 0xF;
  7051  00191C  5028               	movf	lcd_command@x,w,c
  7052  00191E  0B0F               	andlw	15
  7053  001920  6E28               	movwf	lcd_command@x,c
  7054                           
  7055                           ;lcd.c: 63: x = x | 0x80;
  7056  001922  5028               	movf	lcd_command@x,w,c
  7057  001924  0980               	iorlw	128
  7058  001926  6E28               	movwf	lcd_command@x,c
  7059                           
  7060                           ;lcd.c: 64: PORTA = x;
  7061  001928  C028  FF80         	movff	lcd_command@x,3968	;volatile
  7062                           
  7063                           ;lcd.c: 65: _delay((unsigned long)((5)*(8000000/4000.0)));
  7064  00192C  0E0D               	movlw	13
  7065  00192E  6E26               	movwf	??_lcd_command& (0+255),c
  7066  001930  0EFC               	movlw	252
  7067  001932                     u2767:
  7068  001932  2EE8               	decfsz	wreg,f,c
  7069  001934  D7FE               	bra	u2767
  7070  001936  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7071  001938  D7FC               	bra	u2767
  7072                           
  7073                           ;lcd.c: 66: x = x & 0xF;
  7074  00193A  5028               	movf	lcd_command@x,w,c
  7075  00193C  0B0F               	andlw	15
  7076  00193E  6E28               	movwf	lcd_command@x,c
  7077                           
  7078                           ;lcd.c: 67: PORTA = x;
  7079  001940  C028  FF80         	movff	lcd_command@x,3968	;volatile
  7080                           
  7081                           ;lcd.c: 68: _delay((unsigned long)((5)*(8000000/4000.0)));
  7082  001944  0E0D               	movlw	13
  7083  001946  6E26               	movwf	??_lcd_command& (0+255),c
  7084  001948  0EFC               	movlw	252
  7085  00194A                     u2777:
  7086  00194A  2EE8               	decfsz	wreg,f,c
  7087  00194C  D7FE               	bra	u2777
  7088  00194E  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7089  001950  D7FC               	bra	u2777
  7090  001952  0012               	return		;funcret
  7091  001954                     __end_of_lcd_command:
  7092                           	opt stack 0
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           postinc0	equ	0xFEE
  7101                           wreg	equ	0xFE8
  7102                           postdec1	equ	0xFE5
  7103                           plusw1	equ	0xFE3
  7104                           fsr1l	equ	0xFE1
  7105                           indf2	equ	0xFDF
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           plusw2	equ	0xFDB
  7109                           fsr2h	equ	0xFDA
  7110                           fsr2l	equ	0xFD9
  7111                           status	equ	0xFD8
  7112                           
  7113 ;; *************** function _AdcInit *****************
  7114 ;; Defined at:
  7115 ;;		line 16 in file "adc.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;		None
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;		None
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      void 
  7122 ;; Registers used:
  7123 ;;		wreg, status,2
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;Total ram usage:        0 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    3
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_main
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text44
  7144  002508                     __ptext44:
  7145                           	opt stack 0
  7146  002508                     _AdcInit:
  7147                           	opt stack 27
  7148                           
  7149                           ;adc.c: 18: ADCON2 = 0b10100101;
  7150                           
  7151                           ;incstack = 0
  7152  002508  0EA5               	movlw	165
  7153  00250A  6EC0               	movwf	4032,c	;volatile
  7154  00250C  0012               	return		;funcret
  7155  00250E                     __end_of_AdcInit:
  7156                           	opt stack 0
  7157                           tblptru	equ	0xFF8
  7158                           tblptrh	equ	0xFF7
  7159                           tblptrl	equ	0xFF6
  7160                           tablat	equ	0xFF5
  7161                           prodh	equ	0xFF4
  7162                           prodl	equ	0xFF3
  7163                           intcon	equ	0xFF2
  7164                           postinc0	equ	0xFEE
  7165                           wreg	equ	0xFE8
  7166                           postdec1	equ	0xFE5
  7167                           plusw1	equ	0xFE3
  7168                           fsr1l	equ	0xFE1
  7169                           indf2	equ	0xFDF
  7170                           postinc2	equ	0xFDE
  7171                           postdec2	equ	0xFDD
  7172                           plusw2	equ	0xFDB
  7173                           fsr2h	equ	0xFDA
  7174                           fsr2l	equ	0xFD9
  7175                           status	equ	0xFD8
  7176                           
  7177 ;; *************** function _ISR *****************
  7178 ;; Defined at:
  7179 ;;		line 327 in file "main.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;                  1    wreg      void 
  7186 ;; Registers used:
  7187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;Total ram usage:       18 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    2
  7200 ;; This function calls:
  7201 ;;		_AdcRead
  7202 ;;		i2_WriteToDac
  7203 ;;		i2___lwdiv
  7204 ;; This function is called by:
  7205 ;;		Interrupt level 2
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           	psect	intcode
  7210  000008                     __pintcode:
  7211                           	opt stack 0
  7212  000008                     _ISR:
  7213                           	opt stack 23
  7214                           
  7215                           ;incstack = 0
  7216  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7217  00000A  CFFA F014          	movff	pclath,??_ISR
  7218  00000E  CFFB F015          	movff	pclatu,??_ISR+1
  7219  000012  CFE9 F016          	movff	fsr0l,??_ISR+2
  7220  000016  CFEA F017          	movff	fsr0h,??_ISR+3
  7221  00001A  CFE1 F018          	movff	fsr1l,??_ISR+4
  7222  00001E  CFE2 F019          	movff	fsr1h,??_ISR+5
  7223  000022  CFD9 F01A          	movff	fsr2l,??_ISR+6
  7224  000026  CFDA F01B          	movff	fsr2h,??_ISR+7
  7225  00002A  CFF3 F01C          	movff	prodl,??_ISR+8
  7226  00002E  CFF4 F01D          	movff	prodh,??_ISR+9
  7227  000032  CFF6 F01E          	movff	tblptrl,??_ISR+10
  7228  000036  CFF7 F01F          	movff	tblptrh,??_ISR+11
  7229  00003A  CFF8 F020          	movff	tblptru,??_ISR+12
  7230  00003E  CFF5 F021          	movff	tablat,??_ISR+13
  7231  000042  C05A  F022         	movff	btemp,??_ISR+14
  7232  000046  C05B  F023         	movff	btemp+1,??_ISR+15
  7233  00004A  C05C  F024         	movff	btemp+2,??_ISR+16
  7234  00004E  C05D  F025         	movff	btemp+3,??_ISR+17
  7235                           
  7236                           ;main.c: 329: if(TMR2IF)
  7237  000052  A29E               	btfss	3998,1,c	;volatile
  7238  000054  D042               	goto	i2l170
  7239                           
  7240                           ;main.c: 330: {
  7241                           ;main.c: 331: if(sineOut)
  7242  000056  5049               	movf	_sineOut,w,c	;volatile
  7243  000058  B4D8               	btfsc	status,2,c
  7244  00005A  D022               	goto	i2l171
  7245                           
  7246                           ;main.c: 332: {
  7247                           ;main.c: 333: if(iterator >= 64)
  7248  00005C  0E3F               	movlw	63
  7249  00005E  6448               	cpfsgt	_iterator,c	;volatile
  7250  000060  D002               	goto	i2l172
  7251                           
  7252                           ;main.c: 334: {
  7253                           ;main.c: 335: iterator = 0;
  7254  000062  0E00               	movlw	0
  7255  000064  6E48               	movwf	_iterator,c	;volatile
  7256  000066                     i2l172:
  7257                           
  7258                           ;main.c: 336: }
  7259                           ;main.c: 338: WriteToDac(ptr[iterator]/amplitudeDivision, 0);
  7260  000066  5048               	movf	_iterator,w,c	;volatile
  7261  000068  0D02               	mullw	2
  7262  00006A  50F3               	movf	prodl,w,c
  7263  00006C  243D               	addwf	_ptr,w,c
  7264  00006E  6ED9               	movwf	fsr2l,c
  7265  000070  50F4               	movf	prodh,w,c
  7266  000072  203E               	addwfc	_ptr+1,w,c
  7267  000074  6EDA               	movwf	fsr2h,c
  7268  000076  CFDE F001          	movff	postinc2,i2___lwdiv@dividend
  7269  00007A  CFDD F002          	movff	postdec2,i2___lwdiv@dividend+1
  7270  00007E  C03B  F003         	movff	_amplitudeDivision,i2___lwdiv@divisor
  7271  000082  C03C  F004         	movff	_amplitudeDivision+1,i2___lwdiv@divisor+1
  7272  000086  EC43  F010         	call	i2___lwdiv	;wreg free
  7273  00008A  C001  F008         	movff	?i2___lwdiv,i2WriteToDac@data
  7274  00008E  C002  F009         	movff	?i2___lwdiv+1,i2WriteToDac@data+1
  7275  000092  0E00               	movlw	0
  7276  000094  6E0B               	movwf	i2WriteToDac@frequency+1,c
  7277  000096  0E00               	movlw	0
  7278  000098  6E0A               	movwf	i2WriteToDac@frequency,c
  7279  00009A  ECB2  F010         	call	i2_WriteToDac	;wreg free
  7280                           
  7281                           ;main.c: 340: iterator++;
  7282  00009E  2A48               	incf	_iterator,f,c	;volatile
  7283  0000A0                     i2l171:
  7284                           
  7285                           ;main.c: 341: }
  7286                           ;main.c: 343: if(!sineOut)
  7287  0000A0  5049               	movf	_sineOut,w,c	;volatile
  7288  0000A2  A4D8               	btfss	status,2,c
  7289  0000A4  D019               	goto	i2l174
  7290                           
  7291                           ;main.c: 344: {
  7292                           ;main.c: 346: ADCON1bits.PCFG = 0b0000;
  7293  0000A6  90C1               	bcf	4033,0,c	;volatile
  7294  0000A8  92C1               	bcf	4033,1,c	;volatile
  7295  0000AA  94C1               	bcf	4033,2,c	;volatile
  7296  0000AC  96C1               	bcf	4033,3,c	;volatile
  7297                           
  7298                           ;main.c: 347: readADCInput = AdcRead(0x0C);
  7299  0000AE  0E0C               	movlw	12
  7300  0000B0  ECA8  F011         	call	_AdcRead
  7301  0000B4  C001  F1C4         	movff	?_AdcRead,_readADCInput	;volatile
  7302  0000B8  C002  F1C5         	movff	?_AdcRead+1,_readADCInput+1	;volatile
  7303                           
  7304                           ;main.c: 348: readBakeTempADC = AdcRead(0x0A);
  7305  0000BC  0E0A               	movlw	10
  7306  0000BE  ECA8  F011         	call	_AdcRead
  7307  0000C2  C001  F1C2         	movff	?_AdcRead,_readBakeTempADC	;volatile
  7308  0000C6  C002  F1C3         	movff	?_AdcRead+1,_readBakeTempADC+1	;volatile
  7309                           
  7310                           ;main.c: 349: ADCON1bits.PCFG = 0b1111;
  7311  0000CA  80C1               	bsf	4033,0,c	;volatile
  7312  0000CC  82C1               	bsf	4033,1,c	;volatile
  7313  0000CE  84C1               	bsf	4033,2,c	;volatile
  7314  0000D0  86C1               	bsf	4033,3,c	;volatile
  7315                           
  7316                           ;main.c: 351: if(alarmSet)
  7317  0000D2  504A               	movf	_alarmSet,w,c	;volatile
  7318  0000D4  A4D8               	btfss	status,2,c
  7319                           
  7320                           ;main.c: 352: {
  7321                           ;main.c: 353: LATDbits.LATD1 ^= 1;
  7322  0000D6  728C               	btg	3980,1,c	;volatile
  7323  0000D8                     i2l174:
  7324                           
  7325                           ;main.c: 354: }
  7326                           ;main.c: 355: }
  7327                           ;main.c: 357: TMR2IF = 0;
  7328  0000D8  929E               	bcf	3998,1,c	;volatile
  7329  0000DA                     i2l170:
  7330  0000DA  C025  F05D         	movff	??_ISR+17,btemp+3
  7331  0000DE  C024  F05C         	movff	??_ISR+16,btemp+2
  7332  0000E2  C023  F05B         	movff	??_ISR+15,btemp+1
  7333  0000E6  C022  F05A         	movff	??_ISR+14,btemp
  7334  0000EA  C021  FFF5         	movff	??_ISR+13,tablat
  7335  0000EE  C020  FFF8         	movff	??_ISR+12,tblptru
  7336  0000F2  C01F  FFF7         	movff	??_ISR+11,tblptrh
  7337  0000F6  C01E  FFF6         	movff	??_ISR+10,tblptrl
  7338  0000FA  C01D  FFF4         	movff	??_ISR+9,prodh
  7339  0000FE  C01C  FFF3         	movff	??_ISR+8,prodl
  7340  000102  C01B  FFDA         	movff	??_ISR+7,fsr2h
  7341  000106  C01A  FFD9         	movff	??_ISR+6,fsr2l
  7342  00010A  C019  FFE2         	movff	??_ISR+5,fsr1h
  7343  00010E  C018  FFE1         	movff	??_ISR+4,fsr1l
  7344  000112  C017  FFEA         	movff	??_ISR+3,fsr0h
  7345  000116  C016  FFE9         	movff	??_ISR+2,fsr0l
  7346  00011A  C015  FFFB         	movff	??_ISR+1,pclatu
  7347  00011E  C014  FFFA         	movff	??_ISR,pclath
  7348  000122  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7349  000124  0011               	retfie		f
  7350  000126                     __end_of_ISR:
  7351                           	opt stack 0
  7352                           pclatu	equ	0xFFB
  7353                           pclath	equ	0xFFA
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           intcon	equ	0xFF2
  7361                           postinc0	equ	0xFEE
  7362                           fsr0h	equ	0xFEA
  7363                           fsr0l	equ	0xFE9
  7364                           wreg	equ	0xFE8
  7365                           postdec1	equ	0xFE5
  7366                           plusw1	equ	0xFE3
  7367                           fsr1h	equ	0xFE2
  7368                           fsr1l	equ	0xFE1
  7369                           indf2	equ	0xFDF
  7370                           postinc2	equ	0xFDE
  7371                           postdec2	equ	0xFDD
  7372                           plusw2	equ	0xFDB
  7373                           fsr2h	equ	0xFDA
  7374                           fsr2l	equ	0xFD9
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function i2___lwdiv *****************
  7378 ;; Defined at:
  7379 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  dividend        2    0[COMRAM] unsigned int 
  7382 ;;  divisor         2    2[COMRAM] unsigned int 
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7385 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  2    0[COMRAM] unsigned int 
  7388 ;; Registers used:
  7389 ;;		wreg, status,2, status,0
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7399 ;;Total ram usage:        7 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; This function calls:
  7402 ;;		Nothing
  7403 ;; This function is called by:
  7404 ;;		_ISR
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text46
  7409  002086                     __ptext46:
  7410                           	opt stack 0
  7411  002086                     i2___lwdiv:
  7412                           	opt stack 24
  7413                           
  7414                           ;incstack = 0
  7415  002086  0E00               	movlw	0
  7416  002088  6E06               	movwf	i2___lwdiv@quotient+1,c
  7417  00208A  0E00               	movlw	0
  7418  00208C  6E05               	movwf	i2___lwdiv@quotient,c
  7419  00208E  5003               	movf	i2___lwdiv@divisor,w,c
  7420  002090  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7421  002092  B4D8               	btfsc	status,2,c
  7422  002094  D01C               	goto	i2l939
  7423  002096  0E01               	movlw	1
  7424  002098  6E07               	movwf	i2___lwdiv@counter,c
  7425  00209A  D004               	goto	i2l934
  7426  00209C  90D8               	bcf	status,0,c
  7427  00209E  3603               	rlcf	i2___lwdiv@divisor,f,c
  7428  0020A0  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7429  0020A2  2A07               	incf	i2___lwdiv@counter,f,c
  7430  0020A4                     i2l934:
  7431  0020A4  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7432  0020A6  D7FA               	goto	i2l935
  7433  0020A8                     i2u167_40:
  7434  0020A8  90D8               	bcf	status,0,c
  7435  0020AA  3605               	rlcf	i2___lwdiv@quotient,f,c
  7436  0020AC  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7437  0020AE  5003               	movf	i2___lwdiv@divisor,w,c
  7438  0020B0  5C01               	subwf	i2___lwdiv@dividend,w,c
  7439  0020B2  5004               	movf	i2___lwdiv@divisor+1,w,c
  7440  0020B4  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7441  0020B6  A0D8               	btfss	status,0,c
  7442  0020B8  D005               	goto	i2l938
  7443  0020BA  5003               	movf	i2___lwdiv@divisor,w,c
  7444  0020BC  5E01               	subwf	i2___lwdiv@dividend,f,c
  7445  0020BE  5004               	movf	i2___lwdiv@divisor+1,w,c
  7446  0020C0  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7447  0020C2  8005               	bsf	i2___lwdiv@quotient,0,c
  7448  0020C4                     i2l938:
  7449  0020C4  90D8               	bcf	status,0,c
  7450  0020C6  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7451  0020C8  3203               	rrcf	i2___lwdiv@divisor,f,c
  7452  0020CA  2E07               	decfsz	i2___lwdiv@counter,f,c
  7453  0020CC  D7ED               	goto	i2u167_40
  7454  0020CE                     i2l939:
  7455  0020CE  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7456  0020D2  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7457  0020D6  0012               	return		;funcret
  7458  0020D8                     __end_ofi2___lwdiv:
  7459                           	opt stack 0
  7460                           pclatu	equ	0xFFB
  7461                           pclath	equ	0xFFA
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon	equ	0xFF2
  7469                           postinc0	equ	0xFEE
  7470                           fsr0h	equ	0xFEA
  7471                           fsr0l	equ	0xFE9
  7472                           wreg	equ	0xFE8
  7473                           postdec1	equ	0xFE5
  7474                           plusw1	equ	0xFE3
  7475                           fsr1h	equ	0xFE2
  7476                           fsr1l	equ	0xFE1
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           plusw2	equ	0xFDB
  7481                           fsr2h	equ	0xFDA
  7482                           fsr2l	equ	0xFD9
  7483                           status	equ	0xFD8
  7484                           
  7485 ;; *************** function i2_WriteToDac *****************
  7486 ;; Defined at:
  7487 ;;		line 61 in file "spi.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;  data            2    7[COMRAM] unsigned int 
  7490 ;;  frequency       2    9[COMRAM] unsigned int 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  WriteToDac      2   17[COMRAM] unsigned int 
  7493 ;;  WriteToDac      2   13[COMRAM] unsigned int 
  7494 ;;  WriteToDac      1   16[COMRAM] unsigned char 
  7495 ;;  WriteToDac      1   15[COMRAM] unsigned char 
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      void 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0, cstack
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7506 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7507 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;Total ram usage:       12 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    1
  7512 ;; This function calls:
  7513 ;;		i2_WriteSpi
  7514 ;; This function is called by:
  7515 ;;		_ISR
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text47
  7520  002164                     __ptext47:
  7521                           	opt stack 0
  7522  002164                     i2_WriteToDac:
  7523                           	opt stack 23
  7524                           
  7525                           ;spi.c: 62: TRISCbits.TRISC2 = 0;
  7526                           
  7527                           ;incstack = 0
  7528  002164  9494               	bcf	3988,2,c	;volatile
  7529                           
  7530                           ;spi.c: 64: PORTCbits.RC2 = 0;
  7531  002166  9482               	bcf	3970,2,c	;volatile
  7532                           
  7533                           ;spi.c: 66: uint16_t command = 0xF000;
  7534  002168  0EF0               	movlw	240
  7535  00216A  6E0F               	movwf	i2WriteToDac@command+1,c
  7536  00216C  0E00               	movlw	0
  7537  00216E  6E0E               	movwf	i2WriteToDac@command,c
  7538                           
  7539                           ;spi.c: 68: uint16_t output = command |(data<<2);
  7540  002170  C008  F00C         	movff	i2WriteToDac@data,??i2_WriteToDac
  7541  002174  C009  F00D         	movff	i2WriteToDac@data+1,??i2_WriteToDac+1
  7542  002178  90D8               	bcf	status,0,c
  7543  00217A  360C               	rlcf	??i2_WriteToDac,f,c
  7544  00217C  360D               	rlcf	??i2_WriteToDac+1,f,c
  7545  00217E  90D8               	bcf	status,0,c
  7546  002180  360C               	rlcf	??i2_WriteToDac,f,c
  7547  002182  360D               	rlcf	??i2_WriteToDac+1,f,c
  7548  002184  500E               	movf	i2WriteToDac@command,w,c
  7549  002186  100C               	iorwf	??i2_WriteToDac,w,c
  7550  002188  6E12               	movwf	i2WriteToDac@output,c
  7551  00218A  500F               	movf	i2WriteToDac@command+1,w,c
  7552  00218C  100D               	iorwf	??i2_WriteToDac+1,w,c
  7553  00218E  6E13               	movwf	i2WriteToDac@output+1,c
  7554                           
  7555                           ;spi.c: 70: uint8_t high = (uint8_t)(output>>8);
  7556  002190  5013               	movf	i2WriteToDac@output+1,w,c
  7557  002192  6E10               	movwf	i2WriteToDac@high,c
  7558                           
  7559                           ;spi.c: 72: uint8_t low = output & 0x00ff;
  7560  002194  C012  F011         	movff	i2WriteToDac@output,i2WriteToDac@low
  7561                           
  7562                           ;spi.c: 74: WriteSpi(high);
  7563  002198  5010               	movf	i2WriteToDac@high,w,c
  7564  00219A  EC66  F012         	call	i2_WriteSpi
  7565                           
  7566                           ;spi.c: 75: WriteSpi(low);
  7567  00219E  5011               	movf	i2WriteToDac@low,w,c
  7568  0021A0  EC66  F012         	call	i2_WriteSpi
  7569                           
  7570                           ;spi.c: 77: PORTCbits.RC2 = 1;
  7571  0021A4  8482               	bsf	3970,2,c	;volatile
  7572  0021A6  0012               	return		;funcret
  7573  0021A8                     __end_ofi2_WriteToDac:
  7574                           	opt stack 0
  7575                           pclatu	equ	0xFFB
  7576                           pclath	equ	0xFFA
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           postinc0	equ	0xFEE
  7585                           fsr0h	equ	0xFEA
  7586                           fsr0l	equ	0xFE9
  7587                           wreg	equ	0xFE8
  7588                           postdec1	equ	0xFE5
  7589                           plusw1	equ	0xFE3
  7590                           fsr1h	equ	0xFE2
  7591                           fsr1l	equ	0xFE1
  7592                           indf2	equ	0xFDF
  7593                           postinc2	equ	0xFDE
  7594                           postdec2	equ	0xFDD
  7595                           plusw2	equ	0xFDB
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8
  7599                           
  7600 ;; *************** function i2_WriteSpi *****************
  7601 ;; Defined at:
  7602 ;;		line 53 in file "spi.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;  data            1    wreg     unsigned char 
  7605 ;; Auto vars:     Size  Location     Type
  7606 ;;  data            1    0[COMRAM] unsigned char 
  7607 ;; Return value:  Size  Location     Type
  7608 ;;                  1    wreg      void 
  7609 ;; Registers used:
  7610 ;;		wreg
  7611 ;; Tracked objects:
  7612 ;;		On entry : 0/0
  7613 ;;		On exit  : 0/0
  7614 ;;		Unchanged: 0/0
  7615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;Total ram usage:        1 bytes
  7621 ;; Hardware stack levels used:    1
  7622 ;; This function calls:
  7623 ;;		Nothing
  7624 ;; This function is called by:
  7625 ;;		i2_WriteToDac
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text48
  7630  0024CC                     __ptext48:
  7631                           	opt stack 0
  7632  0024CC                     i2_WriteSpi:
  7633                           	opt stack 23
  7634                           
  7635                           ;incstack = 0
  7636                           ;i2WriteSpi@data stored from wreg
  7637  0024CC  6E01               	movwf	i2WriteSpi@data,c
  7638                           
  7639                           ;spi.c: 55: SSPBUF = data;
  7640  0024CE  C001  FFC9         	movff	i2WriteSpi@data,4041	;volatile
  7641  0024D2  A69E               	btfss	3998,3,c	;volatile
  7642  0024D4  D7FE               	goto	i2l281
  7643                           
  7644                           ;spi.c: 57: PIR1bits.SSPIF = 0;
  7645  0024D6  969E               	bcf	3998,3,c	;volatile
  7646  0024D8  0012               	return		;funcret
  7647  0024DA                     __end_ofi2_WriteSpi:
  7648                           	opt stack 0
  7649                           pclatu	equ	0xFFB
  7650                           pclath	equ	0xFFA
  7651                           tblptru	equ	0xFF8
  7652                           tblptrh	equ	0xFF7
  7653                           tblptrl	equ	0xFF6
  7654                           tablat	equ	0xFF5
  7655                           prodh	equ	0xFF4
  7656                           prodl	equ	0xFF3
  7657                           intcon	equ	0xFF2
  7658                           postinc0	equ	0xFEE
  7659                           fsr0h	equ	0xFEA
  7660                           fsr0l	equ	0xFE9
  7661                           wreg	equ	0xFE8
  7662                           postdec1	equ	0xFE5
  7663                           plusw1	equ	0xFE3
  7664                           fsr1h	equ	0xFE2
  7665                           fsr1l	equ	0xFE1
  7666                           indf2	equ	0xFDF
  7667                           postinc2	equ	0xFDE
  7668                           postdec2	equ	0xFDD
  7669                           plusw2	equ	0xFDB
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function _AdcRead *****************
  7675 ;; Defined at:
  7676 ;;		line 21 in file "adc.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  channel         1    wreg     unsigned char 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  channel         1    3[COMRAM] unsigned char 
  7681 ;; Return value:  Size  Location     Type
  7682 ;;                  2    0[COMRAM] unsigned int 
  7683 ;; Registers used:
  7684 ;;		wreg, status,2, status,0
  7685 ;; Tracked objects:
  7686 ;;		On entry : 0/0
  7687 ;;		On exit  : 0/0
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7692 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7693 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7694 ;;Total ram usage:        4 bytes
  7695 ;; Hardware stack levels used:    1
  7696 ;; This function calls:
  7697 ;;		Nothing
  7698 ;; This function is called by:
  7699 ;;		_ISR
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           	psect	text49
  7704  002350                     __ptext49:
  7705                           	opt stack 0
  7706  002350                     _AdcRead:
  7707                           	opt stack 24
  7708                           
  7709                           ;incstack = 0
  7710                           ;AdcRead@channel stored from wreg
  7711  002350  6E04               	movwf	AdcRead@channel,c
  7712                           
  7713                           ;adc.c: 23: ADCON0bits.CHS = channel;
  7714  002352  C004  F003         	movff	AdcRead@channel,??_AdcRead
  7715  002356  4603               	rlncf	??_AdcRead,f,c
  7716  002358  4603               	rlncf	??_AdcRead,f,c
  7717  00235A  50C2               	movf	4034,w,c	;volatile
  7718  00235C  1803               	xorwf	??_AdcRead,w,c
  7719  00235E  0BC3               	andlw	-61
  7720  002360  1803               	xorwf	??_AdcRead,w,c
  7721  002362  6EC2               	movwf	4034,c	;volatile
  7722                           
  7723                           ;adc.c: 25: ADCON0bits.ADON = 1;
  7724  002364  80C2               	bsf	4034,0,c	;volatile
  7725                           
  7726                           ;adc.c: 27: ADCON0bits.GODONE = 1;
  7727  002366  82C2               	bsf	4034,1,c	;volatile
  7728  002368  B2C2               	btfsc	4034,1,c	;volatile
  7729  00236A  D7FE               	goto	i2l188
  7730                           
  7731                           ;adc.c: 31: ADCON0bits.ADON = 0;
  7732  00236C  90C2               	bcf	4034,0,c	;volatile
  7733                           
  7734                           ;adc.c: 33: return ADRES;
  7735  00236E  CFC3 F001          	movff	4035,?_AdcRead	;volatile
  7736  002372  CFC4 F002          	movff	4036,?_AdcRead+1	;volatile
  7737  002376  0012               	return		;funcret
  7738  002378                     __end_of_AdcRead:
  7739                           	opt stack 0
  7740                           pclatu	equ	0xFFB
  7741                           pclath	equ	0xFFA
  7742                           tblptru	equ	0xFF8
  7743                           tblptrh	equ	0xFF7
  7744                           tblptrl	equ	0xFF6
  7745                           tablat	equ	0xFF5
  7746                           prodh	equ	0xFF4
  7747                           prodl	equ	0xFF3
  7748                           intcon	equ	0xFF2
  7749                           postinc0	equ	0xFEE
  7750                           fsr0h	equ	0xFEA
  7751                           fsr0l	equ	0xFE9
  7752                           wreg	equ	0xFE8
  7753                           postdec1	equ	0xFE5
  7754                           plusw1	equ	0xFE3
  7755                           fsr1h	equ	0xFE2
  7756                           fsr1l	equ	0xFE1
  7757                           indf2	equ	0xFDF
  7758                           postinc2	equ	0xFDE
  7759                           postdec2	equ	0xFDD
  7760                           plusw2	equ	0xFDB
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           pclatu	equ	0xFFB
  7765                           pclath	equ	0xFFA
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           postinc0	equ	0xFEE
  7774                           fsr0h	equ	0xFEA
  7775                           fsr0l	equ	0xFE9
  7776                           wreg	equ	0xFE8
  7777                           postdec1	equ	0xFE5
  7778                           plusw1	equ	0xFE3
  7779                           fsr1h	equ	0xFE2
  7780                           fsr1l	equ	0xFE1
  7781                           indf2	equ	0xFDF
  7782                           postinc2	equ	0xFDE
  7783                           postdec2	equ	0xFDD
  7784                           plusw2	equ	0xFDB
  7785                           fsr2h	equ	0xFDA
  7786                           fsr2l	equ	0xFD9
  7787                           status	equ	0xFD8
  7788                           
  7789                           	psect	rparam
  7790  0000                     pclatu	equ	0xFFB
  7791                           pclath	equ	0xFFA
  7792                           tblptru	equ	0xFF8
  7793                           tblptrh	equ	0xFF7
  7794                           tblptrl	equ	0xFF6
  7795                           tablat	equ	0xFF5
  7796                           prodh	equ	0xFF4
  7797                           prodl	equ	0xFF3
  7798                           intcon	equ	0xFF2
  7799                           postinc0	equ	0xFEE
  7800                           fsr0h	equ	0xFEA
  7801                           fsr0l	equ	0xFE9
  7802                           wreg	equ	0xFE8
  7803                           postdec1	equ	0xFE5
  7804                           plusw1	equ	0xFE3
  7805                           fsr1h	equ	0xFE2
  7806                           fsr1l	equ	0xFE1
  7807                           indf2	equ	0xFDF
  7808                           postinc2	equ	0xFDE
  7809                           postdec2	equ	0xFDD
  7810                           plusw2	equ	0xFDB
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815                           	psect	temp
  7816  00005A                     btemp:
  7817                           	opt stack 0
  7818  00005A                     	ds	1
  7819  0000                     int$flags	set	btemp
  7820  0000                     wtemp6	set	btemp+1
  7821                           pclatu	equ	0xFFB
  7822                           pclath	equ	0xFFA
  7823                           tblptru	equ	0xFF8
  7824                           tblptrh	equ	0xFF7
  7825                           tblptrl	equ	0xFF6
  7826                           tablat	equ	0xFF5
  7827                           prodh	equ	0xFF4
  7828                           prodl	equ	0xFF3
  7829                           intcon	equ	0xFF2
  7830                           postinc0	equ	0xFEE
  7831                           fsr0h	equ	0xFEA
  7832                           fsr0l	equ	0xFE9
  7833                           wreg	equ	0xFE8
  7834                           postdec1	equ	0xFE5
  7835                           plusw1	equ	0xFE3
  7836                           fsr1h	equ	0xFE2
  7837                           fsr1l	equ	0xFE1
  7838                           indf2	equ	0xFDF
  7839                           postinc2	equ	0xFDE
  7840                           postdec2	equ	0xFDD
  7841                           plusw2	equ	0xFDB
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    10
    Data        249
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     48      89
    BANK0           128     32     121
    BANK1           256    175     199
    BANK2           256      0     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), 
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 3
		 -> CookTimeDisplay@cookTimeContainer_1314(BANK1[2]), CookTimeDisplay@cookTimeContainer(BANK1[1]), BakeTempSet@bakeTempContainer(BANK1[3]), ReadAndDisplaySecFromRTC@secondContainerDisplay_1263(BANK0[2]), 
		 -> ReadAndDisplaySecFromRTC@secondContainerDisplay(BANK0[1]), ReadAndDisplayHrFromRTC@hourContainerDisplay_1257(BANK0[2]), ReadAndDisplayHrFromRTC@hourContainerDisplay(BANK0[1]), ReadAndDisplayMinFromRTC@minContainerDisplay_1251(BANK0[2]), 
		 -> ReadAndDisplayMinFromRTC@minContainerDisplay(BANK0[1]), TimeSetting@minContainer_1233(BANK1[2]), TimeSetting@minContainer(BANK1[1]), TimeSetting@hourContainer_1229(BANK1[2]), 
		 -> TimeSetting@hourContainer(BANK1[1]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_string@x	PTR unsigned char  size(2) Largest target is 11
		 -> CookTimeDisplay@cookTimeContainer_1314(BANK1[2]), CookTimeDisplay@cookTimeContainer(BANK1[1]), CookTimeDisplay@minDisplay(BANK1[4]), CookTimeDisplay@nextMenu(BANK1[7]), 
		 -> CookTimeDisplay@backMenu(BANK1[6]), CookTimeDisplay@setBakeTimeDisplay(BANK1[10]), BakeTempSet@bakeTempContainer(BANK1[3]), BakeTempSet@nextMenu(BANK1[6]), 
		 -> BakeTempSet@deliminator(BANK1[6]), BakeTempSet@setBakeTempDisplay(BANK1[10]), ReadRTCAndDisplay@bakeT(BANK0[6]), ReadRTCAndDisplay@deliminator(BANK0[2]), 
		 -> ReadRTCAndDisplay@time(BANK0[5]), ReadAndDisplaySecFromRTC@secondContainerDisplay_1263(BANK0[2]), ReadAndDisplaySecFromRTC@secondContainerDisplay(BANK0[1]), ReadAndDisplayHrFromRTC@hourContainerDisplay_1257(BANK0[2]), 
		 -> ReadAndDisplayHrFromRTC@hourContainerDisplay(BANK0[1]), ReadAndDisplayMinFromRTC@minContainerDisplay_1251(BANK0[2]), ReadAndDisplayMinFromRTC@minContainerDisplay(BANK0[1]), TimeSetting@minContainer_1233(BANK1[2]), 
		 -> TimeSetting@minContainer(BANK1[1]), TimeSetting@hourContainer_1229(BANK1[2]), TimeSetting@hourContainer(BANK1[1]), TimeSetting@next(BANK1[6]), 
		 -> TimeSetting@move(BANK1[6]), TimeSetting@setTimeDisplay(BANK1[9]), CheckCookDone@clear(BANK0[6]), CheckCookDone@bakeDone(BANK0[11]), 
		 -> main@cancel(BANK1[7]), main@baking(BANK1[10]), 

    ptr	PTR unsigned int  size(2) Largest target is 128
		 -> NULL(NULL[0]), main@sineLookup(BANK1[128]), 


Critical Paths under _main in COMRAM

    _lcd_init->_lcd_command
    _WriteToRTC->_I2C_WriteToSlave
    _WriteTimeToCookToRTC->_I2C_WriteToSlave
    _WriteTime->_IntToBcd
    _IntToBcd->___awdiv
    _CookTimeSet->_IntToBcd_cook_time
    _IntToBcd_cook_time->___awdiv
    _I2C_ReadFromSlave->_I2C_Read
    _I2C_ReadFromSlave->_I2C_WriteControl
    _I2C_Read->_I2C_Wait
    _CheckCookDone->_clearAlarm
    _lcd_clear->_lcd_command
    _clearAlarm->_I2C_WriteToSlave
    _I2C_WriteToSlave->_I2C_WriteControl
    _I2C_WriteData->_I2C_Wait
    _I2C_WriteControl->_I2C_Wait
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _WriteToDac->_WriteSpi
    _BakeTempSet->___lwmod
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_string->_lcd_char

Critical Paths under _ISR in COMRAM

    _ISR->i2_WriteToDac
    i2_WriteToDac->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_ReadRTCAndDisplay
    _TimeSetting->_sprintf
    _ReadRTCAndDisplay->_ReadAndDisplayHrFromRTC
    _ReadRTCAndDisplay->_ReadAndDisplayMinFromRTC
    _ReadRTCAndDisplay->_ReadAndDisplaySecFromRTC
    _ReadAndDisplaySecFromRTC->_sprintf
    _ReadAndDisplayMinFromRTC->_sprintf
    _ReadAndDisplayHrFromRTC->_sprintf
    _CookTimeDisplay->_sprintf
    _CheckCookDone->_WriteToDac
    _BakeTempSet->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_CookTimeDisplay

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               146   146      0   97945
                                             31 BANK0      1     1      0
                                             30 BANK1    145   145      0
                            _AdcInit
                        _BakeTempSet
                      _CheckCookDone
                    _CookTimeDisplay
                        _CookTimeSet
                           _GPIOInit
                  _GenerateAmplitude
    _IfButtonPressedMovedToNextState
                 _InitI2C_MasterMode
                  _ReadRTCAndDisplay
                            _SpiInit
                        _TimeSetting
                         _Timer2Init
                          _WriteTime
               _WriteTimeToCookToRTC
                         _WriteToDac
                         _WriteToRTC
                         _clearAlarm
                          _lcd_clear
                        _lcd_command
                           _lcd_init
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     430
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _WriteToRTC                                           1     1      0    5095
                                             44 COMRAM     1     1      0
                   _I2C_WriteToSlave
 ---------------------------------------------------------------------------------
 (1) _WriteTimeToCookToRTC                                 1     1      0    5095
                                             44 COMRAM     1     1      0
                   _I2C_WriteToSlave
 ---------------------------------------------------------------------------------
 (1) _WriteTime                                            2     2      0    1796
                                              0 BANK0      2     2      0
                           _IntToBcd
 ---------------------------------------------------------------------------------
 (2) _IntToBcd                                             3     3      0    1660
                                             45 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Timer2Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TimeSetting                                         30    28      2   10376
                                             14 BANK0      3     1      2
                                              0 BANK1     27    27      0
                            ___lwdiv
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadRTCAndDisplay                                   13    13      0   32980
                                             18 BANK0     13    13      0
            _ReadAndDisplayHrFromRTC
           _ReadAndDisplayMinFromRTC
           _ReadAndDisplaySecFromRTC
                           _lcd_char
                        _lcd_command
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _ReadAndDisplaySecFromRTC                             4     4      0    9580
                                             14 BANK0      4     4      0
                  _I2C_ReadFromSlave
                     _bcd_to_decimal
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ReadAndDisplayMinFromRTC                             4     4      0    9580
                                             14 BANK0      4     4      0
                  _I2C_ReadFromSlave
                     _bcd_to_decimal
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ReadAndDisplayHrFromRTC                              4     4      0    9580
                                             14 BANK0      4     4      0
                  _I2C_ReadFromSlave
                     _bcd_to_decimal
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _bcd_to_decimal                                       4     2      2      62
                                             37 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _IfButtonPressedMovedToNextState                      3     2      1     120
                                             37 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _GenerateAmplitude                                    2     0      2     296
                                             37 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _GPIOInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CookTimeSet                                          2     2      0    2351
                                              0 BANK0      2     2      0
                  _I2C_ReadFromSlave
                 _IntToBcd_cook_time
           _bcd_to_decimal_cook_time
 ---------------------------------------------------------------------------------
 (2) _bcd_to_decimal_cook_time                             4     2      2      62
                                             37 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _IntToBcd_cook_time                                   3     3      0    1660
                                             45 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     793
                                             37 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     805
                                             37 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadFromSlave                                    2     2      0     561
                                             40 COMRAM     2     2      0
                           _I2C_Read
                          _I2C_Start
                   _I2C_WriteControl
                      _I2C_WriteData
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0      65
                                             38 COMRAM     2     2      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _CookTimeDisplay                                     32    30      2   10213
                                             14 BANK0      2     0      2
                                              0 BANK1     30    30      0
                            ___lwdiv
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _CheckCookDone                                       17    17      0    9774
                                              6 BANK0     17    17      0
                 _InitI2C_MasterMode
                         _WriteToDac
                         _clearAlarm
                          _lcd_clear
                        _lcd_command
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0     430
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _clearAlarm                                           2     2      0    4875
                                             44 COMRAM     2     2      0
                   _I2C_WriteToSlave
 ---------------------------------------------------------------------------------
 (2) _I2C_WriteToSlave                                     4     1      3    4875
                                             40 COMRAM     4     1      3
                          _I2C_Start
                           _I2C_Stop
                   _I2C_WriteControl
                      _I2C_WriteData
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteData                                        1     1      0      31
                                             38 COMRAM     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteControl                                     2     1      1     400
                                             38 COMRAM     2     1      1
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _WriteToDac                                          12     8      4     699
                                             38 COMRAM     6     2      4
                                              0 BANK0      6     6      0
                           _WriteSpi
 ---------------------------------------------------------------------------------
 (2) _WriteSpi                                             1     1      0      31
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_MasterMode                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BakeTempSet                                         29    27      2    9608
                                             14 BANK0      4     2      2
                                              0 BANK1     25    25      0
                            ___lwmod
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             22    16      6    4569
                                              1 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     592
                                             44 COMRAM     4     0      4
                                              0 BANK0      1     1      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1071
                                             37 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           4     2      2    3260
                                             40 COMRAM     4     2      2
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             3     3      0     430
                                             37 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0     430
                                             37 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 18    18      0     446
                                             19 COMRAM    18    18      0
                            _AdcRead
                       i2_WriteToDac
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_WriteToDac                                        12     8      4     210
                                              7 COMRAM    12     8      4
                         i2_WriteSpi
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2_WriteSpi                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _AdcRead                                              4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _BakeTempSet
     ___lwmod
       ___lwdiv (ARG)
     _lcd_char
     _lcd_command
     _lcd_string
       _lcd_char
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _CheckCookDone
     _InitI2C_MasterMode
     _WriteToDac
       _WriteSpi
     _clearAlarm
       _I2C_WriteToSlave
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_WriteControl
           _I2C_Wait
         _I2C_WriteData
           _I2C_Wait
     _lcd_clear
       _lcd_command
     _lcd_command
     _lcd_string
       _lcd_char
   _CookTimeDisplay
     ___lwdiv
     _lcd_char
     _lcd_command
     _lcd_string
       _lcd_char
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _CookTimeSet
     _I2C_ReadFromSlave
       _I2C_Read
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_WriteControl
         _I2C_Wait
       _I2C_WriteData
         _I2C_Wait
     _IntToBcd_cook_time
       ___awdiv
       ___awmod
     _bcd_to_decimal_cook_time
   _GPIOInit
   _GenerateAmplitude
   _IfButtonPressedMovedToNextState
   _InitI2C_MasterMode
   _ReadRTCAndDisplay
     _ReadAndDisplayHrFromRTC
       _I2C_ReadFromSlave
         _I2C_Read
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_WriteControl
           _I2C_Wait
         _I2C_WriteData
           _I2C_Wait
       _bcd_to_decimal
       _lcd_char
       _lcd_command
       _lcd_string
         _lcd_char
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _ReadAndDisplayMinFromRTC
       _I2C_ReadFromSlave
         _I2C_Read
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_WriteControl
           _I2C_Wait
         _I2C_WriteData
           _I2C_Wait
       _bcd_to_decimal
       _lcd_char
       _lcd_command
       _lcd_string
         _lcd_char
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _ReadAndDisplaySecFromRTC
       _I2C_ReadFromSlave
         _I2C_Read
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_WriteControl
           _I2C_Wait
         _I2C_WriteData
           _I2C_Wait
       _bcd_to_decimal
       _lcd_char
       _lcd_command
       _lcd_string
         _lcd_char
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lcd_char
     _lcd_command
     _lcd_string
       _lcd_char
   _SpiInit
   _TimeSetting
     ___lwdiv
     _lcd_char
     _lcd_command
     _lcd_string
       _lcd_char
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _Timer2Init
   _WriteTime
     _IntToBcd
       ___awdiv
       ___awmod
   _WriteTimeToCookToRTC
     _I2C_WriteToSlave
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_WriteControl
         _I2C_Wait
       _I2C_WriteData
         _I2C_Wait
   _WriteToDac
     _WriteSpi
   _WriteToRTC
     _I2C_WriteToSlave
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_WriteControl
         _I2C_Wait
       _I2C_WriteData
         _I2C_Wait
   _clearAlarm
     _I2C_WriteToSlave
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_WriteControl
         _I2C_Wait
       _I2C_WriteData
         _I2C_Wait
   _lcd_clear
     _lcd_command
   _lcd_command
   _lcd_init
     _lcd_command
   _lcd_string
     _lcd_char

 _ISR (ROOT)
   _AdcRead
   i2_WriteToDac
     i2_WriteSpi
     i2___lwdiv (ARG)
   i2___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      80      10       50.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     AF      C7       8       77.7%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     20      79       5       94.5%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     30      59       1       70.6%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     219       6        0.0%
DATA                 0      0     219       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 17 12:46:02 2018

                                       lcd_char@temp 0027                                   __size_of_I2C_Start 0008  
                                        _SSPSTATbits 000FC7                                                   l96 1016  
                                       ___awdiv@sign 002B                                                   _hr 0057  
                                ?_InitI2C_MasterMode 0001                                   i2___lwdiv@dividend 0001  
                                         _WRITE_MODE 0047                                          _BakeTempSet 16D8  
                                         i2_WriteSpi 24CC                                                  l100 1066  
                                                l101 1206                                                  l102 106C  
                                                l120 115E                                                  l104 1084  
                                                l113 1106                                                  l105 1094  
                                                l130 11DE                                                  l114 1136  
                                                l300 229A                                                  l108 10B6  
                                                l125 11C2                                                  l109 10F6  
                                                l118 1140                                                  l127 11C6  
                                                l119 114C                                                  l128 11DA  
                                                l153 1976                                                  l250 2348  
                                                l251 234A                                                  l155 1998  
                                                l148 2420                                                  l245 2452  
                                                l157 19BA                                                  l421 1C22  
                                                l159 19DC                                                  l504 21D6  
                                                l416 1B06                                                  l521 15E0  
                                                l281 24C4                                                  l522 1608  
                                                l426 1B94                                                  l523 1626  
                                                l515 15C0                                                  l516 15DA  
                                                l517 15E6                                                  l701 1E24  
                                                l526 16AA                                                  l702 1E1C  
                                                l527 1656                                                  l711 1F7E  
                                                l720 1FD0                                                  l712 1F8A  
                                                l392 12F8                                                  l705 1E44  
                                                l490 1582                                                  l706 1E4E  
                                                l714 1FA0                                                  l394 133C  
                                                l299 22B0                                                  l707 1E5C  
                                                l715 1F98                                                  l395 1386  
                                                l396 13B6                                                  l718 1FB8  
                                                l398 13FE                                                  l719 1FC2  
                                                l399 1448                                                  l489 1538  
                                                l934 2052                                                  l935 204A  
                                                l944 2138                                                  l945 2130  
                                                l938 2072                                                  l698 1DF6  
                                                l939 207C                                                  l699 1E06  
                                                l948 2150                                                  l949 215A  
                                                _PR2 000FCB                                                  _PEN 007E2A  
                                                _ISR 0008                                __size_ofi2_WriteToDac 0044  
                                                _min 0056                                                  _ptr 003D  
                                       ___awmod@sign 002B                               CookTimeDisplay@adcRead 00E7  
                                                wreg 000FE8                     __end_of_ReadAndDisplayMinFromRTC 1B36  
                                     _setCookTimeMin 0040                                         __CFG_LVP$OFF 000000  
                                               ?_ISR 0001                                         lcd_command@x 0028  
                                       __CFG_WDT$OFF 000000                        __size_of_WriteTimeToCookToRTC 0084  
                                               l4006 10F2                                                 l3434 1648  
                                               l2860 1976                                                 l3740 1386  
                                               l2872 19BA                                                 l3906 1582  
                                               l2866 1998                                                 l3764 1448  
                                               l3980 1090                                                 l3990 10B2  
                                               STR_1 100B                                                 STR_2 100B  
                                               STR_3 100B                                                 STR_4 100B  
                                               STR_5 100B                                                 STR_6 100B  
                                               STR_7 100B                                                 STR_8 100B  
                                               STR_9 100B                                                 u2000 1650  
                                               u2010 16B2                                                 u2020 16CA  
                                               u2120 1FA4                                                 u2201 1EC6  
                                               u2211 1258                                                 u2060 1E28  
                                               u2221 127C                                                 u1510 1982  
                                               u2231 12A0                                                 u2320 13F6  
                                               u2401 14AE                                                 u1530 19A4  
                                               u2411 14D2                                                 u2420 1530  
                                               u2341 1C62                                                 u1550 19C6  
                                               u2191 1EA2                                                 u2351 1CA0  
                                               u2361 16E8                                                 u2521 116E  
                                               u1490 1960                                                 u2371 170C  
                                               u2531 1192                                                 u1900 2056  
                                               u2381 1730                                                 u2461 1056  
                                               u2391 148A                                                 u2607 12CE  
                                               u2617 1308                                                 u1930 213C  
                                               u2707 1884                                                 u2627 13C6  
                                               u2717 189C                                                 u2637 240E  
                                               u2727 18C2                                                 u2647 2202  
                                               u2567 10A0                                                 u2737 18E6  
                                               u2657 175E                                                 u2577 10E0  
                                               u2747 18FE                                                 u2667 1814  
                                               u2587 111A                                                 u2757 1910  
                                               u2677 1838                                                 u2597 11AE  
                                               u2767 1932                                                 u2687 1850  
                   __end_of_ReadAndDisplaySecFromRTC 1BC4                                                 u2777 194A  
                                               u2697 1862                                                 _RCEN 007E2B  
                               ??_InitI2C_MasterMode 0026                                                 _main 1010  
                                    __end_of_AdcInit 250E                                      __end_of_AdcRead 2378  
                                BakeTempSet@nextMenu 0110                                     __end_of_I2C_Read 2350  
                                               fsr0h 000FEA                                                 fsr1h 000FE2  
                                 i2___lwdiv@quotient 0005                                                 fsr2h 000FDA  
                                               fsr0l 000FE9                                                 indf2 000FDF  
                                               fsr1l 000FE1                                                 fsr2l 000FD9  
                                               btemp 005A                                     __end_of_I2C_Wait 248C  
                                    i2WriteToDac@low 0011                                     __end_of_I2C_Stop 2500  
                                               prodh 000FF4                                                 prodl 000FF3  
                                               start 0126                                          lcd_string@i 002B  
                                        lcd_string@x 0029                              CookTimeDisplay@backMenu 0111  
                            __end_of_CookTimeDisplay 15B4                                  __end_of_CookTimeSet 21E6  
                                       ___param_bank 000000                                                ??_ISR 0014  
                                       i2_WriteToDac 2164                             ?_ReadAndDisplayHrFromRTC 0001  
                                    __end_of_SpiInit 2444                                     __end_of_GPIOInit 24F0  
                                              ?_main 0001                                                _ACKEN 007E2C  
                                              _ACKDT 007E2D                                      __end_of___awdiv 1E66  
                                              _ADRES 000FC3                                                STR_10 100B  
                                              STR_11 100B                                                STR_12 100B  
                                              STR_13 100B                                      __end_of___awmod 1FDA  
                                    ___awdiv@divisor 0028                                      __end_of___lwdiv 2086  
                                    __end_of___lwmod 2164                                                i2l170 00DA  
                                              i2l171 00A0                                                i2l172 0066  
                                              i2l174 00D8                                                i2l281 24D2  
                                              i2l188 2368                                                i2l934 20A4  
                                              i2l935 209C                                                i2l938 20C4  
                                              i2l939 20CE                                      ___awdiv@counter 002A  
                                              _PORTA 000F80                                                _TRISC 000F94  
                                              _SSPIF 007CF3                                     WriteToDac@output 00DD  
                           I2C_WriteToSlave@R_W_mode 0029                                      __end_of_dpowers 100B  
                            CookTimeDisplay@nextMenu 010A                                                _setHr 0044  
                                   i2WriteToDac@data 0008                                     i2WriteToDac@high 0010  
                                  __end_of_I2C_Start 2508                                       __CFG_BOREN$OFF 000000  
                                              pclath 000FFA                                                tablat 000FF5  
                                              plusw1 000FE3                                                plusw2 000FDB  
                                              status 000FD8                                                wtemp6 005B  
                                    __end_of_sprintf 16D8                                   __size_ofi2___lwdiv 0052  
                                    __initialization 19FE                                         __end_of_main 1248  
                                   __end_of_IntToBcd 225A                            bcd_to_decimal_cook_time@x 0029  
                                  _ReadRTCAndDisplay 1C52                                   ?_ReadRTCAndDisplay 0001  
                            TimeSetting@readADCInput 00E7                                          ?i2_WriteSpi 0001  
                                             ??_main 00F8                                        __activetblptr 000002  
   ReadAndDisplayHrFromRTC@hourContainerDisplay_1257 00E7                         I2C_ReadFromSlave@addressByte 0029  
                                ??_ReadRTCAndDisplay 0031                                     _I2C_WriteControl 2444  
               CookTimeSet@convertedCookMinutesToBCD 00DA                               __size_of_I2C_WriteData 000C  
                                             _ADCON2 000FC0                                            ??_AdcInit 0026  
                                          ??_AdcRead 0003                                    WriteToDac@command 00D9  
                                   ___awdiv@dividend 0026                                     _I2C_WriteToSlave 23C4  
                                   __end_of_WriteSpi 24CC                             _ReadAndDisplayMinFromRTC 1AA4  
                                             _TMR2IE 007CE9                                               _TMR2IF 007CF1  
                                        _CookTimeSet 21A8                                               _SSPADD 000FC8  
                                             _SSPBUF 000FC9                              TimeSetting@minContainer 011A  
                           _ReadAndDisplaySecFromRTC 1B36                               __size_of_CheckCookDone 0084  
                               I2C_WriteToSlave@data 002B                                           _Timer2Init 249E  
                    __end_of_ReadAndDisplayHrFromRTC 1C52                                            ??_SpiInit 0026  
                                      ??_TimeSetting 00E9                                     __end_of_lcd_char 18A6  
                                   ?_CookTimeDisplay 00E7                            __end_of_ReadRTCAndDisplay 1CDA  
                                   __end_of_lcd_init 2406                                 __size_of_lcd_command 00AE  
                                          ??___awdiv 002A                                            ??___awmod 002A  
                                          ??___lwdiv 002A                                               _hrRead 0042  
                                          ??___lwmod 0031                                               clear_0 1A84  
                                             clear_1 1A90                                     ___awdiv@quotient 002C  
                                             _setMin 0045                                      ___awmod@divisor 0028  
                             BakeTempSet@deliminator 010A                                      ___awmod@counter 002A  
                        __size_of_IntToBcd_cook_time 0036                                         __pdataCOMRAM 004B  
                     GenerateAmplitude@readAmplitude 0026                                            ?_I2C_Read 0001  
                                          ?_I2C_Wait 0001                                            ?_I2C_Stop 0001  
                                  __end_ofi2___lwdiv 20D8                                         __mediumconst 0000  
                                             tblptrh 000FF7                                               tblptrl 000FF6  
                                             tblptru 000FF8                                 CookTimeDisplay@F3152 008B  
                               CookTimeDisplay@F3154 00AF                                 CookTimeDisplay@F3156 00A8  
                               CookTimeDisplay@F3158 0050                                            ??_sprintf 0031  
                                  _I2C_ReadFromSlave 22F6                        TimeSetting@hourContainer_1229 0115  
                                         __accesstop 0080                                   ?_I2C_ReadFromSlave 0001  
                            __end_of__initialization 1A96                                            ?_GPIOInit 0001  
                                 __size_of_WriteTime 0032                                  __size_ofi2_WriteSpi 000E  
                                      ___rparam_used 000001          IfButtonPressedMovedToNextState@currentState 0026  
                                ??_I2C_ReadFromSlave 0029                                       __pcstackCOMRAM 0001  
                                      _I2C_WriteData 24DA                                       WriteToDac@data 0027  
                                     WriteToDac@high 00DB                                         __pidataBANK0 1FDA  
                                       __pidataBANK1 248C                                         __pidataBANK2 1EEA  
                                         _WriteToRTC 1CDA                                           _WriteToDac 20D8  
                          TimeSetting@setTimeDisplay 0100                                         ?_BakeTempSet 00E7  
                                __end_of_TimeSetting 147A                                        _CheckCookDone 1E66  
                                         ??_I2C_Read 0027                                           ??_I2C_Wait 0026  
                                         ??_I2C_Stop 0027                                   __size_of_lcd_clear 0008  
                          __end_of_I2C_ReadFromSlave 2328                                           __pbssBANK1 01C0  
                                          ?_IntToBcd 0001                                   CheckCookDone@F3210 0080  
                                 CheckCookDone@F3212 00D3                                           ??_GPIOInit 0026  
                                    lcd_command@temp 0027                                           _clearAlarm 21E6  
                           _bcd_to_decimal_cook_time 239E                    CookTimeDisplay@setBakeTimeDisplay 0100  
                                       WriteSpi@data 0026                                          ?_Timer2Init 0001  
                                     ?_I2C_WriteData 0001                                      bcd_to_decimal@x 0029  
                         __size_of_ReadRTCAndDisplay 0088                         __end_of_WriteTimeToCookToRTC 1DE2  
                                 CheckCookDone@clear 00EA                     I2C_ReadFromSlave@dataFromAddress 002A  
                                          ?_WriteSpi 0001                                              _T2CKPS1 007E51  
                                     ?_CheckCookDone 0001                                     BakeTempSet@F3131 00B5  
                                   BakeTempSet@F3127 0095                                     BakeTempSet@F3129 00BB  
                                  __end_of_WriteTime 22F6                                     I2C_Read@readData 0028  
                            __size_of_bcd_to_decimal 0026                                         _getModOfTemp 0033  
                   __size_of_ReadAndDisplayHrFromRTC 008E                                              _AdcInit 2508  
                                            _AdcRead 2350                                              _SSPCON1 000FC6  
                                            _SSPCON2 000FC5                                            ?_lcd_char 0001  
                                         _lcd_string 2290                                            ?_lcd_init 0001  
                                            _SSPSTAT 000FC7                                           _minAdcRead 0037  
                        __size_of_InitI2C_MasterMode 0018                                           ??_IntToBcd 002E  
                       ReadRTCAndDisplay@deliminator 00F6                                            _I2C_Start 2500  
                                            __Hparam 0000                                              __Lparam 0000  
                             ReadRTCAndDisplay@F3194 004B                               ReadRTCAndDisplay@F3196 0054  
                             ReadRTCAndDisplay@F3198 00C1                                              _SpiInit 2426  
                                  __end_of_lcd_clear 24F8                             __end_of_I2C_WriteControl 2462  
                                        _TimeSetting 1248                                          ?_WriteToRTC 0001  
                                        ?_WriteToDac 0027                                              ___awdiv 1DE2  
                                            ___awmod 1F6A                                              ___lwdiv 2034  
                                            ___lwmod 2120                             __end_of_I2C_WriteToSlave 23E6  
                                       __psmallconst 1000                                              __pcinit 19FE  
                                            __ramtop 1000                                         ??i2_WriteSpi 0001  
                             ReadRTCAndDisplay@bakeT 00EB                                           ??_WriteSpi 0026  
                                            __ptext0 1010                                              __ptext1 23E6  
                                            __ptext2 1CDA                                              __ptext3 1D5E  
                                            __ptext4 22C4                                              __ptext5 2224  
                                            __ptext6 249E                                              __ptext7 1248  
                                            __ptext8 2426                                              __ptext9 1C52  
                                       __size_of_ISR 011E                                              _minRead 0043  
                                            _dpowers 1001                                            _T2CONbits 000FCA  
                                   ___awmod@dividend 0026                           ??_ReadAndDisplayMinFromRTC 0031  
                                     main@sineLookup 011E                                              _sineOut 0049  
                         __size_of_I2C_ReadFromSlave 0032                                  __size_of_Timer2Init 0010  
                         ??_ReadAndDisplaySecFromRTC 0031                                           ??_lcd_char 0026  
                                            _sprintf 15B4                                           ??_lcd_init 0029  
                               end_of_initialization 1A96                                   i2WriteToDac@output 0012  
                                          _READ_MODE 0059                                         ?_CookTimeSet 0001  
                                      __Lmediumconst 0000                                           ?_I2C_Start 0001  
                                        ?_clearAlarm 0001                                      ??_I2C_WriteData 0027  
                                 __end_ofi2_WriteSpi 24DA                                              postdec1 000FE5  
                                            postdec2 000FDD                                              postinc0 000FEE  
                                            postinc2 000FDE                                      ??_CheckCookDone 002F  
                                          _PORTCbits 000F82                                            _PORTDbits 000F83  
                               __size_of_BakeTempSet 0120                                    _GenerateAmplitude 1954  
                                          _TRISAbits 000F92                                            _TRISCbits 000F94  
                                          _TRISDbits 000F95                                    __size_of_I2C_Read 0028  
                                 BakeTempSet@adcRead 00E7                                    __size_of_I2C_Wait 0012  
                                  __size_of_I2C_Stop 0008                                   ?_GenerateAmplitude 0026  
                                        ?_lcd_string 0029                                i2WriteToDac@frequency 000A  
                                  i2___lwdiv@divisor 0003                                 _WriteTimeToCookToRTC 1D5E  
                                          i2___lwdiv 2086                                  __size_of_WriteToRTC 0084  
                                __size_of_WriteToDac 0048                                    i2___lwdiv@counter 0007  
                                         main@baking 019E                                           main@cancel 01A8  
                                          IntToBcd@x 0030                                  ??_GenerateAmplitude 0028  
                                      ??_lcd_command 0026                                    __size_of_GPIOInit 000A  
                       WriteTime@convertedHoursToBCD 00DA                                         _readADCInput 01C4  
                                     i2WriteSpi@data 0001                           __end_of_IntToBcd_cook_time 2290  
                                      __pidataCOMRAM 24AE                                CookTimeSet@currentMin 00D9  
                           __size_of_CookTimeDisplay 013A                            __end_of_GenerateAmplitude 19FE  
        ReadAndDisplayHrFromRTC@hourContainerDisplay 00EA                                  __size_of_clearAlarm 003E  
                                start_initialization 19FE                                       _bcd_to_decimal 2378  
                                        __end_of_ISR 0126                              _ReadAndDisplayHrFromRTC 1BC4  
                         ??_bcd_to_decimal_cook_time 0028                                ?_WriteTimeToCookToRTC 0001  
                                         ?i2___lwdiv 0001                             TimeSetting@hourContainer 0119  
                                   __CFG_OSC$INTIO67 000000                          I2C_WriteToSlave@addressByte 002A  
                                        ??_I2C_Start 0027                                    __size_of_IntToBcd 0036  
                                  _amplitudeDivision 003B                                         ??_Timer2Init 0026  
                                    _cookTimeAdcRead 0031                                        ?i2_WriteToDac 0008  
                                __end_of_lcd_command 1954                                          __pdataBANK0 0080  
                                        __pdataBANK1 01AF                                          __pdataBANK2 0200  
                           I2C_WriteControl@R_W_mode 0027                                  __size_of_lcd_string 0034  
                             __end_of_bcd_to_decimal 239E          ReadAndDisplayMinFromRTC@minContainerDisplay 00EA  
                                  __size_of_WriteSpi 000E                                          __pbssCOMRAM 0031  
                                      __pcstackBANK0 00D9                                        __pcstackBANK1 0100  
                                IntToBcd_cook_time@x 0030                                        WriteToDac@low 00DC  
                                          _WriteTime 22C4                                             ?_AdcInit 0001  
                                           ?_AdcRead 0001                                   __end_of_Timer2Init 24AE  
                                  __size_of_lcd_char 00AE                                    __size_of_lcd_init 0020  
                   CookTimeDisplay@cookTimeContainer 011D                                          sprintf@flag 00E0  
                       TimeSetting@minContainer_1233 0117                                          sprintf@prec 00E5  
                                          _hrAdcRead 0039                                 __size_of_CookTimeSet 003E  
                                   ___lwdiv@dividend 0026                                             ?_SpiInit 0001  
                                        I2C_Read@ack 0027                                         ?_TimeSetting 00E7  
                                     ??i2_WriteToDac 000C                                            __pintcode 0008  
                                  ?_I2C_WriteControl 0027                                         ??_WriteToRTC 002D  
                                       ??_WriteToDac 002B                                       _cursorLocation 0046  
                                           ?___awdiv 0026                                             ?___awmod 0026  
                                           ?___lwdiv 0026                                             ?___lwmod 002D  
                                 ??_I2C_WriteControl 0028                                    ?_I2C_WriteToSlave 0029  
                                          _lcd_clear 24F0                       WriteTimeToCookToRTC@WRITE_MODE 002D  
            __end_of_IfButtonPressedMovedToNextState 2426             __size_of_IfButtonPressedMovedToNextState 0020  
                  ??_IfButtonPressedMovedToNextState 0027                     ?_IfButtonPressedMovedToNextState 0026  
                    _IfButtonPressedMovedToNextState 2406                                   ??_I2C_WriteToSlave 002C  
                                    ?_bcd_to_decimal 0026                           __size_of_GenerateAmplitude 00AA  
                          ??_ReadAndDisplayHrFromRTC 0031                                          __smallconst 1000  
                                           _I2C_Read 2328                                             _I2C_Wait 247A  
                                           _I2C_Stop 24F8                                CheckCookDone@bakeDone 00DF  
                      BakeTempSet@setBakeTempDisplay 0100                               ??_WriteTimeToCookToRTC 002D  
                                         ?_WriteTime 0001                                    ??_CookTimeDisplay 0031  
                                   ___lwdiv@quotient 002B                           __end_of_InitI2C_MasterMode 247A  
                                           ?_sprintf 00DA                                          ??i2___lwdiv 0005  
                                WriteToDac@frequency 0029                                ReadRTCAndDisplay@time 00F1  
                                 __end_of_WriteToRTC 1D5E                                   __end_of_WriteToDac 2120  
                                           _T2OUTPS0 007E53                                             _T2OUTPS1 007E54  
                                           _T2OUTPS2 007E55                                             _T2OUTPS3 007E56  
                                           _GPIOInit 24E6                                             _LATDbits 000F8C  
                                       ??_clearAlarm 002D                                          _lcd_command 18A6  
                                           i2u167_40 20A8                                             _PIR1bits 000F9E  
                       BakeTempSet@bakeTempContainer 0116                                            main@F3200 0200  
                                          main@F3205 01AF                                            main@F3207 01B9  
              CookTimeDisplay@cookTimeContainer_1314 011B                                           ?_lcd_clear 0001  
                                          lcd_char@x 0028                                           _ADCON0bits 000FC2  
                                         _ADCON1bits 000FC1                                   __end_of_clearAlarm 2224  
                                    _readBakeTempADC 01C2                     __end_of_bcd_to_decimal_cook_time 23C4  
                     WriteTime@convertedMinutesToBCD 00D9                                         ??_lcd_string 002B  
                                          copy_data0 1A12                                            copy_data1 1A32  
                                          copy_data2 1A52                                            copy_data3 1A72  
                                   __size_of_AdcInit 0006                                     __size_of_AdcRead 0028  
                                           _IntToBcd 2224       ReadAndDisplaySecFromRTC@secondContainerDisplay 00EA  
                  __size_of_ReadAndDisplayMinFromRTC 0092                            ?_ReadAndDisplayMinFromRTC 0001  
                       ReadAndDisplayHrFromRTC@hours 00E9                                             __Hrparam 0000  
                              __end_of_I2C_WriteData 24E6                                             __Lrparam 0000  
                  __size_of_ReadAndDisplaySecFromRTC 008E                                     __size_of_SpiInit 001E  
                          ?_ReadAndDisplaySecFromRTC 0001                                     __size_of___awdiv 0084  
                                   __size_of___awmod 0070                                     __size_of___lwdiv 0052  
                                 __end_of_lcd_string 22C4                                     __size_of___lwmod 0044  
                                      ??_BakeTempSet 00E9                                             _WriteSpi 24BE  
                                           _bakeTemp 01C0                                __end_of_CheckCookDone 1EEA  
                                         sprintf@val 00E3                                    _currentMinFromRTC 003F  
                                           _alarmSet 004A                                      ___lwdiv@divisor 0028  
                                    ___lwdiv@counter 002A                                          ??_WriteTime 0031  
                                           __ptext10 1B36                                             __ptext11 1AA4  
                                 _IntToBcd_cook_time 225A                                             __ptext20 1F6A  
                                           __ptext12 1BC4                                             __ptext21 1DE2  
                                           __ptext13 2378                                             __ptext30 2444  
                                           __ptext22 22F6                                             __ptext14 2406  
                                           __ptext31 24F8                                             __ptext23 2328  
                                           __ptext15 1954                                             __ptext40 2034  
                                           __ptext32 2500                                             __ptext24 147A  
                                           __ptext16 24E6                                             __ptext41 2290  
                                           __ptext33 247A                                             __ptext25 1E66  
                                           __ptext17 21A8                                             __ptext42 17F8  
                                           __ptext34 20D8                                             __ptext26 24F0  
                                           __ptext18 239E                                             __ptext43 18A6  
                                           __ptext35 24BE                                             __ptext27 21E6  
                                           __ptext19 225A                                             __ptext44 2508  
                                           __ptext36 2462                                             __ptext28 23C4  
                                           __ptext37 16D8                                             __ptext29 24DA  
                                           __ptext46 2086                                             __ptext38 15B4  
                                           __ptext47 2164                                             __ptext39 2120  
                                           __ptext48 24CC                                             __ptext49 2350  
                                           _lcd_char 17F8                                 __end_ofi2_WriteToDac 21A8  
                                           _lcd_init 23E6                                     __size_of_sprintf 0124  
                                ?_IntToBcd_cook_time 0001                                        __size_of_main 0238  
                                           _iterator 0048                         I2C_WriteToSlave@slaveAddress 002C  
                                         _LCD_STATES 01C6                          ReadAndDisplayMinFromRTC@min 00E9  
                                i2WriteToDac@command 000E                                             int$flags 005A  
                               __size_of_TimeSetting 0232                                          ??_lcd_clear 0029  
                               ??_IntToBcd_cook_time 002E                                           _INTCONbits 000FF2  
                                        _secondsRead 0041                                  __end_of_BakeTempSet 17F8  
                                        _tempAdcRead 0035             IfButtonPressedMovedToNextState@nextState 0028  
                                           intlevel2 0000                                            sprintf@ap 00E1  
                                          sprintf@sp 00DA                                     TimeSetting@F3160 009F  
                                   TimeSetting@F3162 00CD                                     TimeSetting@F3164 00C7  
                                   ___lwmod@dividend 002D                                       AdcRead@channel 0004  
                                         _OSCCONbits 000FD3  ReadAndDisplaySecFromRTC@secondContainerDisplay_1263 00E7  
                  __size_of_bcd_to_decimal_cook_time 0026                            ?_bcd_to_decimal_cook_time 0026  
                                   ??_bcd_to_decimal 0028                                          _RTC_ADDRESS 0058  
                                  I2C_WriteData@data 0027                                      _CookTimeDisplay 147A  
                       I2C_WriteControl@slaveAddress 0028     ReadAndDisplayMinFromRTC@minContainerDisplay_1251 00E7  
                                           sprintf@c 00E6                                             sprintf@f 00DC  
                                    ___lwmod@divisor 002F                                      ___lwmod@counter 00D9  
                               WriteToRTC@WRITE_MODE 002D                            __size_of_I2C_WriteControl 001E  
                          CookTimeDisplay@minDisplay 0117                                          _SSPCON1bits 000FC6  
                                        _SSPCON2bits 000FC5                                      TimeSetting@next 010F  
                                    TimeSetting@move 0109                            __size_of_I2C_WriteToSlave 0022  
                    ReadAndDisplaySecFromRTC@seconds 00E9                                        ??_CookTimeSet 0031  
                                       ?_lcd_command 0001                                   _InitI2C_MasterMode 2462  
