

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 18 16:03:47 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74  0000                     
    75                           ; Version 1.45
    76                           ; Generated 16/11/2017 GMT
    77                           ; 
    78                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution.
    92                           ; 
    93                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    94                           ;        software without specific prior written permission.
    95                           ; 
    96                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    97                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    98                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    99                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   100                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   101                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   102                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   103                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   104                           ; 
   105                           ; 
   106                           ; Code-generator required, PIC18LF4620 Definitions
   107                           ; 
   108                           ; SFR Addresses
   109  0000                     
   110                           	psect	idataCOMRAM
   111  0024A8                     __pidataCOMRAM:
   112                           	opt stack 0
   113                           
   114                           ;initializer for ReadRTCAndDisplay@F3194
   115  0024A8  54                 	db	84
   116  0024A9  69                 	db	105
   117  0024AA  6D                 	db	109
   118  0024AB  65                 	db	101
   119  0024AC  00                 	db	0
   120                           
   121                           ;initializer for CookTimeDisplay@F3158
   122  0024AD  4D                 	db	77
   123  0024AE  49                 	db	73
   124  0024AF  4E                 	db	78
   125  0024B0  00                 	db	0
   126                           
   127                           ;initializer for ReadRTCAndDisplay@F3196
   128  0024B1  7C                 	db	124
   129  0024B2  00                 	db	0
   130                           
   131                           ;initializer for _min
   132  0024B3  02                 	db	2
   133                           
   134                           ;initializer for _hr
   135  0024B4  01                 	db	1
   136                           
   137                           ;initializer for _RTC_ADDRESS
   138  0024B5  DE                 	db	222
   139                           
   140                           ;initializer for _READ_MODE
   141  0024B6  01                 	db	1
   142                           
   143                           	psect	idataBANK0
   144  001FE6                     __pidataBANK0:
   145                           	opt stack 0
   146                           
   147                           ;initializer for CheckCookDone@F3209
   148  001FE6  42                 	db	66
   149  001FE7  61                 	db	97
   150  001FE8  6B                 	db	107
   151  001FE9  65                 	db	101
   152  001FEA  20                 	db	32
   153  001FEB  44                 	db	68
   154  001FEC  6F                 	db	111
   155  001FED  6E                 	db	110
   156  001FEE  65                 	db	101
   157  001FEF  21                 	db	33
   158  001FF0  00                 	db	0
   159                           
   160                           ;initializer for CookTimeDisplay@F3152
   161  001FF1  42                 	db	66
   162  001FF2  61                 	db	97
   163  001FF3  6B                 	db	107
   164  001FF4  65                 	db	101
   165  001FF5  20                 	db	32
   166  001FF6  54                 	db	84
   167  001FF7  69                 	db	105
   168  001FF8  6D                 	db	109
   169  001FF9  65                 	db	101
   170  001FFA  00                 	db	0
   171                           
   172                           ;initializer for BakeTempSet@F3127
   173  001FFB  42                 	db	66
   174  001FFC  61                 	db	97
   175  001FFD  6B                 	db	107
   176  001FFE  65                 	db	101
   177  001FFF  20                 	db	32
   178  002000  54                 	db	84
   179  002001  65                 	db	101
   180  002002  6D                 	db	109
   181  002003  70                 	db	112
   182  002004  00                 	db	0
   183                           
   184                           ;initializer for TimeSetting@F3160
   185  002005  53                 	db	83
   186  002006  65                 	db	101
   187  002007  74                 	db	116
   188  002008  20                 	db	32
   189  002009  54                 	db	84
   190  00200A  69                 	db	105
   191  00200B  6D                 	db	109
   192  00200C  65                 	db	101
   193  00200D  00                 	db	0
   194                           
   195                           ;initializer for CookTimeDisplay@F3156
   196  00200E  7C                 	db	124
   197  00200F  53                 	db	83
   198  002010  74                 	db	116
   199  002011  61                 	db	97
   200  002012  72                 	db	114
   201  002013  74                 	db	116
   202  002014  00                 	db	0
   203                           
   204                           ;initializer for CookTimeDisplay@F3154
   205  002015  7C                 	db	124
   206  002016  42                 	db	66
   207  002017  61                 	db	97
   208  002018  63                 	db	99
   209  002019  6B                 	db	107
   210  00201A  00                 	db	0
   211                           
   212                           ;initializer for BakeTempSet@F3131
   213  00201B  7C                 	db	124
   214  00201C  4E                 	db	78
   215  00201D  65                 	db	101
   216  00201E  78                 	db	120
   217  00201F  74                 	db	116
   218  002020  00                 	db	0
   219                           
   220                           ;initializer for BakeTempSet@F3129
   221  002021  7C                 	db	124
   222  002022  42                 	db	66
   223  002023  61                 	db	97
   224  002024  63                 	db	99
   225  002025  6B                 	db	107
   226  002026  00                 	db	0
   227                           
   228                           ;initializer for ReadRTCAndDisplay@F3198
   229  002027  7C                 	db	124
   230  002028  42                 	db	66
   231  002029  61                 	db	97
   232  00202A  6B                 	db	107
   233  00202B  65                 	db	101
   234  00202C  00                 	db	0
   235                           
   236                           ;initializer for TimeSetting@F3164
   237  00202D  7C                 	db	124
   238  00202E  4E                 	db	78
   239  00202F  65                 	db	101
   240  002030  78                 	db	120
   241  002031  74                 	db	116
   242  002032  00                 	db	0
   243                           
   244                           ;initializer for TimeSetting@F3162
   245  002033  7C                 	db	124
   246  002034  4D                 	db	77
   247  002035  6F                 	db	111
   248  002036  76                 	db	118
   249  002037  65                 	db	101
   250  002038  00                 	db	0
   251                           
   252                           ;initializer for CheckCookDone@F3211
   253  002039  43                 	db	67
   254  00203A  6C                 	db	108
   255  00203B  65                 	db	101
   256  00203C  61                 	db	97
   257  00203D  72                 	db	114
   258  00203E  00                 	db	0
   259                           
   260                           	psect	idataBANK1
   261  0024EE                     __pidataBANK1:
   262                           	opt stack 0
   263                           
   264                           ;initializer for main@F3205
   265  0024EE  42                 	db	66
   266  0024EF  61                 	db	97
   267  0024F0  6B                 	db	107
   268  0024F1  69                 	db	105
   269  0024F2  6E                 	db	110
   270  0024F3  67                 	db	103
   271  0024F4  2E                 	db	46
   272  0024F5  2E                 	db	46
   273  0024F6  2E                 	db	46
   274  0024F7  00                 	db	0
   275                           
   276                           	psect	idataBANK2
   277  001EF6                     __pidataBANK2:
   278                           	opt stack 0
   279                           
   280                           ;initializer for main@F3200
   281  001EF6  0200               	dw	512
   282  001EF8  0232               	dw	562
   283  001EFA  0263               	dw	611
   284  001EFC  0294               	dw	660
   285  001EFE  02C3               	dw	707
   286  001F00  02F1               	dw	753
   287  001F02  031C               	dw	796
   288  001F04  0344               	dw	836
   289  001F06  0369               	dw	873
   290  001F08  038B               	dw	907
   291  001F0A  03A9               	dw	937
   292  001F0C  03C3               	dw	963
   293  001F0E  03D8               	dw	984
   294  001F10  03E9               	dw	1001
   295  001F12  03F5               	dw	1013
   296  001F14  03FD               	dw	1021
   297  001F16  03FF               	dw	1023
   298  001F18  03FD               	dw	1021
   299  001F1A  03F5               	dw	1013
   300  001F1C  03E9               	dw	1001
   301  001F1E  03D8               	dw	984
   302  001F20  03C3               	dw	963
   303  001F22  03A9               	dw	937
   304  001F24  038B               	dw	907
   305  001F26  0369               	dw	873
   306  001F28  0344               	dw	836
   307  001F2A  031C               	dw	796
   308  001F2C  02F1               	dw	753
   309  001F2E  02C3               	dw	707
   310  001F30  0294               	dw	660
   311  001F32  0263               	dw	611
   312  001F34  0232               	dw	562
   313  001F36  0200               	dw	512
   314  001F38  01CD               	dw	461
   315  001F3A  019C               	dw	412
   316  001F3C  016B               	dw	363
   317  001F3E  013C               	dw	316
   318  001F40  010E               	dw	270
   319  001F42  00E3               	dw	227
   320  001F44  00BB               	dw	187
   321  001F46  0096               	dw	150
   322  001F48  0074               	dw	116
   323  001F4A  0056               	dw	86
   324  001F4C  003C               	dw	60
   325  001F4E  0027               	dw	39
   326  001F50  0016               	dw	22
   327  001F52  000A               	dw	10
   328  001F54  0002               	dw	2
   329  001F56  0000               	dw	0
   330  001F58  0002               	dw	2
   331  001F5A  000A               	dw	10
   332  001F5C  0016               	dw	22
   333  001F5E  0027               	dw	39
   334  001F60  003C               	dw	60
   335  001F62  0056               	dw	86
   336  001F64  0074               	dw	116
   337  001F66  0096               	dw	150
   338  001F68  00BB               	dw	187
   339  001F6A  00E3               	dw	227
   340  001F6C  010E               	dw	270
   341  001F6E  013C               	dw	316
   342  001F70  016B               	dw	363
   343  001F72  019C               	dw	412
   344  001F74  01CD               	dw	461
   345                           
   346                           	psect	smallconst
   347  001000                     __psmallconst:
   348                           	opt stack 0
   349  001000  00                 	db	0
   350  001001                     _dpowers:
   351                           	opt stack 0
   352  001001  0001               	dw	1
   353  001003  000A               	dw	10
   354  001005  0064               	dw	100
   355  001007  03E8               	dw	1000
   356  001009  2710               	dw	10000
   357  00100B                     __end_of_dpowers:
   358                           	opt stack 0
   359  0000                     _ADRES	set	4035
   360  0000                     _T2CONbits	set	4042
   361  0000                     _PORTA	set	3968
   362  0000                     _PORTCbits	set	3970
   363  0000                     _PIR1bits	set	3998
   364  0000                     _SSPCON1bits	set	4038
   365  0000                     _SSPSTATbits	set	4039
   366  0000                     _TRISAbits	set	3986
   367  0000                     _TRISC	set	3988
   368  0000                     _SSPBUF	set	4041
   369  0000                     _SSPCON2bits	set	4037
   370  0000                     _TRISCbits	set	3988
   371  0000                     _SSPSTAT	set	4039
   372  0000                     _SSPADD	set	4040
   373  0000                     _SSPCON2	set	4037
   374  0000                     _SSPCON1	set	4038
   375  0000                     _ADCON0bits	set	4034
   376  0000                     _ADCON2	set	4032
   377  0000                     _LATCbits	set	3979
   378  0000                     _PR2	set	4043
   379  0000                     _PORTDbits	set	3971
   380  0000                     _INTCONbits	set	4082
   381  0000                     _ADCON1bits	set	4033
   382  0000                     _LATDbits	set	3980
   383  0000                     _TRISDbits	set	3989
   384  0000                     _OSCCONbits	set	4051
   385  0000                     _T2OUTPS0	set	32339
   386  0000                     _T2OUTPS1	set	32340
   387  0000                     _T2OUTPS2	set	32341
   388  0000                     _T2OUTPS3	set	32342
   389  0000                     _ACKEN	set	32300
   390  0000                     _ACKDT	set	32301
   391  0000                     _RCEN	set	32299
   392  0000                     _PEN	set	32298
   393  0000                     _SSPIF	set	31987
   394  0000                     _TMR2IF	set	31985
   395  0000                     _T2CKPS1	set	32337
   396  0000                     _TMR2IE	set	31977
   397  00100B                     STR_1:
   398  00100B  25                 	db	37
   399  00100C  75                 	db	117	;'u'
   400  00100D  00                 	db	0
   401  0000                     
   402                           ; #config settings
   403  00100E  00                 	db	0	; dummy byte at the end
   404  0000                     
   405                           	psect	cinit
   406  00196C                     __pcinit:
   407                           	opt stack 0
   408  00196C                     start_initialization:
   409                           	opt stack 0
   410  00196C                     __initialization:
   411                           	opt stack 0
   412                           
   413                           ; Initialize objects allocated to BANK2 (128 bytes)
   414                           ; load TBLPTR registers with __pidataBANK2
   415  00196C  0EF6               	movlw	low __pidataBANK2
   416  00196E  6EF6               	movwf	tblptrl,c
   417  001970  0E1E               	movlw	high __pidataBANK2
   418  001972  6EF7               	movwf	tblptrh,c
   419  001974  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   420  001976  6EF8               	movwf	tblptru,c
   421  001978  EE02  F000         	lfsr	0,__pdataBANK2
   422  00197C  EE10 F080          	lfsr	1,128
   423  001980                     copy_data0:
   424  001980  0009               	tblrd		*+
   425  001982  CFF5 FFEE          	movff	tablat,postinc0
   426  001986  50E5               	movf	postdec1,w,c
   427  001988  50E1               	movf	fsr1l,w,c
   428  00198A  E1FA               	bnz	copy_data0
   429                           
   430                           ; Initialize objects allocated to BANK1 (10 bytes)
   431                           ; load TBLPTR registers with __pidataBANK1
   432  00198C  0EEE               	movlw	low __pidataBANK1
   433  00198E  6EF6               	movwf	tblptrl,c
   434  001990  0E24               	movlw	high __pidataBANK1
   435  001992  6EF7               	movwf	tblptrh,c
   436  001994  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   437  001996  6EF8               	movwf	tblptru,c
   438  001998  EE01  F0AC         	lfsr	0,__pdataBANK1
   439  00199C  EE10 F00A          	lfsr	1,10
   440  0019A0                     copy_data1:
   441  0019A0  0009               	tblrd		*+
   442  0019A2  CFF5 FFEE          	movff	tablat,postinc0
   443  0019A6  50E5               	movf	postdec1,w,c
   444  0019A8  50E1               	movf	fsr1l,w,c
   445  0019AA  E1FA               	bnz	copy_data1
   446                           
   447                           ; Initialize objects allocated to BANK0 (89 bytes)
   448                           ; load TBLPTR registers with __pidataBANK0
   449  0019AC  0EE6               	movlw	low __pidataBANK0
   450  0019AE  6EF6               	movwf	tblptrl,c
   451  0019B0  0E1F               	movlw	high __pidataBANK0
   452  0019B2  6EF7               	movwf	tblptrh,c
   453  0019B4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   454  0019B6  6EF8               	movwf	tblptru,c
   455  0019B8  EE00  F080         	lfsr	0,__pdataBANK0
   456  0019BC  EE10 F059          	lfsr	1,89
   457  0019C0                     copy_data2:
   458  0019C0  0009               	tblrd		*+
   459  0019C2  CFF5 FFEE          	movff	tablat,postinc0
   460  0019C6  50E5               	movf	postdec1,w,c
   461  0019C8  50E1               	movf	fsr1l,w,c
   462  0019CA  E1FA               	bnz	copy_data2
   463                           
   464                           ; Initialize objects allocated to COMRAM (15 bytes)
   465                           ; load TBLPTR registers with __pidataCOMRAM
   466  0019CC  0EA8               	movlw	low __pidataCOMRAM
   467  0019CE  6EF6               	movwf	tblptrl,c
   468  0019D0  0E24               	movlw	high __pidataCOMRAM
   469  0019D2  6EF7               	movwf	tblptrh,c
   470  0019D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   471  0019D6  6EF8               	movwf	tblptru,c
   472  0019D8  EE00  F04B         	lfsr	0,__pdataCOMRAM
   473  0019DC  EE10 F00F          	lfsr	1,15
   474  0019E0                     copy_data3:
   475  0019E0  0009               	tblrd		*+
   476  0019E2  CFF5 FFEE          	movff	tablat,postinc0
   477  0019E6  50E5               	movf	postdec1,w,c
   478  0019E8  50E1               	movf	fsr1l,w,c
   479  0019EA  E1FA               	bnz	copy_data3
   480                           
   481                           ; Clear objects allocated to BANK1 (7 bytes)
   482  0019EC  EE01  F0B6         	lfsr	0,__pbssBANK1
   483  0019F0  0E07               	movlw	7
   484  0019F2                     clear_0:
   485  0019F2  6AEE               	clrf	postinc0,c
   486  0019F4  06E8               	decf	wreg,f,c
   487  0019F6  E1FD               	bnz	clear_0
   488                           
   489                           ; Clear objects allocated to COMRAM (26 bytes)
   490  0019F8  EE00  F031         	lfsr	0,__pbssCOMRAM
   491  0019FC  0E1A               	movlw	26
   492  0019FE                     clear_1:
   493  0019FE  6AEE               	clrf	postinc0,c
   494  001A00  06E8               	decf	wreg,f,c
   495  001A02  E1FD               	bnz	clear_1
   496  001A04                     end_of_initialization:
   497                           	opt stack 0
   498  001A04                     __end_of__initialization:
   499                           	opt stack 0
   500  001A04  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   501  001A06  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   502  001A08  0E00               	movlw	low (__Lmediumconst shr (0+16))
   503  001A0A  6EF8               	movwf	tblptru,c
   504  001A0C  0100               	movlb	0
   505  001A0E  EF08  F008         	goto	_main	;jump to C main() function
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	bssCOMRAM
   516  000031                     __pbssCOMRAM:
   517                           	opt stack 0
   518  000031                     _cookTimeAdcRead:
   519                           	opt stack 0
   520  000031                     	ds	2
   521  000033                     _getModOfTemp:
   522                           	opt stack 0
   523  000033                     	ds	2
   524  000035                     _tempAdcRead:
   525                           	opt stack 0
   526  000035                     	ds	2
   527  000037                     _minAdcRead:
   528                           	opt stack 0
   529  000037                     	ds	2
   530  000039                     _hrAdcRead:
   531                           	opt stack 0
   532  000039                     	ds	2
   533  00003B                     _amplitudeDivision:
   534                           	opt stack 0
   535  00003B                     	ds	2
   536  00003D                     _ptr:
   537                           	opt stack 0
   538  00003D                     	ds	2
   539  00003F                     _currentMinFromRTC:
   540                           	opt stack 0
   541  00003F                     	ds	1
   542  000040                     _setCookTimeMin:
   543                           	opt stack 0
   544  000040                     	ds	1
   545  000041                     _secondsRead:
   546                           	opt stack 0
   547  000041                     	ds	1
   548  000042                     _hrRead:
   549                           	opt stack 0
   550  000042                     	ds	1
   551  000043                     _minRead:
   552                           	opt stack 0
   553  000043                     	ds	1
   554  000044                     _setHr:
   555                           	opt stack 0
   556  000044                     	ds	1
   557  000045                     _setMin:
   558                           	opt stack 0
   559  000045                     	ds	1
   560  000046                     _cursorLocation:
   561                           	opt stack 0
   562  000046                     	ds	1
   563  000047                     _WRITE_MODE:
   564                           	opt stack 0
   565  000047                     	ds	1
   566  000048                     _iterator:
   567                           	opt stack 0
   568  000048                     	ds	1
   569  000049                     _sineOut:
   570                           	opt stack 0
   571  000049                     	ds	1
   572  00004A                     _alarmSet:
   573                           	opt stack 0
   574  00004A                     	ds	1
   575                           tblptru	equ	0xFF8
   576                           tblptrh	equ	0xFF7
   577                           tblptrl	equ	0xFF6
   578                           tablat	equ	0xFF5
   579                           postinc0	equ	0xFEE
   580                           wreg	equ	0xFE8
   581                           postdec1	equ	0xFE5
   582                           fsr1l	equ	0xFE1
   583                           
   584                           	psect	dataCOMRAM
   585  00004B                     __pdataCOMRAM:
   586                           	opt stack 0
   587  00004B                     ReadRTCAndDisplay@F3194:
   588                           	opt stack 0
   589  00004B                     	ds	5
   590  000050                     CookTimeDisplay@F3158:
   591                           	opt stack 0
   592  000050                     	ds	4
   593  000054                     ReadRTCAndDisplay@F3196:
   594                           	opt stack 0
   595  000054                     	ds	2
   596  000056                     _min:
   597                           	opt stack 0
   598  000056                     	ds	1
   599  000057                     _hr:
   600                           	opt stack 0
   601  000057                     	ds	1
   602  000058                     	ds	1
   603  000059                     _READ_MODE:
   604                           	opt stack 0
   605  000059                     	ds	1
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           wreg	equ	0xFE8
   612                           postdec1	equ	0xFE5
   613                           fsr1l	equ	0xFE1
   614                           
   615                           	psect	dataBANK0
   616  000080                     __pdataBANK0:
   617                           	opt stack 0
   618  000080                     CheckCookDone@F3209:
   619                           	opt stack 0
   620  000080                     	ds	11
   621  00008B                     CookTimeDisplay@F3152:
   622                           	opt stack 0
   623  00008B                     	ds	10
   624  000095                     BakeTempSet@F3127:
   625                           	opt stack 0
   626  000095                     	ds	10
   627  00009F                     TimeSetting@F3160:
   628                           	opt stack 0
   629  00009F                     	ds	9
   630  0000A8                     CookTimeDisplay@F3156:
   631                           	opt stack 0
   632  0000A8                     	ds	7
   633  0000AF                     CookTimeDisplay@F3154:
   634                           	opt stack 0
   635  0000AF                     	ds	6
   636  0000B5                     BakeTempSet@F3131:
   637                           	opt stack 0
   638  0000B5                     	ds	6
   639  0000BB                     BakeTempSet@F3129:
   640                           	opt stack 0
   641  0000BB                     	ds	6
   642  0000C1                     ReadRTCAndDisplay@F3198:
   643                           	opt stack 0
   644  0000C1                     	ds	6
   645  0000C7                     TimeSetting@F3164:
   646                           	opt stack 0
   647  0000C7                     	ds	6
   648  0000CD                     TimeSetting@F3162:
   649                           	opt stack 0
   650  0000CD                     	ds	6
   651  0000D3                     CheckCookDone@F3211:
   652                           	opt stack 0
   653  0000D3                     	ds	6
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           postdec1	equ	0xFE5
   661                           fsr1l	equ	0xFE1
   662                           
   663                           	psect	bssBANK1
   664  0001B6                     __pbssBANK1:
   665                           	opt stack 0
   666  0001B6                     _bakeTemp:
   667                           	opt stack 0
   668  0001B6                     	ds	2
   669  0001B8                     _readBakeTempADC:
   670                           	opt stack 0
   671  0001B8                     	ds	2
   672  0001BA                     _readADCInput:
   673                           	opt stack 0
   674  0001BA                     	ds	2
   675  0001BC                     _LCD_STATES:
   676                           	opt stack 0
   677  0001BC                     	ds	1
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           postdec1	equ	0xFE5
   685                           fsr1l	equ	0xFE1
   686                           
   687                           	psect	dataBANK1
   688  0001AC                     __pdataBANK1:
   689                           	opt stack 0
   690  0001AC                     main@F3205:
   691                           	opt stack 0
   692  0001AC                     	ds	10
   693                           tblptru	equ	0xFF8
   694                           tblptrh	equ	0xFF7
   695                           tblptrl	equ	0xFF6
   696                           tablat	equ	0xFF5
   697                           postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           postdec1	equ	0xFE5
   700                           fsr1l	equ	0xFE1
   701                           
   702                           	psect	dataBANK2
   703  000200                     __pdataBANK2:
   704                           	opt stack 0
   705  000200                     main@F3200:
   706                           	opt stack 0
   707  000200                     	ds	128
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           postinc0	equ	0xFEE
   713                           wreg	equ	0xFE8
   714                           postdec1	equ	0xFE5
   715                           fsr1l	equ	0xFE1
   716                           
   717                           	psect	cstackBANK1
   718  000100                     __pcstackBANK1:
   719                           	opt stack 0
   720  000100                     TimeSetting@setTimeDisplay:
   721                           	opt stack 0
   722  000100                     BakeTempSet@setBakeTempDisplay:
   723                           	opt stack 0
   724  000100                     CookTimeDisplay@setBakeTimeDisplay:
   725                           	opt stack 0
   726                           
   727                           ; 10 bytes @ 0x0
   728  000100                     	ds	9
   729  000109                     TimeSetting@move:
   730                           	opt stack 0
   731                           
   732                           ; 6 bytes @ 0x9
   733  000109                     	ds	1
   734  00010A                     BakeTempSet@deliminator:
   735                           	opt stack 0
   736  00010A                     CookTimeDisplay@nextMenu:
   737                           	opt stack 0
   738                           
   739                           ; 7 bytes @ 0xA
   740  00010A                     	ds	5
   741  00010F                     TimeSetting@next:
   742                           	opt stack 0
   743                           
   744                           ; 6 bytes @ 0xF
   745  00010F                     	ds	1
   746  000110                     BakeTempSet@nextMenu:
   747                           	opt stack 0
   748                           
   749                           ; 6 bytes @ 0x10
   750  000110                     	ds	1
   751  000111                     CookTimeDisplay@backMenu:
   752                           	opt stack 0
   753                           
   754                           ; 6 bytes @ 0x11
   755  000111                     	ds	4
   756  000115                     TimeSetting@hourContainer_1327:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x15
   760  000115                     	ds	1
   761  000116                     BakeTempSet@bakeTempContainer:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0x16
   765  000116                     	ds	1
   766  000117                     TimeSetting@minContainer_1331:
   767                           	opt stack 0
   768  000117                     CookTimeDisplay@minDisplay:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x17
   772  000117                     	ds	2
   773  000119                     TimeSetting@hourContainer:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x19
   777  000119                     	ds	1
   778  00011A                     TimeSetting@minContainer:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x1A
   782  00011A                     	ds	1
   783  00011B                     CookTimeDisplay@cookTimeContainer_1412:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x1B
   787  00011B                     	ds	2
   788  00011D                     CookTimeDisplay@cookTimeContainer:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x1D
   792  00011D                     	ds	1
   793  00011E                     main@sineLookup:
   794                           	opt stack 0
   795                           
   796                           ; 128 bytes @ 0x1E
   797  00011E                     	ds	128
   798  00019E                     main@baking:
   799                           	opt stack 0
   800                           
   801                           ; 10 bytes @ 0x9E
   802  00019E                     	ds	10
   803  0001A8                     main@bakeTempContainer:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0xA8
   807  0001A8                     	ds	4
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           postdec1	equ	0xFE5
   815                           fsr1l	equ	0xFE1
   816                           
   817                           	psect	cstackBANK0
   818  0000D9                     __pcstackBANK0:
   819                           	opt stack 0
   820  0000D9                     WriteTime@convertedMinutesToBCD:
   821                           	opt stack 0
   822  0000D9                     CookTimeSet@currentMin:
   823                           	opt stack 0
   824  0000D9                     ___lwmod@counter:
   825                           	opt stack 0
   826  0000D9                     WriteToDac@command:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x0
   830  0000D9                     	ds	1
   831  0000DA                     ?_sprintf:
   832                           	opt stack 0
   833  0000DA                     WriteTime@convertedHoursToBCD:
   834                           	opt stack 0
   835  0000DA                     CookTimeSet@convertedCookMinutesToBCD:
   836                           	opt stack 0
   837  0000DA                     sprintf@sp:
   838                           	opt stack 0
   839                           
   840                           ; 2 bytes @ 0x1
   841  0000DA                     	ds	1
   842  0000DB                     WriteToDac@high:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x2
   846  0000DB                     	ds	1
   847  0000DC                     WriteToDac@low:
   848                           	opt stack 0
   849  0000DC                     sprintf@f:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x3
   853  0000DC                     	ds	1
   854  0000DD                     WriteToDac@output:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x4
   858  0000DD                     	ds	2
   859  0000DF                     CheckCookDone@bakeDone:
   860                           	opt stack 0
   861                           
   862                           ; 11 bytes @ 0x6
   863  0000DF                     	ds	1
   864  0000E0                     sprintf@flag:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x7
   868  0000E0                     	ds	1
   869  0000E1                     sprintf@ap:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x8
   873  0000E1                     	ds	2
   874  0000E3                     sprintf@val:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0xA
   878  0000E3                     	ds	2
   879  0000E5                     sprintf@prec:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0xC
   883  0000E5                     	ds	1
   884  0000E6                     sprintf@c:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0xD
   888  0000E6                     	ds	1
   889  0000E7                     ?_BakeTempSet:
   890                           	opt stack 0
   891  0000E7                     TimeSetting@readADCInput:
   892                           	opt stack 0
   893  0000E7                     ReadAndDisplayMinFromRTC@minContainerDisplay_1349:
   894                           	opt stack 0
   895  0000E7                     ReadAndDisplayHrFromRTC@hourContainerDisplay_1355:
   896                           	opt stack 0
   897  0000E7                     ReadAndDisplaySecFromRTC@secondContainerDisplay_1361:
   898                           	opt stack 0
   899  0000E7                     BakeTempSet@adcRead:
   900                           	opt stack 0
   901  0000E7                     CookTimeDisplay@adcRead:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0xE
   905  0000E7                     	ds	2
   906  0000E9                     ??_TimeSetting:
   907  0000E9                     ??_BakeTempSet:
   908  0000E9                     ReadAndDisplayMinFromRTC@min:
   909                           	opt stack 0
   910  0000E9                     ReadAndDisplayHrFromRTC@hours:
   911                           	opt stack 0
   912  0000E9                     ReadAndDisplaySecFromRTC@seconds:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x10
   916  0000E9                     	ds	1
   917  0000EA                     ReadAndDisplayMinFromRTC@minContainerDisplay:
   918                           	opt stack 0
   919  0000EA                     ReadAndDisplayHrFromRTC@hourContainerDisplay:
   920                           	opt stack 0
   921  0000EA                     ReadAndDisplaySecFromRTC@secondContainerDisplay:
   922                           	opt stack 0
   923  0000EA                     CheckCookDone@clear:
   924                           	opt stack 0
   925                           
   926                           ; 6 bytes @ 0x11
   927  0000EA                     	ds	1
   928  0000EB                     ReadRTCAndDisplay@bakeT:
   929                           	opt stack 0
   930                           
   931                           ; 6 bytes @ 0x12
   932  0000EB                     	ds	6
   933  0000F1                     ReadRTCAndDisplay@time:
   934                           	opt stack 0
   935                           
   936                           ; 5 bytes @ 0x18
   937  0000F1                     	ds	5
   938  0000F6                     ReadRTCAndDisplay@deliminator:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x1D
   942  0000F6                     	ds	2
   943  0000F8                     ??_main:
   944                           
   945                           ; 1 bytes @ 0x1F
   946  0000F8                     	ds	1
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1l	equ	0xFE1
   955                           
   956                           	psect	cstackCOMRAM
   957  000001                     __pcstackCOMRAM:
   958                           	opt stack 0
   959  000001                     ?_AdcRead:
   960                           	opt stack 0
   961  000001                     ?i2___lwdiv:
   962                           	opt stack 0
   963  000001                     i2WriteSpi@data:
   964                           	opt stack 0
   965  000001                     i2___lwdiv@dividend:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x0
   969  000001                     	ds	2
   970  000003                     ??_AdcRead:
   971  000003                     i2___lwdiv@divisor:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x2
   975  000003                     	ds	1
   976  000004                     AdcRead@channel:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x3
   980  000004                     	ds	1
   981  000005                     i2___lwdiv@quotient:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x4
   985  000005                     	ds	2
   986  000007                     i2___lwdiv@counter:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x6
   990  000007                     	ds	1
   991  000008                     i2WriteToDac@data:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x7
   995  000008                     	ds	2
   996  00000A                     i2WriteToDac@frequency:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x9
  1000  00000A                     	ds	2
  1001  00000C                     ??i2_WriteToDac:
  1002                           
  1003                           ; 1 bytes @ 0xB
  1004  00000C                     	ds	2
  1005  00000E                     i2WriteToDac@command:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xD
  1009  00000E                     	ds	2
  1010  000010                     i2WriteToDac@high:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0xF
  1014  000010                     	ds	1
  1015  000011                     i2WriteToDac@low:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x10
  1019  000011                     	ds	1
  1020  000012                     i2WriteToDac@output:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x11
  1024  000012                     	ds	2
  1025  000014                     ??_ISR:
  1026                           
  1027                           ; 1 bytes @ 0x13
  1028  000014                     	ds	18
  1029  000026                     ??_lcd_command:
  1030  000026                     ??_lcd_char:
  1031  000026                     ??_I2C_Wait:
  1032  000026                     ?_bcd_to_decimal:
  1033                           	opt stack 0
  1034  000026                     ?_bcd_to_decimal_cook_time:
  1035                           	opt stack 0
  1036  000026                     ?___awdiv:
  1037                           	opt stack 0
  1038  000026                     ?___awmod:
  1039                           	opt stack 0
  1040  000026                     ?___lwdiv:
  1041                           	opt stack 0
  1042  000026                     IfButtonPressedMovedToNextState@currentState:
  1043                           	opt stack 0
  1044  000026                     WriteSpi@data:
  1045                           	opt stack 0
  1046  000026                     GenerateAmplitude@readAmplitude:
  1047                           	opt stack 0
  1048  000026                     ___awdiv@dividend:
  1049                           	opt stack 0
  1050  000026                     ___awmod@dividend:
  1051                           	opt stack 0
  1052  000026                     ___lwdiv@dividend:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x25
  1056  000026                     	ds	1
  1057  000027                     ??_IfButtonPressedMovedToNextState:
  1058  000027                     I2C_WriteData@data:
  1059                           	opt stack 0
  1060  000027                     I2C_WriteControl@R_W_mode:
  1061                           	opt stack 0
  1062  000027                     I2C_Read@ack:
  1063                           	opt stack 0
  1064  000027                     lcd_command@temp:
  1065                           	opt stack 0
  1066  000027                     lcd_char@temp:
  1067                           	opt stack 0
  1068  000027                     WriteToDac@data:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x26
  1072  000027                     	ds	1
  1073  000028                     ??_bcd_to_decimal:
  1074  000028                     ??_bcd_to_decimal_cook_time:
  1075  000028                     IfButtonPressedMovedToNextState@nextState:
  1076                           	opt stack 0
  1077  000028                     I2C_WriteControl@slaveAddress:
  1078                           	opt stack 0
  1079  000028                     I2C_Read@readData:
  1080                           	opt stack 0
  1081  000028                     lcd_command@x:
  1082                           	opt stack 0
  1083  000028                     lcd_char@x:
  1084                           	opt stack 0
  1085  000028                     ___awdiv@divisor:
  1086                           	opt stack 0
  1087  000028                     ___awmod@divisor:
  1088                           	opt stack 0
  1089  000028                     ___lwdiv@divisor:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x27
  1093  000028                     	ds	1
  1094  000029                     I2C_ReadFromSlave@addressByte:
  1095                           	opt stack 0
  1096  000029                     I2C_WriteToSlave@R_W_mode:
  1097                           	opt stack 0
  1098  000029                     bcd_to_decimal@x:
  1099                           	opt stack 0
  1100  000029                     bcd_to_decimal_cook_time@x:
  1101                           	opt stack 0
  1102  000029                     WriteToDac@frequency:
  1103                           	opt stack 0
  1104  000029                     lcd_string@x:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x28
  1108  000029                     	ds	1
  1109  00002A                     I2C_ReadFromSlave@dataFromAddress:
  1110                           	opt stack 0
  1111  00002A                     I2C_WriteToSlave@addressByte:
  1112                           	opt stack 0
  1113  00002A                     ___awdiv@counter:
  1114                           	opt stack 0
  1115  00002A                     ___awmod@counter:
  1116                           	opt stack 0
  1117  00002A                     ___lwdiv@counter:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x29
  1121  00002A                     	ds	1
  1122  00002B                     ??_WriteToDac:
  1123  00002B                     I2C_WriteToSlave@data:
  1124                           	opt stack 0
  1125  00002B                     ___awdiv@sign:
  1126                           	opt stack 0
  1127  00002B                     ___awmod@sign:
  1128                           	opt stack 0
  1129  00002B                     lcd_string@i:
  1130                           	opt stack 0
  1131  00002B                     ___lwdiv@quotient:
  1132                           	opt stack 0
  1133                           
  1134                           ; 2 bytes @ 0x2A
  1135  00002B                     	ds	1
  1136  00002C                     I2C_WriteToSlave@slaveAddress:
  1137                           	opt stack 0
  1138  00002C                     ___awdiv@quotient:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x2B
  1142  00002C                     	ds	1
  1143  00002D                     ??_clearAlarm:
  1144  00002D                     ?___lwmod:
  1145                           	opt stack 0
  1146  00002D                     WriteToRTC@WRITE_MODE:
  1147                           	opt stack 0
  1148  00002D                     WriteTimeToCookToRTC@WRITE_MODE:
  1149                           	opt stack 0
  1150  00002D                     ___lwmod@dividend:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x2C
  1154  00002D                     	ds	1
  1155  00002E                     ??_IntToBcd:
  1156  00002E                     ??_IntToBcd_cook_time:
  1157                           
  1158                           ; 1 bytes @ 0x2D
  1159  00002E                     	ds	1
  1160  00002F                     ___lwmod@divisor:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x2E
  1164  00002F                     	ds	1
  1165  000030                     IntToBcd@x:
  1166                           	opt stack 0
  1167  000030                     IntToBcd_cook_time@x:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x2F
  1171  000030                     	ds	1
  1172  000031                     tblptru	equ	0xFF8
  1173                           tblptrh	equ	0xFF7
  1174                           tblptrl	equ	0xFF6
  1175                           tablat	equ	0xFF5
  1176                           postinc0	equ	0xFEE
  1177                           wreg	equ	0xFE8
  1178                           postdec1	equ	0xFE5
  1179                           fsr1l	equ	0xFE1
  1180                           
  1181                           ; 1 bytes @ 0x30
  1182 ;;
  1183 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1184 ;;
  1185 ;; *************** function _main *****************
  1186 ;; Defined at:
  1187 ;;		line 55 in file "main.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  baking         10  158[BANK1 ] unsigned char [10]
  1192 ;;  bakeTempCont    4  168[BANK1 ] unsigned char [4]
  1193 ;;  sineLookup    128   30[BANK1 ] unsigned int [64]
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  2  102[None  ] int 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Locals:         0       0     142       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Totals:         0       1     142       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;Total ram usage:      143 bytes
  1208 ;; Hardware stack levels required when called:    8
  1209 ;; This function calls:
  1210 ;;		_AdcInit
  1211 ;;		_BakeTempSet
  1212 ;;		_CheckCookDone
  1213 ;;		_CookTimeDisplay
  1214 ;;		_CookTimeSet
  1215 ;;		_GPIOInit
  1216 ;;		_GenerateAmplitude
  1217 ;;		_IfButtonPressedMovedToNextState
  1218 ;;		_InitI2C_MasterMode
  1219 ;;		_ReadRTCAndDisplay
  1220 ;;		_SpiInit
  1221 ;;		_TimeSetting
  1222 ;;		_Timer2Init
  1223 ;;		_WriteTime
  1224 ;;		_WriteTimeToCookToRTC
  1225 ;;		_WriteToDac
  1226 ;;		_WriteToRTC
  1227 ;;		_clearAlarm
  1228 ;;		_lcd_char
  1229 ;;		_lcd_clear
  1230 ;;		_lcd_command
  1231 ;;		_lcd_init
  1232 ;;		_lcd_shiftRight
  1233 ;;		_lcd_string
  1234 ;;		_sprintf
  1235 ;; This function is called by:
  1236 ;;		Startup code after reset
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text0
  1241  001010                     __ptext0:
  1242                           	opt stack 0
  1243  001010                     _main:
  1244                           	opt stack 23
  1245                           
  1246                           ;main.c: 56: OSCCONbits.IRCF = 0b111;
  1247                           
  1248                           ;incstack = 0
  1249  001010  88D3               	bsf	4051,4,c	;volatile
  1250  001012  8AD3               	bsf	4051,5,c	;volatile
  1251  001014  8CD3               	bsf	4051,6,c	;volatile
  1252  001016  A4D3               	btfss	4051,2,c	;volatile
  1253  001018  D7FE               	goto	l104
  1254                           
  1255                           ;main.c: 59: TRISDbits.TRISD7 = 0;
  1256  00101A  9E95               	bcf	3989,7,c	;volatile
  1257                           
  1258                           ;main.c: 60: LATDbits.LATD7 = 1;
  1259  00101C  8E8C               	bsf	3980,7,c	;volatile
  1260                           
  1261                           ;main.c: 63: TRISDbits.TRISD6 = 0;
  1262  00101E  9C95               	bcf	3989,6,c	;volatile
  1263                           
  1264                           ;main.c: 64: LATDbits.LATD6 = 0;
  1265  001020  9C8C               	bcf	3980,6,c	;volatile
  1266                           
  1267                           ;main.c: 67: lcd_init();
  1268  001022  ECF9  F011         	call	_lcd_init	;wreg free
  1269                           
  1270                           ;main.c: 68: AdcInit();
  1271  001026  EC8C  F012         	call	_AdcInit	;wreg free
  1272                           
  1273                           ;main.c: 69: InitI2C_MasterMode();
  1274  00102A  EC37  F012         	call	_InitI2C_MasterMode	;wreg free
  1275                           
  1276                           ;main.c: 70: Timer2Init();
  1277  00102E  EC4C  F012         	call	_Timer2Init	;wreg free
  1278                           
  1279                           ;main.c: 71: GPIOInit();
  1280  001032  EC5C  F012         	call	_GPIOInit	;wreg free
  1281                           
  1282                           ;main.c: 74: ADCON1bits.PCFG = 0b1111;
  1283  001036  80C1               	bsf	4033,0,c	;volatile
  1284  001038  82C1               	bsf	4033,1,c	;volatile
  1285  00103A  84C1               	bsf	4033,2,c	;volatile
  1286  00103C  86C1               	bsf	4033,3,c	;volatile
  1287                           
  1288                           ;main.c: 77: INTCONbits.PEIE = 1;
  1289  00103E  8CF2               	bsf	intcon,6,c	;volatile
  1290                           
  1291                           ;main.c: 78: INTCONbits.GIE = 1;
  1292  001040  8EF2               	bsf	intcon,7,c	;volatile
  1293                           
  1294                           ;main.c: 79: TMR2IE = 1;
  1295  001042  829D               	bsf	3997,1,c	;volatile
  1296                           
  1297                           ;main.c: 82: LATDbits.LATD0 = 0;
  1298  001044  908C               	bcf	3980,0,c	;volatile
  1299                           
  1300                           ;main.c: 83: LATDbits.LATD1 = 0;
  1301  001046  928C               	bcf	3980,1,c	;volatile
  1302                           
  1303                           ;main.c: 84: clearAlarm();
  1304  001048  ECF9  F010         	call	_clearAlarm	;wreg free
  1305                           
  1306                           ;main.c: 86: uint16_t sineLookup[64] = {0x200,0x232,0x263,0x294,0x2c3,0x2f1,0x31c,0x344,
  1307                           ;main.c: 87: 0x369,0x38b,0x3a9,0x3c3,0x3d8,0x3e9,0x3f5,0x3fd,
  1308                           ;main.c: 88: 0x3ff,0x3fd,0x3f5,0x3e9,0x3d8,0x3c3,0x3a9,0x38b,
  1309                           ;main.c: 89: 0x369,0x344,0x31c,0x2f1,0x2c3,0x294,0x263,0x232,
  1310                           ;main.c: 90: 0x200,0x1cd,0x19c,0x16b,0x13c,0x10e,0xe3,0xbb,
  1311                           ;main.c: 91: 0x96,0x74,0x56,0x3c,0x27,0x16,0xa,0x2,
  1312                           ;main.c: 92: 0x0,0x2,0xa,0x16,0x27,0x3c,0x56,0x74,
  1313                           ;main.c: 93: 0x96,0xbb,0xe3,0x10e,0x13c,0x16b,0x19c,0x1cd};
  1314  00104C  EE22  F000         	lfsr	2,main@F3200
  1315  001050  EE11  F01E         	lfsr	1,main@sineLookup
  1316  001054  0E7F               	movlw	127
  1317  001056                     u2421:
  1318  001056  CFDB FFE3          	movff	plusw2,plusw1
  1319  00105A  06E8               	decf	wreg,f,c
  1320  00105C  E2FC               	bc	u2421
  1321                           
  1322                           ;main.c: 95: ptr = sineLookup;
  1323  00105E  0E1E               	movlw	low main@sineLookup
  1324  001060  6E3D               	movwf	_ptr,c
  1325  001062  0E01               	movlw	high main@sineLookup
  1326  001064  6E3E               	movwf	_ptr+1,c
  1327  001066                     l108:
  1328                           
  1329                           ;main.c: 98: {
  1330                           ;main.c: 100: CheckCookDone();
  1331  001066  EC39  F00F         	call	_CheckCookDone	;wreg free
  1332                           
  1333                           ;main.c: 102: switch(LCD_STATES)
  1334  00106A  D0D9               	goto	l109
  1335  00106C                     
  1336                           ;main.c: 105: TimeSetting(readADCInput);
  1337  00106C  C1BA  F0E7         	movff	_readADCInput,TimeSetting@readADCInput	;volatile
  1338  001070  C1BB  F0E8         	movff	_readADCInput+1,TimeSetting@readADCInput+1	;volatile
  1339  001074  EC30  F009         	call	_TimeSetting	;wreg free
  1340                           
  1341                           ;main.c: 106: IfButtonPressedMovedToNextState(WriteTimeState, TimeSet);
  1342  001078  0E00               	movlw	0
  1343  00107A  6E26               	movwf	IfButtonPressedMovedToNextState@currentState,c
  1344  00107C  0E02               	movlw	2
  1345  00107E  EC09  F012         	call	_IfButtonPressedMovedToNextState
  1346                           
  1347                           ;main.c: 107: break;
  1348  001082  D7F1               	goto	l108
  1349  001084                     
  1350                           ;main.c: 110: WriteTime();
  1351  001084  EC68  F011         	call	_WriteTime	;wreg free
  1352                           
  1353                           ;main.c: 111: WriteToRTC();
  1354  001088  EC73  F00E         	call	_WriteToRTC	;wreg free
  1355                           
  1356                           ;main.c: 112: lcd_clear();
  1357  00108C  EC80  F012         	call	_lcd_clear	;wreg free
  1358  001090                     l4008:
  1359                           
  1360                           ;main.c: 113: LCD_STATES = DisplayTimeState;
  1361  001090  0E03               	movlw	3
  1362  001092  D036               	goto	L5
  1363  001094                     
  1364                           ; BSR set to: 1
  1365                           ;main.c: 117: ReadRTCAndDisplay();
  1366                           
  1367                           ; BSR set to: 1
  1368  001094  EC2F  F00E         	call	_ReadRTCAndDisplay	;wreg free
  1369                           
  1370                           ;main.c: 119: _delay((unsigned long)((25)*(8000000/4000.0)));
  1371  001098  0E41               	movlw	65
  1372  00109A  0100               	movlb	0	; () banked
  1373  00109C  6FF8               	movwf	??_main& (0+255),b
  1374  00109E  0EEE               	movlw	238
  1375  0010A0                     u2517:
  1376  0010A0  2EE8               	decfsz	wreg,f,c
  1377  0010A2  D7FE               	bra	u2517
  1378  0010A4  2FF8               	decfsz	??_main& (0+255),f,b
  1379  0010A6  D7FC               	bra	u2517
  1380  0010A8  F000               	nop	
  1381                           
  1382                           ;main.c: 120: if(PORTDbits.RD2 == 1)
  1383  0010AA  A483               	btfss	3971,2,c	;volatile
  1384  0010AC  D7F1               	goto	l4008
  1385                           
  1386                           ;main.c: 121: {
  1387                           ;main.c: 122: lcd_clear();
  1388  0010AE  EC80  F012         	call	_lcd_clear	;wreg free
  1389  0010B2                     l4018:
  1390                           
  1391                           ;main.c: 123: LCD_STATES = BakeTempSetState;
  1392  0010B2  0E04               	movlw	4
  1393  0010B4  D025               	goto	L5
  1394  0010B6                     
  1395                           ; BSR set to: 1
  1396                           ;main.c: 131: bakeTemp = BakeTempSet(readBakeTempADC);
  1397                           
  1398                           ; BSR set to: 1
  1399  0010B6  C1B8  F0E7         	movff	_readBakeTempADC,BakeTempSet@adcRead	;volatile
  1400  0010BA  C1B9  F0E8         	movff	_readBakeTempADC+1,BakeTempSet@adcRead+1	;volatile
  1401  0010BE  EC78  F00B         	call	_BakeTempSet	;wreg free
  1402  0010C2  C0E7  F1B6         	movff	?_BakeTempSet,_bakeTemp	;volatile
  1403  0010C6  C0E8  F1B7         	movff	?_BakeTempSet+1,_bakeTemp+1	;volatile
  1404                           
  1405                           ;main.c: 132: GenerateAmplitude(bakeTemp);
  1406  0010CA  C1B6  F026         	movff	_bakeTemp,GenerateAmplitude@readAmplitude	;volatile
  1407  0010CE  C1B7  F027         	movff	_bakeTemp+1,GenerateAmplitude@readAmplitude+1	;volatile
  1408  0010D2  EC09  F00D         	call	_GenerateAmplitude	;wreg free
  1409                           
  1410                           ;main.c: 133: __nop();
  1411  0010D6  F000               	nop	
  1412                           
  1413                           ;main.c: 135: _delay((unsigned long)((25)*(8000000/4000.0)));
  1414  0010D8  0E41               	movlw	65
  1415  0010DA  0100               	movlb	0	; () banked
  1416  0010DC  6FF8               	movwf	??_main& (0+255),b
  1417  0010DE  0EEE               	movlw	238
  1418  0010E0                     u2527:
  1419  0010E0  2EE8               	decfsz	wreg,f,c
  1420  0010E2  D7FE               	bra	u2527
  1421  0010E4  2FF8               	decfsz	??_main& (0+255),f,b
  1422  0010E6  D7FC               	bra	u2527
  1423  0010E8  F000               	nop	
  1424                           
  1425                           ;main.c: 136: if(PORTDbits.RD2 == 1)
  1426  0010EA  A483               	btfss	3971,2,c	;volatile
  1427  0010EC  D004               	goto	l117
  1428                           
  1429                           ;main.c: 137: {
  1430                           ;main.c: 138: lcd_clear();
  1431  0010EE  EC80  F012         	call	_lcd_clear	;wreg free
  1432  0010F2                     l4034:
  1433                           
  1434                           ;main.c: 140: LCD_STATES = BakeTimeDisplay;
  1435  0010F2  0E05               	movlw	5
  1436  0010F4  D005               	goto	L5
  1437  0010F6                     l117:
  1438                           
  1439                           ;main.c: 142: else if(PORTDbits.RD3 == 1)
  1440  0010F6  A683               	btfss	3971,3,c	;volatile
  1441  0010F8  D7DC               	goto	l4018
  1442                           
  1443                           ;main.c: 143: {
  1444                           ;main.c: 144: lcd_clear();
  1445  0010FA  EC80  F012         	call	_lcd_clear	;wreg free
  1446  0010FE  D7C8               	goto	l4008
  1447  001100                     L5:
  1448  001100  0101               	movlb	1	; () banked
  1449  001102  6FBC               	movwf	_LCD_STATES& (0+255),b
  1450                           
  1451                           ; BSR set to: 1
  1452                           ;main.c: 149: }
  1453                           ;main.c: 150: break;
  1454                           
  1455                           ; BSR set to: 1
  1456  001104  D7B0               	goto	l108
  1457  001106                     
  1458                           ; BSR set to: 1
  1459                           ;main.c: 152: CookTimeDisplay(readADCInput);
  1460                           
  1461                           ; BSR set to: 1
  1462  001106  C1BA  F0E7         	movff	_readADCInput,CookTimeDisplay@adcRead	;volatile
  1463  00110A  C1BB  F0E8         	movff	_readADCInput+1,CookTimeDisplay@adcRead+1	;volatile
  1464  00110E  EC49  F00A         	call	_CookTimeDisplay	;wreg free
  1465                           
  1466                           ;main.c: 154: _delay((unsigned long)((80)*(8000000/4000.0)));
  1467  001112  0ED0               	movlw	208
  1468  001114  0100               	movlb	0	; () banked
  1469  001116  6FF8               	movwf	??_main& (0+255),b
  1470  001118  0EC9               	movlw	201
  1471  00111A                     u2537:
  1472  00111A  2EE8               	decfsz	wreg,f,c
  1473  00111C  D7FE               	bra	u2537
  1474  00111E  2FF8               	decfsz	??_main& (0+255),f,b
  1475  001120  D7FC               	bra	u2537
  1476  001122  D000               	nop2	
  1477                           
  1478                           ;main.c: 155: if(PORTDbits.RD2 == 1)
  1479  001124  A483               	btfss	3971,2,c	;volatile
  1480  001126  D007               	goto	l122
  1481                           
  1482                           ;main.c: 156: {
  1483                           ;main.c: 157: lcd_clear();
  1484  001128  EC80  F012         	call	_lcd_clear	;wreg free
  1485                           
  1486                           ;main.c: 158: LCD_STATES = BakeTimeSet;
  1487  00112C  0E06               	movlw	6
  1488  00112E  0101               	movlb	1	; () banked
  1489  001130  6FBC               	movwf	_LCD_STATES& (0+255),b
  1490                           
  1491                           ; BSR set to: 1
  1492                           ;main.c: 159: __nop();
  1493  001132  F000               	nop	
  1494                           
  1495                           ;main.c: 160: }
  1496  001134  D798               	goto	l108
  1497  001136                     l122:
  1498                           
  1499                           ;main.c: 161: else if(PORTDbits.RD3 == 1)
  1500  001136  A683               	btfss	3971,3,c	;volatile
  1501  001138  D7DC               	goto	l4034
  1502                           
  1503                           ;main.c: 162: {
  1504                           ;main.c: 163: lcd_clear();
  1505  00113A  EC80  F012         	call	_lcd_clear	;wreg free
  1506  00113E  D7B9               	goto	l4018
  1507  001140                     
  1508                           ; BSR set to: 1
  1509                           ;main.c: 171: CookTimeSet();
  1510                           
  1511                           ; BSR set to: 1
  1512  001140  ECDA  F010         	call	_CookTimeSet	;wreg free
  1513                           
  1514                           ;main.c: 172: WriteTimeToCookToRTC();
  1515  001144  ECB5  F00E         	call	_WriteTimeToCookToRTC	;wreg free
  1516                           
  1517                           ;main.c: 173: LCD_STATES = InitSpiState;
  1518  001148  0E07               	movlw	7
  1519  00114A  D7DA               	goto	L5
  1520  00114C                     l127:
  1521                           
  1522                           ; BSR set to: 1
  1523                           ;main.c: 177: LATDbits.LATD7 = 0;
  1524  00114C  9E8C               	bcf	3980,7,c	;volatile
  1525                           
  1526                           ;main.c: 178: LATDbits.LATD6 = 1;
  1527  00114E  8C8C               	bsf	3980,6,c	;volatile
  1528                           
  1529                           ; BSR set to: 1
  1530                           ;main.c: 179: SpiInit();
  1531  001150  EC19  F012         	call	_SpiInit	;wreg free
  1532                           
  1533                           ;main.c: 180: PR2 = 10;
  1534  001154  0E0A               	movlw	10
  1535  001156  6ECB               	movwf	4043,c	;volatile
  1536                           
  1537                           ;main.c: 181: sineOut = 1;
  1538  001158  0E01               	movlw	1
  1539  00115A  6E49               	movwf	_sineOut,c	;volatile
  1540  00115C  D03D               	goto	l131
  1541  00115E                     
  1542                           ; BSR set to: 1
  1543                           ;main.c: 190: lcd_command(0x85);
  1544                           
  1545                           ; BSR set to: 1
  1546  00115E  0E85               	movlw	133
  1547  001160  EC5F  F00C         	call	_lcd_command
  1548                           
  1549                           ;main.c: 191: char baking[] = "Baking...";
  1550  001164  EE21  F0AC         	lfsr	2,main@F3205
  1551  001168  EE11  F09E         	lfsr	1,main@baking
  1552  00116C  0E09               	movlw	9
  1553  00116E                     u2481:
  1554  00116E  CFDB FFE3          	movff	plusw2,plusw1
  1555  001172  06E8               	decf	wreg,f,c
  1556  001174  E2FC               	bc	u2481
  1557                           
  1558                           ;main.c: 192: lcd_string(baking);
  1559  001176  0E9E               	movlw	low main@baking
  1560  001178  6E29               	movwf	lcd_string@x,c
  1561  00117A  0E01               	movlw	high main@baking
  1562  00117C  6E2A               	movwf	lcd_string@x+1,c
  1563  00117E  EC4E  F011         	call	_lcd_string	;wreg free
  1564                           
  1565                           ;main.c: 202: lcd_command(0xC6);
  1566  001182  0EC6               	movlw	198
  1567  001184  EC5F  F00C         	call	_lcd_command
  1568                           
  1569                           ;main.c: 203: char bakeTempContainer[4];
  1570                           ;main.c: 204: sprintf(bakeTempContainer, "%u", bakeTemp);
  1571  001188  0EA8               	movlw	low main@bakeTempContainer
  1572  00118A  0100               	movlb	0	; () banked
  1573  00118C  6FDA               	movwf	sprintf@sp& (0+255),b
  1574  00118E  0E01               	movlw	high main@bakeTempContainer
  1575  001190  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  1576  001192  0E0B               	movlw	low STR_1
  1577  001194  6FDC               	movwf	sprintf@f& (0+255),b
  1578  001196  0E10               	movlw	high STR_1
  1579  001198  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  1580  00119A  C1B6  F0DE         	movff	_bakeTemp,?_sprintf+4	;volatile
  1581  00119E  C1B7  F0DF         	movff	_bakeTemp+1,?_sprintf+5	;volatile
  1582  0011A2  ECE6  F00A         	call	_sprintf	;wreg free
  1583                           
  1584                           ;main.c: 205: lcd_string(bakeTempContainer);
  1585  0011A6  0EA8               	movlw	low main@bakeTempContainer
  1586  0011A8  6E29               	movwf	lcd_string@x,c
  1587  0011AA  0E01               	movlw	high main@bakeTempContainer
  1588  0011AC  6E2A               	movwf	lcd_string@x+1,c
  1589  0011AE  EC4E  F011         	call	_lcd_string	;wreg free
  1590                           
  1591                           ;main.c: 206: lcd_shiftRight();
  1592  0011B2  EC7C  F012         	call	_lcd_shiftRight	;wreg free
  1593                           
  1594                           ;main.c: 207: lcd_char('F');
  1595  0011B6  0E46               	movlw	70
  1596  0011B8  EC08  F00C         	call	_lcd_char
  1597                           
  1598                           ;main.c: 217: _delay((unsigned long)((30)*(8000000/4000.0)));
  1599  0011BC  0E4E               	movlw	78
  1600  0011BE  0100               	movlb	0	; () banked
  1601  0011C0  6FF8               	movwf	??_main& (0+255),b
  1602  0011C2  0EEB               	movlw	235
  1603  0011C4                     u2547:
  1604  0011C4  2EE8               	decfsz	wreg,f,c
  1605  0011C6  D7FE               	bra	u2547
  1606  0011C8  2FF8               	decfsz	??_main& (0+255),f,b
  1607  0011CA  D7FC               	bra	u2547
  1608                           
  1609                           ;main.c: 218: if(PORTDbits.RD2 == 1)
  1610  0011CC  A483               	btfss	3971,2,c	;volatile
  1611  0011CE  D004               	goto	l131
  1612                           
  1613                           ;main.c: 219: {
  1614                           ;main.c: 220: lcd_clear();
  1615  0011D0  EC80  F012         	call	_lcd_clear	;wreg free
  1616                           
  1617                           ;main.c: 221: LCD_STATES = CancelBake;
  1618  0011D4  0E0A               	movlw	10
  1619  0011D6  D794               	goto	L5
  1620  0011D8                     l131:
  1621                           
  1622                           ;main.c: 223: else{
  1623                           ;main.c: 225: LCD_STATES = BakingStart;
  1624                           
  1625                           ; BSR set to: 1
  1626  0011D8  0E08               	movlw	8
  1627  0011DA  D792               	goto	L5
  1628  0011DC                     l133:
  1629                           
  1630                           ; BSR set to: 1
  1631                           ;main.c: 232: if(PORTDbits.RD2 == 1)
  1632  0011DC  A483               	btfss	3971,2,c	;volatile
  1633  0011DE  D008               	goto	l134
  1634                           
  1635                           ; BSR set to: 1
  1636                           ;main.c: 233: {
  1637                           ;main.c: 234: PR2 = 255;
  1638  0011E0  68CB               	setf	4043,c	;volatile
  1639                           
  1640                           ;main.c: 235: T2CKPS1 = 1;
  1641  0011E2  82CA               	bsf	4042,1,c	;volatile
  1642                           
  1643                           ;main.c: 236: LATDbits.LATD1 = 0;
  1644  0011E4  928C               	bcf	3980,1,c	;volatile
  1645                           
  1646                           ; BSR set to: 1
  1647                           ;main.c: 237: alarmSet = 0;
  1648  0011E6  0E00               	movlw	0
  1649  0011E8  6E4A               	movwf	_alarmSet,c	;volatile
  1650                           
  1651                           ; BSR set to: 1
  1652                           ;main.c: 238: lcd_clear();
  1653  0011EA  EC80  F012         	call	_lcd_clear	;wreg free
  1654  0011EE  D750               	goto	l4008
  1655  0011F0                     l134:
  1656                           
  1657                           ; BSR set to: 1
  1658                           ;main.c: 241: else{
  1659                           ;main.c: 242: LCD_STATES = CookTimeDone;
  1660                           
  1661                           ; BSR set to: 1
  1662  0011F0  0E09               	movlw	9
  1663  0011F2  D787               	goto	L6
  1664  0011F4                     
  1665                           ; BSR set to: 1
  1666                           ;main.c: 247: WriteToDac(0x00,0);
  1667                           
  1668                           ; BSR set to: 1
  1669  0011F4  0E00               	movlw	0
  1670  0011F6  6E28               	movwf	WriteToDac@data+1,c
  1671  0011F8  0E00               	movlw	0
  1672  0011FA  6E27               	movwf	WriteToDac@data,c
  1673  0011FC  0E00               	movlw	0
  1674  0011FE  6E2A               	movwf	WriteToDac@frequency+1,c
  1675  001200  0E00               	movlw	0
  1676  001202  6E29               	movwf	WriteToDac@frequency,c
  1677  001204  EC72  F010         	call	_WriteToDac	;wreg free
  1678                           
  1679                           ;main.c: 248: LATCbits.LATC1 = 0;
  1680  001208  928B               	bcf	3979,1,c	;volatile
  1681                           
  1682                           ;main.c: 249: LATDbits.LATD6 = 0;
  1683  00120A  9C8C               	bcf	3980,6,c	;volatile
  1684                           
  1685                           ;main.c: 250: LATDbits.LATD7 = 1;
  1686  00120C  8E8C               	bsf	3980,7,c	;volatile
  1687                           
  1688                           ;main.c: 251: PR2 = 255;
  1689  00120E  68CB               	setf	4043,c	;volatile
  1690                           
  1691                           ;main.c: 252: sineOut = 0;
  1692  001210  0E00               	movlw	0
  1693  001212  6E49               	movwf	_sineOut,c	;volatile
  1694                           
  1695                           ;main.c: 253: InitI2C_MasterMode();
  1696  001214  EC37  F012         	call	_InitI2C_MasterMode	;wreg free
  1697                           
  1698                           ;main.c: 254: clearAlarm();
  1699  001218  ECF9  F010         	call	_clearAlarm	;wreg free
  1700  00121C  D739               	goto	l4008
  1701  00121E                     l109:
  1702                           
  1703                           ; BSR set to: 1
  1704  00121E  0101               	movlb	1	; () banked
  1705  001220  51BC               	movf	_LCD_STATES& (0+255),w,b
  1706                           
  1707                           ; Switch size 1, requested type "space"
  1708                           ; Number of cases is 10, Range of values is 0 to 10
  1709                           ; switch strategies available:
  1710                           ; Name         Instructions Cycles
  1711                           ; simple_byte           31    16 (average)
  1712                           ;	Chosen strategy is simple_byte
  1713  001222  0A00               	xorlw	0	; case 0
  1714  001224  B4D8               	btfsc	status,2,c
  1715  001226  D722               	goto	l110
  1716  001228  0A02               	xorlw	2	; case 2
  1717  00122A  B4D8               	btfsc	status,2,c
  1718  00122C  D72B               	goto	l112
  1719  00122E  0A01               	xorlw	1	; case 3
  1720  001230  B4D8               	btfsc	status,2,c
  1721  001232  D730               	goto	l113
  1722  001234  0A07               	xorlw	7	; case 4
  1723  001236  B4D8               	btfsc	status,2,c
  1724  001238  D73E               	goto	l116
  1725  00123A  0A01               	xorlw	1	; case 5
  1726  00123C  B4D8               	btfsc	status,2,c
  1727  00123E  D763               	goto	l121
  1728  001240  0A03               	xorlw	3	; case 6
  1729  001242  B4D8               	btfsc	status,2,c
  1730  001244  D77D               	goto	l126
  1731  001246  0A01               	xorlw	1	; case 7
  1732  001248  B4D8               	btfsc	status,2,c
  1733  00124A  D780               	goto	l127
  1734  00124C  0A0F               	xorlw	15	; case 8
  1735  00124E  B4D8               	btfsc	status,2,c
  1736  001250  D786               	goto	l128
  1737  001252  0A01               	xorlw	1	; case 9
  1738  001254  B4D8               	btfsc	status,2,c
  1739  001256  D7C2               	goto	l133
  1740  001258  0A03               	xorlw	3	; case 10
  1741  00125A  B4D8               	btfsc	status,2,c
  1742  00125C  D7CB               	goto	l136
  1743                           
  1744                           ; BSR set to: 1
  1745                           
  1746                           ; BSR set to: 1
  1747  00125E  D703               	goto	l108
  1748  001260                     __end_of_main:
  1749                           	opt stack 0
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           intcon	equ	0xFF2
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           plusw1	equ	0xFE3
  1759                           fsr1l	equ	0xFE1
  1760                           plusw2	equ	0xFDB
  1761                           status	equ	0xFD8
  1762                           
  1763 ;; *************** function _lcd_shiftRight *****************
  1764 ;; Defined at:
  1765 ;;		line 71 in file "lcd.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2, status,0, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;Total ram usage:        0 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    4
  1786 ;; This function calls:
  1787 ;;		_lcd_command
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text1
  1794  0024F8                     __ptext1:
  1795                           	opt stack 0
  1796  0024F8                     _lcd_shiftRight:
  1797                           	opt stack 26
  1798                           
  1799                           ;lcd.c: 73: lcd_command(0x14);
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;incstack = 0
  1803  0024F8  0E14               	movlw	20
  1804  0024FA  EC5F  F00C         	call	_lcd_command
  1805  0024FE  0012               	return		;funcret
  1806  002500                     __end_of_lcd_shiftRight:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           intcon	equ	0xFF2
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           postdec1	equ	0xFE5
  1816                           plusw1	equ	0xFE3
  1817                           fsr1l	equ	0xFE1
  1818                           plusw2	equ	0xFDB
  1819                           status	equ	0xFD8
  1820                           
  1821 ;; *************** function _lcd_init *****************
  1822 ;; Defined at:
  1823 ;;		line 27 in file "lcd.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      void 
  1830 ;; Registers used:
  1831 ;;		wreg, status,2, status,0, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;Total ram usage:        0 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    4
  1844 ;; This function calls:
  1845 ;;		_lcd_command
  1846 ;; This function is called by:
  1847 ;;		_main
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text2
  1852  0023F2                     __ptext2:
  1853                           	opt stack 0
  1854  0023F2                     _lcd_init:
  1855                           	opt stack 26
  1856                           
  1857                           ;lcd.c: 28: lcd_command(0x33);
  1858                           
  1859                           ;incstack = 0
  1860  0023F2  0E33               	movlw	51
  1861  0023F4  EC5F  F00C         	call	_lcd_command
  1862                           
  1863                           ;lcd.c: 29: lcd_command(0x32);
  1864  0023F8  0E32               	movlw	50
  1865  0023FA  EC5F  F00C         	call	_lcd_command
  1866                           
  1867                           ;lcd.c: 30: lcd_command(0x2C);
  1868  0023FE  0E2C               	movlw	44
  1869  002400  EC5F  F00C         	call	_lcd_command
  1870                           
  1871                           ;lcd.c: 31: lcd_command(0x0C);
  1872  002404  0E0C               	movlw	12
  1873  002406  EC5F  F00C         	call	_lcd_command
  1874                           
  1875                           ;lcd.c: 32: lcd_command(0x01);
  1876  00240A  0E01               	movlw	1
  1877  00240C  EC5F  F00C         	call	_lcd_command
  1878  002410  0012               	return		;funcret
  1879  002412                     __end_of_lcd_init:
  1880                           	opt stack 0
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           intcon	equ	0xFF2
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           plusw1	equ	0xFE3
  1890                           fsr1l	equ	0xFE1
  1891                           plusw2	equ	0xFDB
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _WriteToRTC *****************
  1895 ;; Defined at:
  1896 ;;		line 135 in file "timing_controller.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  WRITE_MODE      1   44[COMRAM] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;Total ram usage:        1 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    6
  1917 ;; This function calls:
  1918 ;;		_I2C_WriteToSlave
  1919 ;; This function is called by:
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text3
  1925  001CE6                     __ptext3:
  1926                           	opt stack 0
  1927  001CE6                     _WriteToRTC:
  1928                           	opt stack 24
  1929                           
  1930                           ;timing_controller.c: 137: bool WRITE_MODE = 0;
  1931                           
  1932                           ;incstack = 0
  1933  001CE6  0E00               	movlw	0
  1934  001CE8  6E2D               	movwf	WriteToRTC@WRITE_MODE,c
  1935                           
  1936                           ;timing_controller.c: 139: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x01, setMin);
  1937  001CEA  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1938  001CEE  0E01               	movlw	1
  1939  001CF0  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1940  001CF2  C045  F02B         	movff	_setMin,I2C_WriteToSlave@data	;volatile
  1941  001CF6  0EDE               	movlw	222
  1942  001CF8  ECE8  F011         	call	_I2C_WriteToSlave
  1943                           
  1944                           ;timing_controller.c: 140: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x02, setHr);
  1945  001CFC  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1946  001D00  0E02               	movlw	2
  1947  001D02  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1948  001D04  C044  F02B         	movff	_setHr,I2C_WriteToSlave@data	;volatile
  1949  001D08  0EDE               	movlw	222
  1950  001D0A  ECE8  F011         	call	_I2C_WriteToSlave
  1951                           
  1952                           ;timing_controller.c: 143: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x00, 0x80);
  1953  001D0E  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1954  001D12  0E00               	movlw	0
  1955  001D14  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1956  001D16  0E80               	movlw	128
  1957  001D18  6E2B               	movwf	I2C_WriteToSlave@data,c
  1958  001D1A  0EDE               	movlw	222
  1959  001D1C  ECE8  F011         	call	_I2C_WriteToSlave
  1960                           
  1961                           ;timing_controller.c: 144: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x03, 0x01);
  1962  001D20  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1963  001D24  0E03               	movlw	3
  1964  001D26  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1965  001D28  0E01               	movlw	1
  1966  001D2A  6E2B               	movwf	I2C_WriteToSlave@data,c
  1967  001D2C  0EDE               	movlw	222
  1968  001D2E  ECE8  F011         	call	_I2C_WriteToSlave
  1969                           
  1970                           ;timing_controller.c: 145: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x04, 0x01);
  1971  001D32  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1972  001D36  0E04               	movlw	4
  1973  001D38  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1974  001D3A  0E01               	movlw	1
  1975  001D3C  6E2B               	movwf	I2C_WriteToSlave@data,c
  1976  001D3E  0EDE               	movlw	222
  1977  001D40  ECE8  F011         	call	_I2C_WriteToSlave
  1978                           
  1979                           ;timing_controller.c: 146: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x05, 0x03);
  1980  001D44  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1981  001D48  0E05               	movlw	5
  1982  001D4A  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1983  001D4C  0E03               	movlw	3
  1984  001D4E  6E2B               	movwf	I2C_WriteToSlave@data,c
  1985  001D50  0EDE               	movlw	222
  1986  001D52  ECE8  F011         	call	_I2C_WriteToSlave
  1987                           
  1988                           ;timing_controller.c: 147: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x06, 0x00);
  1989  001D56  C02D  F029         	movff	WriteToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  1990  001D5A  0E06               	movlw	6
  1991  001D5C  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  1992  001D5E  0E00               	movlw	0
  1993  001D60  6E2B               	movwf	I2C_WriteToSlave@data,c
  1994  001D62  0EDE               	movlw	222
  1995  001D64  ECE8  F011         	call	_I2C_WriteToSlave
  1996  001D68  0012               	return		;funcret
  1997  001D6A                     __end_of_WriteToRTC:
  1998                           	opt stack 0
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           intcon	equ	0xFF2
  2004                           postinc0	equ	0xFEE
  2005                           wreg	equ	0xFE8
  2006                           postdec1	equ	0xFE5
  2007                           plusw1	equ	0xFE3
  2008                           fsr1l	equ	0xFE1
  2009                           plusw2	equ	0xFDB
  2010                           status	equ	0xFD8
  2011                           
  2012 ;; *************** function _WriteTimeToCookToRTC *****************
  2013 ;; Defined at:
  2014 ;;		line 73 in file "cooktime_controller.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;		None
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  WRITE_MODE      1   44[COMRAM] unsigned char 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  1    wreg      void 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2, status,0, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;Total ram usage:        1 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:    6
  2035 ;; This function calls:
  2036 ;;		_I2C_WriteToSlave
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text4
  2043  001D6A                     __ptext4:
  2044                           	opt stack 0
  2045  001D6A                     _WriteTimeToCookToRTC:
  2046                           	opt stack 24
  2047                           
  2048                           ;cooktime_controller.c: 75: bool WRITE_MODE = 0;
  2049                           
  2050                           ;incstack = 0
  2051  001D6A  0E00               	movlw	0
  2052  001D6C  6E2D               	movwf	WriteTimeToCookToRTC@WRITE_MODE,c
  2053                           
  2054                           ;cooktime_controller.c: 77: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x07, 0x10);
  2055  001D6E  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2056  001D72  0E07               	movlw	7
  2057  001D74  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2058  001D76  0E10               	movlw	16
  2059  001D78  6E2B               	movwf	I2C_WriteToSlave@data,c
  2060  001D7A  0EDE               	movlw	222
  2061  001D7C  ECE8  F011         	call	_I2C_WriteToSlave
  2062                           
  2063                           ;cooktime_controller.c: 80: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0A, 0x00);
  2064  001D80  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2065  001D84  0E0A               	movlw	10
  2066  001D86  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2067  001D88  0E00               	movlw	0
  2068  001D8A  6E2B               	movwf	I2C_WriteToSlave@data,c
  2069  001D8C  0EDE               	movlw	222
  2070  001D8E  ECE8  F011         	call	_I2C_WriteToSlave
  2071                           
  2072                           ;cooktime_controller.c: 81: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0B, setCookTimeMi
      +                          n);
  2073  001D92  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2074  001D96  0E0B               	movlw	11
  2075  001D98  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2076  001D9A  C040  F02B         	movff	_setCookTimeMin,I2C_WriteToSlave@data	;volatile
  2077  001D9E  0EDE               	movlw	222
  2078  001DA0  ECE8  F011         	call	_I2C_WriteToSlave
  2079                           
  2080                           ;cooktime_controller.c: 82: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0C, 0x61);
  2081  001DA4  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2082  001DA8  0E0C               	movlw	12
  2083  001DAA  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2084  001DAC  0E61               	movlw	97
  2085  001DAE  6E2B               	movwf	I2C_WriteToSlave@data,c
  2086  001DB0  0EDE               	movlw	222
  2087  001DB2  ECE8  F011         	call	_I2C_WriteToSlave
  2088                           
  2089                           ;cooktime_controller.c: 83: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0D, 0b10010001);
  2090  001DB6  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2091  001DBA  0E0D               	movlw	13
  2092  001DBC  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2093  001DBE  0E91               	movlw	145
  2094  001DC0  6E2B               	movwf	I2C_WriteToSlave@data,c
  2095  001DC2  0EDE               	movlw	222
  2096  001DC4  ECE8  F011         	call	_I2C_WriteToSlave
  2097                           
  2098                           ;cooktime_controller.c: 84: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0E, 0x01);
  2099  001DC8  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2100  001DCC  0E0E               	movlw	14
  2101  001DCE  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2102  001DD0  0E01               	movlw	1
  2103  001DD2  6E2B               	movwf	I2C_WriteToSlave@data,c
  2104  001DD4  0EDE               	movlw	222
  2105  001DD6  ECE8  F011         	call	_I2C_WriteToSlave
  2106                           
  2107                           ;cooktime_controller.c: 85: I2C_WriteToSlave(0b11011110, WRITE_MODE, 0x0F, 0x01);
  2108  001DDA  C02D  F029         	movff	WriteTimeToCookToRTC@WRITE_MODE,I2C_WriteToSlave@R_W_mode
  2109  001DDE  0E0F               	movlw	15
  2110  001DE0  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  2111  001DE2  0E01               	movlw	1
  2112  001DE4  6E2B               	movwf	I2C_WriteToSlave@data,c
  2113  001DE6  0EDE               	movlw	222
  2114  001DE8  ECE8  F011         	call	_I2C_WriteToSlave
  2115  001DEC  0012               	return		;funcret
  2116  001DEE                     __end_of_WriteTimeToCookToRTC:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           intcon	equ	0xFF2
  2123                           postinc0	equ	0xFEE
  2124                           wreg	equ	0xFE8
  2125                           postdec1	equ	0xFE5
  2126                           plusw1	equ	0xFE3
  2127                           fsr1l	equ	0xFE1
  2128                           plusw2	equ	0xFDB
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _WriteTime *****************
  2132 ;; Defined at:
  2133 ;;		line 155 in file "timing_controller.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;  convertedHou    1    1[BANK0 ] unsigned char 
  2138 ;;  convertedMin    1    0[BANK0 ] unsigned char 
  2139 ;; Return value:  Size  Location     Type
  2140 ;;                  1    wreg      void 
  2141 ;; Registers used:
  2142 ;;		wreg, status,2, status,0, cstack
  2143 ;; Tracked objects:
  2144 ;;		On entry : 0/0
  2145 ;;		On exit  : 0/0
  2146 ;;		Unchanged: 0/0
  2147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;Total ram usage:        2 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    5
  2155 ;; This function calls:
  2156 ;;		_IntToBcd
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text5
  2163  0022D0                     __ptext5:
  2164                           	opt stack 0
  2165  0022D0                     _WriteTime:
  2166                           	opt stack 25
  2167                           
  2168                           ;timing_controller.c: 157: setMin = (uint8_t)minAdcRead;
  2169                           
  2170                           ;incstack = 0
  2171  0022D0  C037  F045         	movff	_minAdcRead,_setMin	;volatile
  2172                           
  2173                           ;timing_controller.c: 158: setHr = (uint8_t)hrAdcRead;
  2174  0022D4  C039  F044         	movff	_hrAdcRead,_setHr	;volatile
  2175                           
  2176                           ;timing_controller.c: 160: uint8_t convertedMinutesToBCD = IntToBcd(setMin);
  2177  0022D8  5045               	movf	_setMin,w,c	;volatile
  2178  0022DA  EC18  F011         	call	_IntToBcd
  2179  0022DE  0100               	movlb	0	; () banked
  2180  0022E0  6FD9               	movwf	WriteTime@convertedMinutesToBCD& (0+255),b
  2181                           
  2182                           ;timing_controller.c: 161: uint8_t convertedHoursToBCD = IntToBcd(setHr);
  2183  0022E2  5044               	movf	_setHr,w,c	;volatile
  2184  0022E4  EC18  F011         	call	_IntToBcd
  2185  0022E8  0100               	movlb	0	; () banked
  2186  0022EA  6FDA               	movwf	WriteTime@convertedHoursToBCD& (0+255),b
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;timing_controller.c: 163: convertedHoursToBCD = convertedHoursToBCD | (1 << 5);
  2190  0022EC  51DA               	movf	WriteTime@convertedHoursToBCD& (0+255),w,b
  2191  0022EE  0920               	iorlw	32
  2192  0022F0  6FDA               	movwf	WriteTime@convertedHoursToBCD& (0+255),b
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;timing_controller.c: 164: convertedHoursToBCD = convertedHoursToBCD | (1 << 6);
  2196  0022F2  51DA               	movf	WriteTime@convertedHoursToBCD& (0+255),w,b
  2197  0022F4  0940               	iorlw	64
  2198  0022F6  6FDA               	movwf	WriteTime@convertedHoursToBCD& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;timing_controller.c: 167: setMin = convertedMinutesToBCD;
  2202  0022F8  C0D9  F045         	movff	WriteTime@convertedMinutesToBCD,_setMin	;volatile
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;timing_controller.c: 168: setHr = convertedHoursToBCD;
  2206  0022FC  C0DA  F044         	movff	WriteTime@convertedHoursToBCD,_setHr	;volatile
  2207                           
  2208                           ; BSR set to: 0
  2209  002300  0012               	return		;funcret
  2210  002302                     __end_of_WriteTime:
  2211                           	opt stack 0
  2212                           tblptru	equ	0xFF8
  2213                           tblptrh	equ	0xFF7
  2214                           tblptrl	equ	0xFF6
  2215                           tablat	equ	0xFF5
  2216                           intcon	equ	0xFF2
  2217                           postinc0	equ	0xFEE
  2218                           wreg	equ	0xFE8
  2219                           postdec1	equ	0xFE5
  2220                           plusw1	equ	0xFE3
  2221                           fsr1l	equ	0xFE1
  2222                           plusw2	equ	0xFDB
  2223                           status	equ	0xFD8
  2224                           
  2225 ;; *************** function _IntToBcd *****************
  2226 ;; Defined at:
  2227 ;;		line 150 in file "timing_controller.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  x               1    wreg     unsigned char 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  x               1   47[COMRAM] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      unsigned char 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2, status,0, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2242 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2243 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2244 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2245 ;;Total ram usage:        3 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    4
  2248 ;; This function calls:
  2249 ;;		___awdiv
  2250 ;;		___awmod
  2251 ;; This function is called by:
  2252 ;;		_WriteTime
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text6
  2257  002230                     __ptext6:
  2258                           	opt stack 0
  2259  002230                     _IntToBcd:
  2260                           	opt stack 25
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;incstack = 0
  2264                           ;IntToBcd@x stored from wreg
  2265  002230  6E30               	movwf	IntToBcd@x,c
  2266                           
  2267                           ;timing_controller.c: 152: return ((x / 10) << 4) | (x % 10);
  2268  002232  C030  F026         	movff	IntToBcd@x,___awmod@dividend
  2269  002236  6A27               	clrf	___awmod@dividend+1,c
  2270  002238  0E00               	movlw	0
  2271  00223A  6E29               	movwf	___awmod@divisor+1,c
  2272  00223C  0E0A               	movlw	10
  2273  00223E  6E28               	movwf	___awmod@divisor,c
  2274  002240  ECBB  F00F         	call	___awmod	;wreg free
  2275  002244  C026  F02E         	movff	?___awmod,??_IntToBcd
  2276  002248  C027  F02F         	movff	?___awmod+1,??_IntToBcd+1
  2277  00224C  C030  F026         	movff	IntToBcd@x,___awdiv@dividend
  2278  002250  6A27               	clrf	___awdiv@dividend+1,c
  2279  002252  0E00               	movlw	0
  2280  002254  6E29               	movwf	___awdiv@divisor+1,c
  2281  002256  0E0A               	movlw	10
  2282  002258  6E28               	movwf	___awdiv@divisor,c
  2283  00225A  ECF7  F00E         	call	___awdiv	;wreg free
  2284  00225E  3826               	swapf	?___awdiv,w,c
  2285  002260  0BF0               	andlw	240
  2286  002262  102E               	iorwf	??_IntToBcd,w,c
  2287  002264  0012               	return	
  2288  002266                     __end_of_IntToBcd:
  2289                           	opt stack 0
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           intcon	equ	0xFF2
  2295                           postinc0	equ	0xFEE
  2296                           wreg	equ	0xFE8
  2297                           postdec1	equ	0xFE5
  2298                           plusw1	equ	0xFE3
  2299                           fsr1l	equ	0xFE1
  2300                           plusw2	equ	0xFDB
  2301                           status	equ	0xFD8
  2302                           
  2303 ;; *************** function _Timer2Init *****************
  2304 ;; Defined at:
  2305 ;;		line 15 in file "timer2.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;		None
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;		None
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		None
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;Total ram usage:        0 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    3
  2326 ;; This function calls:
  2327 ;;		Nothing
  2328 ;; This function is called by:
  2329 ;;		_main
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text7
  2334  002498                     __ptext7:
  2335                           	opt stack 0
  2336  002498                     _Timer2Init:
  2337                           	opt stack 27
  2338                           
  2339                           ;timer2.c: 16: PR2 = 255;
  2340                           
  2341                           ;incstack = 0
  2342  002498  68CB               	setf	4043,c	;volatile
  2343                           
  2344                           ;timer2.c: 17: T2OUTPS3 = 1;
  2345  00249A  8CCA               	bsf	4042,6,c	;volatile
  2346                           
  2347                           ;timer2.c: 18: T2OUTPS2 = 1;
  2348  00249C  8ACA               	bsf	4042,5,c	;volatile
  2349                           
  2350                           ;timer2.c: 19: T2OUTPS1 = 1;
  2351  00249E  88CA               	bsf	4042,4,c	;volatile
  2352                           
  2353                           ;timer2.c: 20: T2OUTPS0 = 1;
  2354  0024A0  86CA               	bsf	4042,3,c	;volatile
  2355                           
  2356                           ;timer2.c: 21: T2CKPS1 = 1;
  2357  0024A2  82CA               	bsf	4042,1,c	;volatile
  2358                           
  2359                           ;timer2.c: 22: T2CONbits.TMR2ON = 1;
  2360  0024A4  84CA               	bsf	4042,2,c	;volatile
  2361  0024A6  0012               	return		;funcret
  2362  0024A8                     __end_of_Timer2Init:
  2363                           	opt stack 0
  2364                           tblptru	equ	0xFF8
  2365                           tblptrh	equ	0xFF7
  2366                           tblptrl	equ	0xFF6
  2367                           tablat	equ	0xFF5
  2368                           intcon	equ	0xFF2
  2369                           postinc0	equ	0xFEE
  2370                           wreg	equ	0xFE8
  2371                           postdec1	equ	0xFE5
  2372                           plusw1	equ	0xFE3
  2373                           fsr1l	equ	0xFE1
  2374                           plusw2	equ	0xFDB
  2375                           status	equ	0xFD8
  2376                           
  2377 ;; *************** function _TimeSetting *****************
  2378 ;; Defined at:
  2379 ;;		line 41 in file "timing_controller.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;  readADCInput    2   14[BANK0 ] unsigned int 
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  minContainer    2   23[BANK1 ] unsigned char [2]
  2384 ;;  minContainer    1   26[BANK1 ] unsigned char [1]
  2385 ;;  hourContaine    2   21[BANK1 ] unsigned char [2]
  2386 ;;  hourContaine    1   25[BANK1 ] unsigned char [1]
  2387 ;;  setTimeDispl    9    0[BANK1 ] unsigned char [9]
  2388 ;;  next            6   15[BANK1 ] unsigned char [6]
  2389 ;;  move            6    9[BANK1 ] unsigned char [6]
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2399 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Locals:         0       0      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Totals:         0       3      27       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;Total ram usage:       30 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    5
  2406 ;; This function calls:
  2407 ;;		___lwdiv
  2408 ;;		_lcd_char
  2409 ;;		_lcd_command
  2410 ;;		_lcd_string
  2411 ;;		_sprintf
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text8
  2418  001260                     __ptext8:
  2419                           	opt stack 0
  2420  001260                     _TimeSetting:
  2421                           	opt stack 25
  2422                           
  2423                           ;timing_controller.c: 44: lcd_command(0x80);
  2424                           
  2425                           ;incstack = 0
  2426  001260  0E80               	movlw	128
  2427  001262  EC5F  F00C         	call	_lcd_command
  2428                           
  2429                           ;timing_controller.c: 45: char setTimeDisplay[] = "Set Time";
  2430  001266  EE20  F09F         	lfsr	2,TimeSetting@F3160
  2431  00126A  EE11  F000         	lfsr	1,TimeSetting@setTimeDisplay
  2432  00126E  0E08               	movlw	8
  2433  001270                     u2171:
  2434  001270  CFDB FFE3          	movff	plusw2,plusw1
  2435  001274  06E8               	decf	wreg,f,c
  2436  001276  E2FC               	bc	u2171
  2437                           
  2438                           ;timing_controller.c: 46: lcd_string(setTimeDisplay);
  2439  001278  0E00               	movlw	low TimeSetting@setTimeDisplay
  2440  00127A  6E29               	movwf	lcd_string@x,c
  2441  00127C  0E01               	movlw	high TimeSetting@setTimeDisplay
  2442  00127E  6E2A               	movwf	lcd_string@x+1,c
  2443  001280  EC4E  F011         	call	_lcd_string	;wreg free
  2444                           
  2445                           ;timing_controller.c: 48: lcd_command(0x8B);
  2446  001284  0E8B               	movlw	139
  2447  001286  EC5F  F00C         	call	_lcd_command
  2448                           
  2449                           ;timing_controller.c: 49: char move[] = "|Move";
  2450  00128A  EE20  F0CD         	lfsr	2,TimeSetting@F3162
  2451  00128E  EE11  F009         	lfsr	1,TimeSetting@move
  2452  001292  0E05               	movlw	5
  2453  001294                     u2181:
  2454  001294  CFDB FFE3          	movff	plusw2,plusw1
  2455  001298  06E8               	decf	wreg,f,c
  2456  00129A  E2FC               	bc	u2181
  2457                           
  2458                           ;timing_controller.c: 50: lcd_string(move);
  2459  00129C  0E09               	movlw	low TimeSetting@move
  2460  00129E  6E29               	movwf	lcd_string@x,c
  2461  0012A0  0E01               	movlw	high TimeSetting@move
  2462  0012A2  6E2A               	movwf	lcd_string@x+1,c
  2463  0012A4  EC4E  F011         	call	_lcd_string	;wreg free
  2464                           
  2465                           ;timing_controller.c: 52: lcd_command(0xCB);
  2466  0012A8  0ECB               	movlw	203
  2467  0012AA  EC5F  F00C         	call	_lcd_command
  2468                           
  2469                           ;timing_controller.c: 53: char next[] = "|Next";
  2470  0012AE  EE20  F0C7         	lfsr	2,TimeSetting@F3164
  2471  0012B2  EE11  F00F         	lfsr	1,TimeSetting@next
  2472  0012B6  0E05               	movlw	5
  2473  0012B8                     u2191:
  2474  0012B8  CFDB FFE3          	movff	plusw2,plusw1
  2475  0012BC  06E8               	decf	wreg,f,c
  2476  0012BE  E2FC               	bc	u2191
  2477                           
  2478                           ;timing_controller.c: 54: lcd_string(next);
  2479  0012C0  0E0F               	movlw	low TimeSetting@next
  2480  0012C2  6E29               	movwf	lcd_string@x,c
  2481  0012C4  0E01               	movlw	high TimeSetting@next
  2482  0012C6  6E2A               	movwf	lcd_string@x+1,c
  2483  0012C8  EC4E  F011         	call	_lcd_string	;wreg free
  2484                           
  2485                           ;timing_controller.c: 56: lcd_command(0xC2);
  2486  0012CC  0EC2               	movlw	194
  2487  0012CE  EC5F  F00C         	call	_lcd_command
  2488                           
  2489                           ;timing_controller.c: 57: lcd_char(':');
  2490  0012D2  0E3A               	movlw	58
  2491  0012D4  EC08  F00C         	call	_lcd_char
  2492                           
  2493                           ;timing_controller.c: 59: lcd_command(0xC0);
  2494  0012D8  0EC0               	movlw	192
  2495  0012DA  EC5F  F00C         	call	_lcd_command
  2496                           
  2497                           ;timing_controller.c: 63: _delay((unsigned long)((30)*(8000000/4000.0)));
  2498  0012DE  0E4E               	movlw	78
  2499  0012E0  0100               	movlb	0	; () banked
  2500  0012E2  6FE9               	movwf	??_TimeSetting& (0+255),b
  2501  0012E4  0EEB               	movlw	235
  2502  0012E6                     u2557:
  2503  0012E6  2EE8               	decfsz	wreg,f,c
  2504  0012E8  D7FE               	bra	u2557
  2505  0012EA  2FE9               	decfsz	??_TimeSetting& (0+255),f,b
  2506  0012EC  D7FC               	bra	u2557
  2507                           
  2508                           ;timing_controller.c: 64: if(PORTDbits.RD3 == 1)
  2509  0012EE  A683               	btfss	3971,3,c	;volatile
  2510  0012F0  D00F               	goto	l402
  2511                           
  2512                           ;timing_controller.c: 65: {
  2513                           ;timing_controller.c: 66: cursorLocation++;
  2514  0012F2  2A46               	incf	_cursorLocation,f,c	;volatile
  2515                           
  2516                           ;timing_controller.c: 67: if(cursorLocation == 1)
  2517  0012F4  0446               	decf	_cursorLocation,w,c	;volatile
  2518  0012F6  B4D8               	btfsc	status,2,c
  2519                           
  2520                           ;timing_controller.c: 68: {
  2521                           ;timing_controller.c: 69: cursorLocation = hr;
  2522  0012F8  C057  F046         	movff	_hr,_cursorLocation	;volatile
  2523                           
  2524                           ;timing_controller.c: 70: }
  2525                           ;timing_controller.c: 71: if(cursorLocation == 2)
  2526  0012FC  0E02               	movlw	2
  2527  0012FE  1846               	xorwf	_cursorLocation,w,c	;volatile
  2528  001300  B4D8               	btfsc	status,2,c
  2529                           
  2530                           ;timing_controller.c: 72: {
  2531                           ;timing_controller.c: 73: cursorLocation = min;
  2532  001302  C056  F046         	movff	_min,_cursorLocation	;volatile
  2533                           
  2534                           ;timing_controller.c: 74: }
  2535                           ;timing_controller.c: 75: if(cursorLocation > 2)
  2536  001306  0E02               	movlw	2
  2537  001308  6446               	cpfsgt	_cursorLocation,c	;volatile
  2538  00130A  D002               	goto	l402
  2539                           
  2540                           ;timing_controller.c: 76: {
  2541                           ;timing_controller.c: 77: cursorLocation = 1;
  2542  00130C  0E01               	movlw	1
  2543  00130E  6E46               	movwf	_cursorLocation,c	;volatile
  2544  001310                     l402:
  2545                           
  2546                           ;timing_controller.c: 78: }
  2547                           ;timing_controller.c: 79: }
  2548                           ;timing_controller.c: 81: if(cursorLocation == hr)
  2549  001310  5057               	movf	_hr,w,c	;volatile
  2550  001312  1846               	xorwf	_cursorLocation,w,c	;volatile
  2551  001314  A4D8               	btfss	status,2,c
  2552  001316  D05B               	goto	l406
  2553                           
  2554                           ;timing_controller.c: 82: {
  2555                           ;timing_controller.c: 83: _delay((unsigned long)((30)*(8000000/4000.0)));
  2556  001318  0E4E               	movlw	78
  2557  00131A  0100               	movlb	0	; () banked
  2558  00131C  6FE9               	movwf	??_TimeSetting& (0+255),b
  2559  00131E  0EEB               	movlw	235
  2560  001320                     u2567:
  2561  001320  2EE8               	decfsz	wreg,f,c
  2562  001322  D7FE               	bra	u2567
  2563  001324  2FE9               	decfsz	??_TimeSetting& (0+255),f,b
  2564  001326  D7FC               	bra	u2567
  2565                           
  2566                           ;timing_controller.c: 84: hrAdcRead = readADCInput/85;
  2567  001328  C0E7  F026         	movff	TimeSetting@readADCInput,___lwdiv@dividend
  2568  00132C  C0E8  F027         	movff	TimeSetting@readADCInput+1,___lwdiv@dividend+1
  2569  001330  0E00               	movlw	0
  2570  001332  6E29               	movwf	___lwdiv@divisor+1,c
  2571  001334  0E55               	movlw	85
  2572  001336  6E28               	movwf	___lwdiv@divisor,c
  2573  001338  EC20  F010         	call	___lwdiv	;wreg free
  2574  00133C  C026  F039         	movff	?___lwdiv,_hrAdcRead	;volatile
  2575  001340  C027  F03A         	movff	?___lwdiv+1,_hrAdcRead+1	;volatile
  2576                           
  2577                           ;timing_controller.c: 85: if(hrAdcRead <= 0)
  2578  001344  5039               	movf	_hrAdcRead,w,c	;volatile
  2579  001346  103A               	iorwf	_hrAdcRead+1,w,c	;volatile
  2580  001348  A4D8               	btfss	status,2,c
  2581  00134A  D004               	goto	l404
  2582                           
  2583                           ;timing_controller.c: 86: {
  2584                           ;timing_controller.c: 87: hrAdcRead = 1;
  2585  00134C  0E00               	movlw	0
  2586  00134E  6E3A               	movwf	_hrAdcRead+1,c	;volatile
  2587  001350  0E01               	movlw	1
  2588  001352  6E39               	movwf	_hrAdcRead,c	;volatile
  2589  001354                     l404:
  2590                           
  2591                           ;timing_controller.c: 88: }
  2592                           ;timing_controller.c: 89: if(hrAdcRead < 10)
  2593  001354  503A               	movf	_hrAdcRead+1,w,c	;volatile
  2594  001356  E123               	bnz	l3766
  2595  001358  0E0A               	movlw	10
  2596  00135A  5C39               	subwf	_hrAdcRead,w,c	;volatile
  2597  00135C  B0D8               	btfsc	status,0,c
  2598  00135E  D01F               	goto	l405
  2599                           
  2600                           ;timing_controller.c: 90: {
  2601                           ;timing_controller.c: 91: lcd_command(0xC0);
  2602  001360  0EC0               	movlw	192
  2603  001362  EC5F  F00C         	call	_lcd_command
  2604                           
  2605                           ;timing_controller.c: 92: lcd_char('0');
  2606  001366  0E30               	movlw	48
  2607  001368  EC08  F00C         	call	_lcd_char
  2608                           
  2609                           ;timing_controller.c: 93: lcd_command(0xC1);
  2610  00136C  0EC1               	movlw	193
  2611  00136E  EC5F  F00C         	call	_lcd_command
  2612                           
  2613                           ;timing_controller.c: 94: char hourContainer[1];
  2614                           ;timing_controller.c: 95: sprintf(hourContainer, "%u", hrAdcRead);
  2615  001372  0E19               	movlw	low TimeSetting@hourContainer
  2616  001374  0100               	movlb	0	; () banked
  2617  001376  6FDA               	movwf	sprintf@sp& (0+255),b
  2618  001378  0E01               	movlw	high TimeSetting@hourContainer
  2619  00137A  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  2620  00137C  0E0B               	movlw	low STR_1
  2621  00137E  6FDC               	movwf	sprintf@f& (0+255),b
  2622  001380  0E10               	movlw	high STR_1
  2623  001382  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  2624  001384  C039  F0DE         	movff	_hrAdcRead,?_sprintf+4	;volatile
  2625  001388  C03A  F0DF         	movff	_hrAdcRead+1,?_sprintf+5	;volatile
  2626  00138C  ECE6  F00A         	call	_sprintf	;wreg free
  2627                           
  2628                           ;timing_controller.c: 96: lcd_string(hourContainer);
  2629  001390  0E19               	movlw	low TimeSetting@hourContainer
  2630  001392  6E29               	movwf	lcd_string@x,c
  2631  001394  0E01               	movlw	high TimeSetting@hourContainer
  2632  001396  6E2A               	movwf	lcd_string@x+1,c
  2633  001398  EC4E  F011         	call	_lcd_string	;wreg free
  2634                           
  2635                           ;timing_controller.c: 97: }
  2636  00139C  D018               	goto	l406
  2637  00139E                     l405:
  2638  00139E                     l3766:
  2639                           
  2640                           ;timing_controller.c: 98: else{
  2641                           ;timing_controller.c: 99: lcd_command(0xC0);
  2642  00139E  0EC0               	movlw	192
  2643  0013A0  EC5F  F00C         	call	_lcd_command
  2644                           
  2645                           ;timing_controller.c: 100: char hourContainer[2];
  2646                           ;timing_controller.c: 101: sprintf(hourContainer, "%u", hrAdcRead);
  2647  0013A4  0E15               	movlw	low TimeSetting@hourContainer_1327
  2648  0013A6  0100               	movlb	0	; () banked
  2649  0013A8  6FDA               	movwf	sprintf@sp& (0+255),b
  2650  0013AA  0E01               	movlw	high TimeSetting@hourContainer_1327
  2651  0013AC  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  2652  0013AE  0E0B               	movlw	low STR_1
  2653  0013B0  6FDC               	movwf	sprintf@f& (0+255),b
  2654  0013B2  0E10               	movlw	high STR_1
  2655  0013B4  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  2656  0013B6  C039  F0DE         	movff	_hrAdcRead,?_sprintf+4	;volatile
  2657  0013BA  C03A  F0DF         	movff	_hrAdcRead+1,?_sprintf+5	;volatile
  2658  0013BE  ECE6  F00A         	call	_sprintf	;wreg free
  2659                           
  2660                           ;timing_controller.c: 102: lcd_string(hourContainer);
  2661  0013C2  0E15               	movlw	low TimeSetting@hourContainer_1327
  2662  0013C4  6E29               	movwf	lcd_string@x,c
  2663  0013C6  0E01               	movlw	high TimeSetting@hourContainer_1327
  2664  0013C8  6E2A               	movwf	lcd_string@x+1,c
  2665  0013CA  EC4E  F011         	call	_lcd_string	;wreg free
  2666  0013CE                     l406:
  2667                           
  2668                           ;timing_controller.c: 103: }
  2669                           ;timing_controller.c: 104: }
  2670                           ;timing_controller.c: 106: if(cursorLocation == min)
  2671  0013CE  5056               	movf	_min,w,c	;volatile
  2672  0013D0  1846               	xorwf	_cursorLocation,w,c	;volatile
  2673  0013D2  A4D8               	btfss	status,2,c
  2674  0013D4  0012               	return	
  2675                           
  2676                           ;timing_controller.c: 107: {
  2677                           ;timing_controller.c: 108: _delay((unsigned long)((30)*(8000000/4000.0)));
  2678  0013D6  0E4E               	movlw	78
  2679  0013D8  0100               	movlb	0	; () banked
  2680  0013DA  6FE9               	movwf	??_TimeSetting& (0+255),b
  2681  0013DC  0EEB               	movlw	235
  2682  0013DE                     u2577:
  2683  0013DE  2EE8               	decfsz	wreg,f,c
  2684  0013E0  D7FE               	bra	u2577
  2685  0013E2  2FE9               	decfsz	??_TimeSetting& (0+255),f,b
  2686  0013E4  D7FC               	bra	u2577
  2687                           
  2688                           ;timing_controller.c: 109: minAdcRead = readADCInput/17;
  2689  0013E6  C0E7  F026         	movff	TimeSetting@readADCInput,___lwdiv@dividend
  2690  0013EA  C0E8  F027         	movff	TimeSetting@readADCInput+1,___lwdiv@dividend+1
  2691  0013EE  0E00               	movlw	0
  2692  0013F0  6E29               	movwf	___lwdiv@divisor+1,c
  2693  0013F2  0E11               	movlw	17
  2694  0013F4  6E28               	movwf	___lwdiv@divisor,c
  2695  0013F6  EC20  F010         	call	___lwdiv	;wreg free
  2696  0013FA  C026  F037         	movff	?___lwdiv,_minAdcRead	;volatile
  2697  0013FE  C027  F038         	movff	?___lwdiv+1,_minAdcRead+1	;volatile
  2698                           
  2699                           ;timing_controller.c: 111: if(minAdcRead >= 60)
  2700  001402  5038               	movf	_minAdcRead+1,w,c	;volatile
  2701  001404  E104               	bnz	u2280
  2702  001406  0E3C               	movlw	60
  2703  001408  5C37               	subwf	_minAdcRead,w,c	;volatile
  2704  00140A  A0D8               	btfss	status,0,c
  2705  00140C  D004               	goto	l408
  2706  00140E                     u2280:
  2707                           
  2708                           ;timing_controller.c: 112: {
  2709                           ;timing_controller.c: 113: minAdcRead = 59;
  2710  00140E  0E00               	movlw	0
  2711  001410  6E38               	movwf	_minAdcRead+1,c	;volatile
  2712  001412  0E3B               	movlw	59
  2713  001414  6E37               	movwf	_minAdcRead,c	;volatile
  2714  001416                     l408:
  2715                           
  2716                           ;timing_controller.c: 114: }
  2717                           ;timing_controller.c: 116: if(minAdcRead < 10)
  2718  001416  5038               	movf	_minAdcRead+1,w,c	;volatile
  2719  001418  E123               	bnz	l3790
  2720  00141A  0E0A               	movlw	10
  2721  00141C  5C37               	subwf	_minAdcRead,w,c	;volatile
  2722  00141E  B0D8               	btfsc	status,0,c
  2723  001420  D01F               	goto	l409
  2724                           
  2725                           ;timing_controller.c: 117: {
  2726                           ;timing_controller.c: 118: lcd_command(0xC3);
  2727  001422  0EC3               	movlw	195
  2728  001424  EC5F  F00C         	call	_lcd_command
  2729                           
  2730                           ;timing_controller.c: 119: lcd_char('0');
  2731  001428  0E30               	movlw	48
  2732  00142A  EC08  F00C         	call	_lcd_char
  2733                           
  2734                           ;timing_controller.c: 120: lcd_command(0xC4);
  2735  00142E  0EC4               	movlw	196
  2736  001430  EC5F  F00C         	call	_lcd_command
  2737                           
  2738                           ;timing_controller.c: 121: char minContainer[1];
  2739                           ;timing_controller.c: 122: sprintf(minContainer, "%u", minAdcRead);
  2740  001434  0E1A               	movlw	low TimeSetting@minContainer
  2741  001436  0100               	movlb	0	; () banked
  2742  001438  6FDA               	movwf	sprintf@sp& (0+255),b
  2743  00143A  0E01               	movlw	high TimeSetting@minContainer
  2744  00143C  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  2745  00143E  0E0B               	movlw	low STR_1
  2746  001440  6FDC               	movwf	sprintf@f& (0+255),b
  2747  001442  0E10               	movlw	high STR_1
  2748  001444  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  2749  001446  C037  F0DE         	movff	_minAdcRead,?_sprintf+4	;volatile
  2750  00144A  C038  F0DF         	movff	_minAdcRead+1,?_sprintf+5	;volatile
  2751  00144E  ECE6  F00A         	call	_sprintf	;wreg free
  2752                           
  2753                           ;timing_controller.c: 123: lcd_string(minContainer);
  2754  001452  0E1A               	movlw	low TimeSetting@minContainer
  2755  001454  6E29               	movwf	lcd_string@x,c
  2756  001456  0E01               	movlw	high TimeSetting@minContainer
  2757  001458  6E2A               	movwf	lcd_string@x+1,c
  2758  00145A  EC4E  F011         	call	_lcd_string	;wreg free
  2759                           
  2760                           ;timing_controller.c: 124: }
  2761  00145E  0012               	return	
  2762  001460                     l409:
  2763  001460                     l3790:
  2764                           
  2765                           ;timing_controller.c: 125: else{
  2766                           ;timing_controller.c: 126: lcd_command(0xC3);
  2767  001460  0EC3               	movlw	195
  2768  001462  EC5F  F00C         	call	_lcd_command
  2769                           
  2770                           ;timing_controller.c: 127: char minContainer[2];
  2771                           ;timing_controller.c: 128: sprintf(minContainer, "%u", minAdcRead);
  2772  001466  0E17               	movlw	low TimeSetting@minContainer_1331
  2773  001468  0100               	movlb	0	; () banked
  2774  00146A  6FDA               	movwf	sprintf@sp& (0+255),b
  2775  00146C  0E01               	movlw	high TimeSetting@minContainer_1331
  2776  00146E  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  2777  001470  0E0B               	movlw	low STR_1
  2778  001472  6FDC               	movwf	sprintf@f& (0+255),b
  2779  001474  0E10               	movlw	high STR_1
  2780  001476  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  2781  001478  C037  F0DE         	movff	_minAdcRead,?_sprintf+4	;volatile
  2782  00147C  C038  F0DF         	movff	_minAdcRead+1,?_sprintf+5	;volatile
  2783  001480  ECE6  F00A         	call	_sprintf	;wreg free
  2784                           
  2785                           ;timing_controller.c: 129: lcd_string(minContainer);
  2786  001484  0E17               	movlw	low TimeSetting@minContainer_1331
  2787  001486  6E29               	movwf	lcd_string@x,c
  2788  001488  0E01               	movlw	high TimeSetting@minContainer_1331
  2789  00148A  6E2A               	movwf	lcd_string@x+1,c
  2790  00148C  EC4E  F011         	call	_lcd_string	;wreg free
  2791  001490  0012               	return	
  2792  001492                     __end_of_TimeSetting:
  2793                           	opt stack 0
  2794                           tblptru	equ	0xFF8
  2795                           tblptrh	equ	0xFF7
  2796                           tblptrl	equ	0xFF6
  2797                           tablat	equ	0xFF5
  2798                           intcon	equ	0xFF2
  2799                           postinc0	equ	0xFEE
  2800                           wreg	equ	0xFE8
  2801                           postdec1	equ	0xFE5
  2802                           plusw1	equ	0xFE3
  2803                           fsr1l	equ	0xFE1
  2804                           plusw2	equ	0xFDB
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _SpiInit *****************
  2808 ;; Defined at:
  2809 ;;		line 18 in file "spi.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;Total ram usage:        0 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    3
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_main
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text9
  2838  002432                     __ptext9:
  2839                           	opt stack 0
  2840  002432                     _SpiInit:
  2841                           	opt stack 27
  2842                           
  2843                           ;spi.c: 25: TRISC = 0x00;
  2844                           
  2845                           ;incstack = 0
  2846  002432  0E00               	movlw	0
  2847  002434  6E94               	movwf	3988,c	;volatile
  2848                           
  2849                           ;spi.c: 26: TRISCbits.TRISC5 = 0;
  2850  002436  9A94               	bcf	3988,5,c	;volatile
  2851                           
  2852                           ;spi.c: 27: TRISCbits.TRISC4 = 1;
  2853  002438  8894               	bsf	3988,4,c	;volatile
  2854                           
  2855                           ;spi.c: 28: TRISCbits.TRISC3 = 0;
  2856  00243A  9694               	bcf	3988,3,c	;volatile
  2857                           
  2858                           ;spi.c: 29: TRISAbits.TRISA5 = 1;
  2859  00243C  8A92               	bsf	3986,5,c	;volatile
  2860                           
  2861                           ;spi.c: 33: SSPSTATbits.SMP = 1;
  2862  00243E  8EC7               	bsf	4039,7,c	;volatile
  2863                           
  2864                           ;spi.c: 38: SSPSTATbits.CKE = 0;
  2865  002440  9CC7               	bcf	4039,6,c	;volatile
  2866                           
  2867                           ;spi.c: 40: SSPCON1bits.SSPEN = 1;
  2868  002442  8AC6               	bsf	4038,5,c	;volatile
  2869                           
  2870                           ;spi.c: 42: SSPCON1bits.CKP = 1;
  2871  002444  88C6               	bsf	4038,4,c	;volatile
  2872                           
  2873                           ;spi.c: 47: SSPCON1bits.SSPM3 = 0;
  2874  002446  96C6               	bcf	4038,3,c	;volatile
  2875                           
  2876                           ;spi.c: 48: SSPCON1bits.SSPM2 = 0;
  2877  002448  94C6               	bcf	4038,2,c	;volatile
  2878                           
  2879                           ;spi.c: 49: SSPCON1bits.SSPM1 = 1;
  2880  00244A  82C6               	bsf	4038,1,c	;volatile
  2881                           
  2882                           ;spi.c: 50: SSPCON1bits.SSPM0 = 0;
  2883  00244C  90C6               	bcf	4038,0,c	;volatile
  2884  00244E  0012               	return		;funcret
  2885  002450                     __end_of_SpiInit:
  2886                           	opt stack 0
  2887                           tblptru	equ	0xFF8
  2888                           tblptrh	equ	0xFF7
  2889                           tblptrl	equ	0xFF6
  2890                           tablat	equ	0xFF5
  2891                           intcon	equ	0xFF2
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           postdec1	equ	0xFE5
  2895                           plusw1	equ	0xFE3
  2896                           fsr1l	equ	0xFE1
  2897                           plusw2	equ	0xFDB
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _ReadRTCAndDisplay *****************
  2901 ;; Defined at:
  2902 ;;		line 259 in file "timing_controller.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  bakeT           6   18[BANK0 ] unsigned char [6]
  2907 ;;  time            5   24[BANK0 ] unsigned char [5]
  2908 ;;  deliminator     2   29[BANK0 ] unsigned char [2]
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      void 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;Total ram usage:       13 bytes
  2923 ;; Hardware stack levels used:    1
  2924 ;; Hardware stack levels required when called:    7
  2925 ;; This function calls:
  2926 ;;		_ReadAndDisplayHrFromRTC
  2927 ;;		_ReadAndDisplayMinFromRTC
  2928 ;;		_ReadAndDisplaySecFromRTC
  2929 ;;		_lcd_char
  2930 ;;		_lcd_command
  2931 ;;		_lcd_string
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text10
  2938  001C5E                     __ptext10:
  2939                           	opt stack 0
  2940  001C5E                     _ReadRTCAndDisplay:
  2941                           	opt stack 23
  2942                           
  2943                           ;timing_controller.c: 261: lcd_command(0x80);
  2944                           
  2945                           ;incstack = 0
  2946  001C5E  0E80               	movlw	128
  2947  001C60  EC5F  F00C         	call	_lcd_command
  2948                           
  2949                           ;timing_controller.c: 262: char time[] = "Time";
  2950  001C64  EE20  F04B         	lfsr	2,ReadRTCAndDisplay@F3194
  2951  001C68  EE10  F0F1         	lfsr	1,ReadRTCAndDisplay@time
  2952  001C6C  0E04               	movlw	4
  2953  001C6E                     u2301:
  2954  001C6E  CFDB FFE3          	movff	plusw2,plusw1
  2955  001C72  06E8               	decf	wreg,f,c
  2956  001C74  E2FC               	bc	u2301
  2957                           
  2958                           ;timing_controller.c: 263: lcd_string(time);
  2959  001C76  0EF1               	movlw	low ReadRTCAndDisplay@time
  2960  001C78  6E29               	movwf	lcd_string@x,c
  2961  001C7A  0E00               	movlw	high ReadRTCAndDisplay@time
  2962  001C7C  6E2A               	movwf	lcd_string@x+1,c
  2963  001C7E  EC4E  F011         	call	_lcd_string	;wreg free
  2964                           
  2965                           ;timing_controller.c: 265: lcd_command(0x8B);
  2966  001C82  0E8B               	movlw	139
  2967  001C84  EC5F  F00C         	call	_lcd_command
  2968                           
  2969                           ;timing_controller.c: 266: char deliminator[] = "|";
  2970  001C88  C054  F0F6         	movff	ReadRTCAndDisplay@F3196,ReadRTCAndDisplay@deliminator
  2971  001C8C  C055  F0F7         	movff	ReadRTCAndDisplay@F3196+1,ReadRTCAndDisplay@deliminator+1
  2972                           
  2973                           ;timing_controller.c: 267: lcd_string(deliminator);
  2974  001C90  0EF6               	movlw	low ReadRTCAndDisplay@deliminator
  2975  001C92  6E29               	movwf	lcd_string@x,c
  2976  001C94  0E00               	movlw	high ReadRTCAndDisplay@deliminator
  2977  001C96  6E2A               	movwf	lcd_string@x+1,c
  2978  001C98  EC4E  F011         	call	_lcd_string	;wreg free
  2979                           
  2980                           ;timing_controller.c: 269: lcd_command(0xCB);
  2981  001C9C  0ECB               	movlw	203
  2982  001C9E  EC5F  F00C         	call	_lcd_command
  2983                           
  2984                           ;timing_controller.c: 270: char bakeT[] = "|Bake";
  2985  001CA2  EE20  F0C1         	lfsr	2,ReadRTCAndDisplay@F3198
  2986  001CA6  EE10  F0EB         	lfsr	1,ReadRTCAndDisplay@bakeT
  2987  001CAA  0E05               	movlw	5
  2988  001CAC                     u2311:
  2989  001CAC  CFDB FFE3          	movff	plusw2,plusw1
  2990  001CB0  06E8               	decf	wreg,f,c
  2991  001CB2  E2FC               	bc	u2311
  2992                           
  2993                           ;timing_controller.c: 271: lcd_string(bakeT);
  2994  001CB4  0EEB               	movlw	low ReadRTCAndDisplay@bakeT
  2995  001CB6  6E29               	movwf	lcd_string@x,c
  2996  001CB8  0E00               	movlw	high ReadRTCAndDisplay@bakeT
  2997  001CBA  6E2A               	movwf	lcd_string@x+1,c
  2998  001CBC  EC4E  F011         	call	_lcd_string	;wreg free
  2999                           
  3000                           ;timing_controller.c: 274: ReadAndDisplayHrFromRTC();
  3001  001CC0  ECE8  F00D         	call	_ReadAndDisplayHrFromRTC	;wreg free
  3002                           
  3003                           ;timing_controller.c: 277: lcd_command(0xC2);
  3004  001CC4  0EC2               	movlw	194
  3005  001CC6  EC5F  F00C         	call	_lcd_command
  3006                           
  3007                           ;timing_controller.c: 278: lcd_char(':');
  3008  001CCA  0E3A               	movlw	58
  3009  001CCC  EC08  F00C         	call	_lcd_char
  3010                           
  3011                           ;timing_controller.c: 281: ReadAndDisplayMinFromRTC();
  3012  001CD0  EC58  F00D         	call	_ReadAndDisplayMinFromRTC	;wreg free
  3013                           
  3014                           ;timing_controller.c: 284: lcd_command(0xC5);
  3015  001CD4  0EC5               	movlw	197
  3016  001CD6  EC5F  F00C         	call	_lcd_command
  3017                           
  3018                           ;timing_controller.c: 285: lcd_char(':');
  3019  001CDA  0E3A               	movlw	58
  3020  001CDC  EC08  F00C         	call	_lcd_char
  3021                           
  3022                           ;timing_controller.c: 288: ReadAndDisplaySecFromRTC();
  3023  001CE0  ECA1  F00D         	call	_ReadAndDisplaySecFromRTC	;wreg free
  3024  001CE4  0012               	return		;funcret
  3025  001CE6                     __end_of_ReadRTCAndDisplay:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           intcon	equ	0xFF2
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           plusw1	equ	0xFE3
  3036                           fsr1l	equ	0xFE1
  3037                           plusw2	equ	0xFDB
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function _ReadAndDisplaySecFromRTC *****************
  3041 ;; Defined at:
  3042 ;;		line 232 in file "timing_controller.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;  secondContai    2   14[BANK0 ] unsigned char [2]
  3047 ;;  secondContai    1   17[BANK0 ] unsigned char [1]
  3048 ;;  seconds         1   16[BANK0 ] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  2  435[None  ] int 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;Total ram usage:        4 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    6
  3065 ;; This function calls:
  3066 ;;		_I2C_ReadFromSlave
  3067 ;;		_bcd_to_decimal
  3068 ;;		_lcd_char
  3069 ;;		_lcd_command
  3070 ;;		_lcd_string
  3071 ;;		_sprintf
  3072 ;; This function is called by:
  3073 ;;		_ReadRTCAndDisplay
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text11
  3078  001B42                     __ptext11:
  3079                           	opt stack 0
  3080  001B42                     _ReadAndDisplaySecFromRTC:
  3081                           	opt stack 23
  3082                           
  3083                           ;timing_controller.c: 234: uint8_t seconds;
  3084                           ;timing_controller.c: 236: secondsRead = I2C_ReadFromSlave(0x00);
  3085                           
  3086                           ;incstack = 0
  3087  001B42  0E00               	movlw	0
  3088  001B44  EC81  F011         	call	_I2C_ReadFromSlave
  3089  001B48  6E41               	movwf	_secondsRead,c	;volatile
  3090                           
  3091                           ;timing_controller.c: 237: __nop();
  3092  001B4A  F000               	nop	
  3093                           
  3094                           ;timing_controller.c: 238: secondsRead = secondsRead & 0x7F;
  3095  001B4C  5041               	movf	_secondsRead,w,c	;volatile
  3096  001B4E  0B7F               	andlw	127
  3097  001B50  6E41               	movwf	_secondsRead,c	;volatile
  3098                           
  3099                           ;timing_controller.c: 239: seconds = bcd_to_decimal(secondsRead);
  3100  001B52  5041               	movf	_secondsRead,w,c	;volatile
  3101  001B54  ECC2  F011         	call	_bcd_to_decimal
  3102  001B58  5026               	movf	?_bcd_to_decimal,w,c
  3103  001B5A  0100               	movlb	0	; () banked
  3104  001B5C  6FE9               	movwf	ReadAndDisplaySecFromRTC@seconds& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;timing_controller.c: 242: if(seconds < 10)
  3108  001B5E  0E0A               	movlw	10
  3109  001B60  61E9               	cpfslt	ReadAndDisplaySecFromRTC@seconds& (0+255),b
  3110  001B62  D01E               	goto	l436
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;timing_controller.c: 243: {
  3114                           ;timing_controller.c: 244: lcd_command(0xC6);
  3115  001B64  0EC6               	movlw	198
  3116  001B66  EC5F  F00C         	call	_lcd_command
  3117                           
  3118                           ;timing_controller.c: 245: lcd_char('0');
  3119  001B6A  0E30               	movlw	48
  3120  001B6C  EC08  F00C         	call	_lcd_char
  3121                           
  3122                           ;timing_controller.c: 246: lcd_command(0xC7);
  3123  001B70  0EC7               	movlw	199
  3124  001B72  EC5F  F00C         	call	_lcd_command
  3125                           
  3126                           ;timing_controller.c: 247: char secondContainerDisplay[1];
  3127                           ;timing_controller.c: 248: sprintf(secondContainerDisplay, "%u", seconds);
  3128  001B76  0EEA               	movlw	low ReadAndDisplaySecFromRTC@secondContainerDisplay
  3129  001B78  0100               	movlb	0	; () banked
  3130  001B7A  6FDA               	movwf	sprintf@sp& (0+255),b
  3131  001B7C  0E00               	movlw	high ReadAndDisplaySecFromRTC@secondContainerDisplay
  3132  001B7E  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3133  001B80  0E0B               	movlw	low STR_1
  3134  001B82  6FDC               	movwf	sprintf@f& (0+255),b
  3135  001B84  0E10               	movlw	high STR_1
  3136  001B86  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3137  001B88  C0E9  F0DE         	movff	ReadAndDisplaySecFromRTC@seconds,?_sprintf+4
  3138  001B8C  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3139  001B8E  ECE6  F00A         	call	_sprintf	;wreg free
  3140                           
  3141                           ;timing_controller.c: 249: lcd_string(secondContainerDisplay);
  3142  001B92  0EEA               	movlw	low ReadAndDisplaySecFromRTC@secondContainerDisplay
  3143  001B94  6E29               	movwf	lcd_string@x,c
  3144  001B96  0E00               	movlw	high ReadAndDisplaySecFromRTC@secondContainerDisplay
  3145  001B98  6E2A               	movwf	lcd_string@x+1,c
  3146  001B9A  EC4E  F011         	call	_lcd_string	;wreg free
  3147                           
  3148                           ;timing_controller.c: 250: }
  3149  001B9E  0012               	return	
  3150  001BA0                     l436:
  3151                           
  3152                           ;timing_controller.c: 251: else{
  3153                           ;timing_controller.c: 252: lcd_command(0xC6);
  3154  001BA0  0EC6               	movlw	198
  3155  001BA2  EC5F  F00C         	call	_lcd_command
  3156                           
  3157                           ;timing_controller.c: 253: char secondContainerDisplay[2];
  3158                           ;timing_controller.c: 254: sprintf(secondContainerDisplay, "%u", seconds);
  3159  001BA6  0EE7               	movlw	low ReadAndDisplaySecFromRTC@secondContainerDisplay_1361
  3160  001BA8  0100               	movlb	0	; () banked
  3161  001BAA  6FDA               	movwf	sprintf@sp& (0+255),b
  3162  001BAC  0E00               	movlw	high ReadAndDisplaySecFromRTC@secondContainerDisplay_1361
  3163  001BAE  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3164  001BB0  0E0B               	movlw	low STR_1
  3165  001BB2  6FDC               	movwf	sprintf@f& (0+255),b
  3166  001BB4  0E10               	movlw	high STR_1
  3167  001BB6  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3168  001BB8  C0E9  F0DE         	movff	ReadAndDisplaySecFromRTC@seconds,?_sprintf+4
  3169  001BBC  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3170  001BBE  ECE6  F00A         	call	_sprintf	;wreg free
  3171                           
  3172                           ;timing_controller.c: 255: lcd_string(secondContainerDisplay);
  3173  001BC2  0EE7               	movlw	low ReadAndDisplaySecFromRTC@secondContainerDisplay_1361
  3174  001BC4  6E29               	movwf	lcd_string@x,c
  3175  001BC6  0E00               	movlw	high ReadAndDisplaySecFromRTC@secondContainerDisplay_1361
  3176  001BC8  6E2A               	movwf	lcd_string@x+1,c
  3177  001BCA  EC4E  F011         	call	_lcd_string	;wreg free
  3178  001BCE  0012               	return	
  3179  001BD0                     __end_of_ReadAndDisplaySecFromRTC:
  3180                           	opt stack 0
  3181                           tblptru	equ	0xFF8
  3182                           tblptrh	equ	0xFF7
  3183                           tblptrl	equ	0xFF6
  3184                           tablat	equ	0xFF5
  3185                           intcon	equ	0xFF2
  3186                           postinc0	equ	0xFEE
  3187                           wreg	equ	0xFE8
  3188                           postdec1	equ	0xFE5
  3189                           plusw1	equ	0xFE3
  3190                           fsr1l	equ	0xFE1
  3191                           plusw2	equ	0xFDB
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _ReadAndDisplayMinFromRTC *****************
  3195 ;; Defined at:
  3196 ;;		line 179 in file "timing_controller.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;  minContainer    2   14[BANK0 ] unsigned char [2]
  3201 ;;  minContainer    1   17[BANK0 ] unsigned char [1]
  3202 ;;  min             1   16[BANK0 ] unsigned char 
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      void 
  3205 ;; Registers used:
  3206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;Total ram usage:        4 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    6
  3219 ;; This function calls:
  3220 ;;		_I2C_ReadFromSlave
  3221 ;;		_bcd_to_decimal
  3222 ;;		_lcd_char
  3223 ;;		_lcd_command
  3224 ;;		_lcd_string
  3225 ;;		_sprintf
  3226 ;; This function is called by:
  3227 ;;		_ReadRTCAndDisplay
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           	psect	text12
  3232  001AB0                     __ptext12:
  3233                           	opt stack 0
  3234  001AB0                     _ReadAndDisplayMinFromRTC:
  3235                           	opt stack 23
  3236                           
  3237                           ;timing_controller.c: 181: uint8_t min;
  3238                           ;timing_controller.c: 183: minRead = I2C_ReadFromSlave(0x01);
  3239                           
  3240                           ;incstack = 0
  3241  001AB0  0E01               	movlw	1
  3242  001AB2  EC81  F011         	call	_I2C_ReadFromSlave
  3243  001AB6  6E43               	movwf	_minRead,c	;volatile
  3244                           
  3245                           ;timing_controller.c: 184: __nop();
  3246  001AB8  F000               	nop	
  3247                           
  3248                           ;timing_controller.c: 185: minRead = minRead & 0x7F;
  3249  001ABA  5043               	movf	_minRead,w,c	;volatile
  3250  001ABC  0B7F               	andlw	127
  3251  001ABE  6E43               	movwf	_minRead,c	;volatile
  3252                           
  3253                           ;timing_controller.c: 186: min = bcd_to_decimal(minRead);
  3254  001AC0  5043               	movf	_minRead,w,c	;volatile
  3255  001AC2  ECC2  F011         	call	_bcd_to_decimal
  3256  001AC6  5026               	movf	?_bcd_to_decimal,w,c
  3257  001AC8  0100               	movlb	0	; () banked
  3258  001ACA  6FE9               	movwf	ReadAndDisplayMinFromRTC@min& (0+255),b
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;timing_controller.c: 187: __nop();
  3262  001ACC  F000               	nop	
  3263                           
  3264                           ;timing_controller.c: 189: if(min < 10)
  3265  001ACE  0E0A               	movlw	10
  3266  001AD0  0100               	movlb	0	; () banked
  3267  001AD2  61E9               	cpfslt	ReadAndDisplayMinFromRTC@min& (0+255),b
  3268  001AD4  D01E               	goto	l426
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;timing_controller.c: 190: {
  3272                           ;timing_controller.c: 191: lcd_command(0xC3);
  3273  001AD6  0EC3               	movlw	195
  3274  001AD8  EC5F  F00C         	call	_lcd_command
  3275                           
  3276                           ;timing_controller.c: 192: lcd_char('0');
  3277  001ADC  0E30               	movlw	48
  3278  001ADE  EC08  F00C         	call	_lcd_char
  3279                           
  3280                           ;timing_controller.c: 193: lcd_command(0xC4);
  3281  001AE2  0EC4               	movlw	196
  3282  001AE4  EC5F  F00C         	call	_lcd_command
  3283                           
  3284                           ;timing_controller.c: 194: char minContainerDisplay[1];
  3285                           ;timing_controller.c: 195: sprintf(minContainerDisplay, "%u", min);
  3286  001AE8  0EEA               	movlw	low ReadAndDisplayMinFromRTC@minContainerDisplay
  3287  001AEA  0100               	movlb	0	; () banked
  3288  001AEC  6FDA               	movwf	sprintf@sp& (0+255),b
  3289  001AEE  0E00               	movlw	high ReadAndDisplayMinFromRTC@minContainerDisplay
  3290  001AF0  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3291  001AF2  0E0B               	movlw	low STR_1
  3292  001AF4  6FDC               	movwf	sprintf@f& (0+255),b
  3293  001AF6  0E10               	movlw	high STR_1
  3294  001AF8  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3295  001AFA  C0E9  F0DE         	movff	ReadAndDisplayMinFromRTC@min,?_sprintf+4
  3296  001AFE  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3297  001B00  ECE6  F00A         	call	_sprintf	;wreg free
  3298                           
  3299                           ;timing_controller.c: 196: lcd_string(minContainerDisplay);
  3300  001B04  0EEA               	movlw	low ReadAndDisplayMinFromRTC@minContainerDisplay
  3301  001B06  6E29               	movwf	lcd_string@x,c
  3302  001B08  0E00               	movlw	high ReadAndDisplayMinFromRTC@minContainerDisplay
  3303  001B0A  6E2A               	movwf	lcd_string@x+1,c
  3304  001B0C  EC4E  F011         	call	_lcd_string	;wreg free
  3305                           
  3306                           ;timing_controller.c: 197: }
  3307  001B10  0012               	return	
  3308  001B12                     l426:
  3309                           
  3310                           ;timing_controller.c: 198: else{
  3311                           ;timing_controller.c: 199: lcd_command(0xC3);
  3312  001B12  0EC3               	movlw	195
  3313  001B14  EC5F  F00C         	call	_lcd_command
  3314                           
  3315                           ;timing_controller.c: 200: char minContainerDisplay[2];
  3316                           ;timing_controller.c: 201: sprintf(minContainerDisplay, "%u", min);
  3317  001B18  0EE7               	movlw	low ReadAndDisplayMinFromRTC@minContainerDisplay_1349
  3318  001B1A  0100               	movlb	0	; () banked
  3319  001B1C  6FDA               	movwf	sprintf@sp& (0+255),b
  3320  001B1E  0E00               	movlw	high ReadAndDisplayMinFromRTC@minContainerDisplay_1349
  3321  001B20  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3322  001B22  0E0B               	movlw	low STR_1
  3323  001B24  6FDC               	movwf	sprintf@f& (0+255),b
  3324  001B26  0E10               	movlw	high STR_1
  3325  001B28  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3326  001B2A  C0E9  F0DE         	movff	ReadAndDisplayMinFromRTC@min,?_sprintf+4
  3327  001B2E  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3328  001B30  ECE6  F00A         	call	_sprintf	;wreg free
  3329                           
  3330                           ;timing_controller.c: 202: lcd_string(minContainerDisplay);
  3331  001B34  0EE7               	movlw	low ReadAndDisplayMinFromRTC@minContainerDisplay_1349
  3332  001B36  6E29               	movwf	lcd_string@x,c
  3333  001B38  0E00               	movlw	high ReadAndDisplayMinFromRTC@minContainerDisplay_1349
  3334  001B3A  6E2A               	movwf	lcd_string@x+1,c
  3335  001B3C  EC4E  F011         	call	_lcd_string	;wreg free
  3336  001B40  0012               	return	
  3337  001B42                     __end_of_ReadAndDisplayMinFromRTC:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           intcon	equ	0xFF2
  3344                           postinc0	equ	0xFEE
  3345                           wreg	equ	0xFE8
  3346                           postdec1	equ	0xFE5
  3347                           plusw1	equ	0xFE3
  3348                           fsr1l	equ	0xFE1
  3349                           plusw2	equ	0xFDB
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _ReadAndDisplayHrFromRTC *****************
  3353 ;; Defined at:
  3354 ;;		line 206 in file "timing_controller.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;  hourContaine    2   14[BANK0 ] unsigned char [2]
  3359 ;;  hourContaine    1   17[BANK0 ] unsigned char [1]
  3360 ;;  hours           1   16[BANK0 ] unsigned char 
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;Total ram usage:        4 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    6
  3377 ;; This function calls:
  3378 ;;		_I2C_ReadFromSlave
  3379 ;;		_bcd_to_decimal
  3380 ;;		_lcd_char
  3381 ;;		_lcd_command
  3382 ;;		_lcd_string
  3383 ;;		_sprintf
  3384 ;; This function is called by:
  3385 ;;		_ReadRTCAndDisplay
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text13
  3390  001BD0                     __ptext13:
  3391                           	opt stack 0
  3392  001BD0                     _ReadAndDisplayHrFromRTC:
  3393                           	opt stack 23
  3394                           
  3395                           ;timing_controller.c: 208: uint8_t hours;
  3396                           ;timing_controller.c: 210: hrRead = I2C_ReadFromSlave(0x02);
  3397                           
  3398                           ;incstack = 0
  3399  001BD0  0E02               	movlw	2
  3400  001BD2  EC81  F011         	call	_I2C_ReadFromSlave
  3401  001BD6  6E42               	movwf	_hrRead,c	;volatile
  3402                           
  3403                           ;timing_controller.c: 211: __nop();
  3404  001BD8  F000               	nop	
  3405                           
  3406                           ;timing_controller.c: 212: hrRead = hrRead & 0x1F;
  3407  001BDA  5042               	movf	_hrRead,w,c	;volatile
  3408  001BDC  0B1F               	andlw	31
  3409  001BDE  6E42               	movwf	_hrRead,c	;volatile
  3410                           
  3411                           ;timing_controller.c: 213: hours = bcd_to_decimal(hrRead);
  3412  001BE0  5042               	movf	_hrRead,w,c	;volatile
  3413  001BE2  ECC2  F011         	call	_bcd_to_decimal
  3414  001BE6  5026               	movf	?_bcd_to_decimal,w,c
  3415  001BE8  0100               	movlb	0	; () banked
  3416  001BEA  6FE9               	movwf	ReadAndDisplayHrFromRTC@hours& (0+255),b
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;timing_controller.c: 215: if(hours < 10)
  3420  001BEC  0E0A               	movlw	10
  3421  001BEE  61E9               	cpfslt	ReadAndDisplayHrFromRTC@hours& (0+255),b
  3422  001BF0  D01E               	goto	l431
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;timing_controller.c: 216: {
  3426                           ;timing_controller.c: 217: lcd_command(0xC0);
  3427  001BF2  0EC0               	movlw	192
  3428  001BF4  EC5F  F00C         	call	_lcd_command
  3429                           
  3430                           ;timing_controller.c: 218: lcd_char('0');
  3431  001BF8  0E30               	movlw	48
  3432  001BFA  EC08  F00C         	call	_lcd_char
  3433                           
  3434                           ;timing_controller.c: 219: lcd_command(0xC1);
  3435  001BFE  0EC1               	movlw	193
  3436  001C00  EC5F  F00C         	call	_lcd_command
  3437                           
  3438                           ;timing_controller.c: 220: char hourContainerDisplay[1];
  3439                           ;timing_controller.c: 221: sprintf(hourContainerDisplay, "%u", hours);
  3440  001C04  0EEA               	movlw	low ReadAndDisplayHrFromRTC@hourContainerDisplay
  3441  001C06  0100               	movlb	0	; () banked
  3442  001C08  6FDA               	movwf	sprintf@sp& (0+255),b
  3443  001C0A  0E00               	movlw	high ReadAndDisplayHrFromRTC@hourContainerDisplay
  3444  001C0C  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3445  001C0E  0E0B               	movlw	low STR_1
  3446  001C10  6FDC               	movwf	sprintf@f& (0+255),b
  3447  001C12  0E10               	movlw	high STR_1
  3448  001C14  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3449  001C16  C0E9  F0DE         	movff	ReadAndDisplayHrFromRTC@hours,?_sprintf+4
  3450  001C1A  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3451  001C1C  ECE6  F00A         	call	_sprintf	;wreg free
  3452                           
  3453                           ;timing_controller.c: 222: lcd_string(hourContainerDisplay);
  3454  001C20  0EEA               	movlw	low ReadAndDisplayHrFromRTC@hourContainerDisplay
  3455  001C22  6E29               	movwf	lcd_string@x,c
  3456  001C24  0E00               	movlw	high ReadAndDisplayHrFromRTC@hourContainerDisplay
  3457  001C26  6E2A               	movwf	lcd_string@x+1,c
  3458  001C28  EC4E  F011         	call	_lcd_string	;wreg free
  3459                           
  3460                           ;timing_controller.c: 223: }
  3461  001C2C  0012               	return	
  3462  001C2E                     l431:
  3463                           
  3464                           ;timing_controller.c: 224: else{
  3465                           ;timing_controller.c: 225: lcd_command(0xC0);
  3466  001C2E  0EC0               	movlw	192
  3467  001C30  EC5F  F00C         	call	_lcd_command
  3468                           
  3469                           ;timing_controller.c: 226: char hourContainerDisplay[2];
  3470                           ;timing_controller.c: 227: sprintf(hourContainerDisplay, "%u", hours);
  3471  001C34  0EE7               	movlw	low ReadAndDisplayHrFromRTC@hourContainerDisplay_1355
  3472  001C36  0100               	movlb	0	; () banked
  3473  001C38  6FDA               	movwf	sprintf@sp& (0+255),b
  3474  001C3A  0E00               	movlw	high ReadAndDisplayHrFromRTC@hourContainerDisplay_1355
  3475  001C3C  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  3476  001C3E  0E0B               	movlw	low STR_1
  3477  001C40  6FDC               	movwf	sprintf@f& (0+255),b
  3478  001C42  0E10               	movlw	high STR_1
  3479  001C44  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  3480  001C46  C0E9  F0DE         	movff	ReadAndDisplayHrFromRTC@hours,?_sprintf+4
  3481  001C4A  6BDF               	clrf	(?_sprintf+5)& (0+255),b
  3482  001C4C  ECE6  F00A         	call	_sprintf	;wreg free
  3483                           
  3484                           ;timing_controller.c: 228: lcd_string(hourContainerDisplay);
  3485  001C50  0EE7               	movlw	low ReadAndDisplayHrFromRTC@hourContainerDisplay_1355
  3486  001C52  6E29               	movwf	lcd_string@x,c
  3487  001C54  0E00               	movlw	high ReadAndDisplayHrFromRTC@hourContainerDisplay_1355
  3488  001C56  6E2A               	movwf	lcd_string@x+1,c
  3489  001C58  EC4E  F011         	call	_lcd_string	;wreg free
  3490  001C5C  0012               	return	
  3491  001C5E                     __end_of_ReadAndDisplayHrFromRTC:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           intcon	equ	0xFF2
  3498                           postinc0	equ	0xFEE
  3499                           wreg	equ	0xFE8
  3500                           postdec1	equ	0xFE5
  3501                           plusw1	equ	0xFE3
  3502                           fsr1l	equ	0xFE1
  3503                           plusw2	equ	0xFDB
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _bcd_to_decimal *****************
  3507 ;; Defined at:
  3508 ;;		line 175 in file "timing_controller.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  x               1    wreg     unsigned char 
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;  x               1   40[COMRAM] unsigned char 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  2   37[COMRAM] int 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0, prodl, prodh
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;Total ram usage:        4 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    3
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_ReadAndDisplayMinFromRTC
  3533 ;;		_ReadAndDisplayHrFromRTC
  3534 ;;		_ReadAndDisplaySecFromRTC
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text14
  3539  002384                     __ptext14:
  3540                           	opt stack 0
  3541  002384                     _bcd_to_decimal:
  3542                           	opt stack 25
  3543                           
  3544                           ;incstack = 0
  3545                           ;bcd_to_decimal@x stored from wreg
  3546  002384  6E29               	movwf	bcd_to_decimal@x,c
  3547                           
  3548                           ;timing_controller.c: 176: return x - 6 * (x >> 4);
  3549  002386  C029  F028         	movff	bcd_to_decimal@x,??_bcd_to_decimal
  3550  00238A  3A28               	swapf	??_bcd_to_decimal,f,c
  3551  00238C  0E0F               	movlw	15
  3552  00238E  1628               	andwf	??_bcd_to_decimal,f,c
  3553  002390  5028               	movf	??_bcd_to_decimal,w,c
  3554  002392  0D06               	mullw	6
  3555  002394  1EF3               	comf	prodl,f,c
  3556  002396  1EF4               	comf	prodh,f,c
  3557  002398  4AF3               	infsnz	prodl,f,c
  3558  00239A  2AF4               	incf	prodh,f,c
  3559  00239C  5029               	movf	bcd_to_decimal@x,w,c
  3560  00239E  24F3               	addwf	prodl,w,c
  3561  0023A0  6E26               	movwf	?_bcd_to_decimal,c
  3562  0023A2  0E00               	movlw	0
  3563  0023A4  20F4               	addwfc	prodh,w,c
  3564  0023A6  6E27               	movwf	?_bcd_to_decimal+1,c
  3565  0023A8  0012               	return	
  3566  0023AA                     __end_of_bcd_to_decimal:
  3567                           	opt stack 0
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           intcon	equ	0xFF2
  3575                           postinc0	equ	0xFEE
  3576                           wreg	equ	0xFE8
  3577                           postdec1	equ	0xFE5
  3578                           plusw1	equ	0xFE3
  3579                           fsr1l	equ	0xFE1
  3580                           plusw2	equ	0xFDB
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function _IfButtonPressedMovedToNextState *****************
  3584 ;; Defined at:
  3585 ;;		line 300 in file "main.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  nextState       1    wreg     unsigned char 
  3588 ;;  currentState    1   37[COMRAM] unsigned char 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  nextState       1   39[COMRAM] unsigned char 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3600 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;Total ram usage:        3 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    3
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text15
  3615  002412                     __ptext15:
  3616                           	opt stack 0
  3617  002412                     _IfButtonPressedMovedToNextState:
  3618                           	opt stack 27
  3619                           
  3620                           ;incstack = 0
  3621                           ;IfButtonPressedMovedToNextState@nextState stored from wreg
  3622  002412  6E28               	movwf	IfButtonPressedMovedToNextState@nextState,c
  3623                           
  3624                           ;main.c: 302: _delay((unsigned long)((80)*(8000000/4000.0)));
  3625  002414  0ED0               	movlw	208
  3626  002416  6E27               	movwf	??_IfButtonPressedMovedToNextState& (0+255),c
  3627  002418  0ECA               	movlw	202
  3628  00241A                     u2587:
  3629  00241A  2EE8               	decfsz	wreg,f,c
  3630  00241C  D7FE               	bra	u2587
  3631  00241E  2E27               	decfsz	??_IfButtonPressedMovedToNextState& (0+255),f,c
  3632  002420  D7FC               	bra	u2587
  3633                           
  3634                           ;main.c: 303: if(PORTDbits.RD2 == 1)
  3635  002422  A483               	btfss	3971,2,c	;volatile
  3636  002424  D003               	goto	l154
  3637                           
  3638                           ;main.c: 304: {
  3639                           ;main.c: 305: LCD_STATES = nextState;
  3640  002426  C028  F1BC         	movff	IfButtonPressedMovedToNextState@nextState,_LCD_STATES
  3641                           
  3642                           ;main.c: 306: }
  3643  00242A  0012               	return	
  3644  00242C                     l154:
  3645                           
  3646                           ;main.c: 307: else{
  3647                           ;main.c: 308: LCD_STATES = currentState;
  3648  00242C  C026  F1BC         	movff	IfButtonPressedMovedToNextState@currentState,_LCD_STATES
  3649  002430  0012               	return	
  3650  002432                     __end_of_IfButtonPressedMovedToNextState:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           intcon	equ	0xFF2
  3659                           postinc0	equ	0xFEE
  3660                           wreg	equ	0xFE8
  3661                           postdec1	equ	0xFE5
  3662                           plusw1	equ	0xFE3
  3663                           fsr1l	equ	0xFE1
  3664                           plusw2	equ	0xFDB
  3665                           status	equ	0xFD8
  3666                           
  3667 ;; *************** function _GenerateAmplitude *****************
  3668 ;; Defined at:
  3669 ;;		line 312 in file "main.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  readAmplitud    2   37[COMRAM] unsigned int 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;		None
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, status,2, status,0
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3683 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;Total ram usage:        2 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    3
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_main
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text16
  3698  001A12                     __ptext16:
  3699                           	opt stack 0
  3700  001A12                     _GenerateAmplitude:
  3701                           	opt stack 27
  3702                           
  3703                           ;main.c: 314: if(readAmplitude >= 100 && readAmplitude < 150)
  3704                           
  3705                           ;incstack = 0
  3706  001A12  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3707  001A14  E104               	bnz	u1470
  3708  001A16  0E64               	movlw	100
  3709  001A18  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3710  001A1A  A0D8               	btfss	status,0,c
  3711  001A1C  D00B               	goto	l159
  3712  001A1E                     u1470:
  3713  001A1E  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3714  001A20  E109               	bnz	l2878
  3715  001A22  0E96               	movlw	150
  3716  001A24  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3717  001A26  B0D8               	btfsc	status,0,c
  3718  001A28  D005               	goto	l159
  3719                           
  3720                           ;main.c: 315: {
  3721                           ;main.c: 316: amplitudeDivision = 5;
  3722  001A2A  0E00               	movlw	0
  3723  001A2C  6E3C               	movwf	_amplitudeDivision+1,c
  3724  001A2E  0E05               	movlw	5
  3725  001A30  6E3B               	movwf	_amplitudeDivision,c
  3726                           
  3727                           ;main.c: 317: }
  3728  001A32  0012               	return	
  3729  001A34                     l159:
  3730  001A34                     l2878:
  3731                           
  3732                           ;main.c: 318: else if(readAmplitude >= 150 && readAmplitude < 200)
  3733  001A34  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3734  001A36  E104               	bnz	u1490
  3735  001A38  0E96               	movlw	150
  3736  001A3A  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3737  001A3C  A0D8               	btfss	status,0,c
  3738  001A3E  D00B               	goto	l161
  3739  001A40                     u1490:
  3740  001A40  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3741  001A42  E109               	bnz	l2884
  3742  001A44  0EC8               	movlw	200
  3743  001A46  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3744  001A48  B0D8               	btfsc	status,0,c
  3745  001A4A  D005               	goto	l161
  3746                           
  3747                           ;main.c: 319: {
  3748                           ;main.c: 320: amplitudeDivision = 4;
  3749  001A4C  0E00               	movlw	0
  3750  001A4E  6E3C               	movwf	_amplitudeDivision+1,c
  3751  001A50  0E04               	movlw	4
  3752  001A52  6E3B               	movwf	_amplitudeDivision,c
  3753                           
  3754                           ;main.c: 321: }
  3755  001A54  0012               	return	
  3756  001A56                     l161:
  3757  001A56                     l2884:
  3758                           
  3759                           ;main.c: 322: else if(readAmplitude >= 200 && readAmplitude < 250)
  3760  001A56  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3761  001A58  E104               	bnz	u1510
  3762  001A5A  0EC8               	movlw	200
  3763  001A5C  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3764  001A5E  A0D8               	btfss	status,0,c
  3765  001A60  D00B               	goto	l163
  3766  001A62                     u1510:
  3767  001A62  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3768  001A64  E109               	bnz	l2890
  3769  001A66  0EFA               	movlw	250
  3770  001A68  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3771  001A6A  B0D8               	btfsc	status,0,c
  3772  001A6C  D005               	goto	l163
  3773                           
  3774                           ;main.c: 323: {
  3775                           ;main.c: 324: amplitudeDivision = 3;
  3776  001A6E  0E00               	movlw	0
  3777  001A70  6E3C               	movwf	_amplitudeDivision+1,c
  3778  001A72  0E03               	movlw	3
  3779  001A74  6E3B               	movwf	_amplitudeDivision,c
  3780                           
  3781                           ;main.c: 325: }
  3782  001A76  0012               	return	
  3783  001A78                     l163:
  3784  001A78                     l2890:
  3785                           
  3786                           ;main.c: 326: else if(readAmplitude >= 250 && readAmplitude < 300)
  3787  001A78  5027               	movf	GenerateAmplitude@readAmplitude+1,w,c
  3788  001A7A  E104               	bnz	u1530
  3789  001A7C  0EFA               	movlw	250
  3790  001A7E  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3791  001A80  A0D8               	btfss	status,0,c
  3792  001A82  D00B               	goto	l165
  3793  001A84                     u1530:
  3794  001A84  0E2C               	movlw	44
  3795  001A86  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3796  001A88  0E01               	movlw	1
  3797  001A8A  5827               	subwfb	GenerateAmplitude@readAmplitude+1,w,c
  3798  001A8C  B0D8               	btfsc	status,0,c
  3799  001A8E  D005               	goto	l165
  3800                           
  3801                           ;main.c: 327: {
  3802                           ;main.c: 328: amplitudeDivision = 2;
  3803  001A90  0E00               	movlw	0
  3804  001A92  6E3C               	movwf	_amplitudeDivision+1,c
  3805  001A94  0E02               	movlw	2
  3806  001A96  6E3B               	movwf	_amplitudeDivision,c
  3807                           
  3808                           ;main.c: 329: }
  3809  001A98  0012               	return	
  3810  001A9A                     l165:
  3811                           
  3812                           ;main.c: 330: else if(readAmplitude >= 300)
  3813  001A9A  0E2C               	movlw	44
  3814  001A9C  5C26               	subwf	GenerateAmplitude@readAmplitude,w,c
  3815  001A9E  0E01               	movlw	1
  3816  001AA0  5827               	subwfb	GenerateAmplitude@readAmplitude+1,w,c
  3817  001AA2  A0D8               	btfss	status,0,c
  3818  001AA4  0012               	return	
  3819                           
  3820                           ;main.c: 331: {
  3821                           ;main.c: 332: amplitudeDivision = 1;
  3822  001AA6  0E00               	movlw	0
  3823  001AA8  6E3C               	movwf	_amplitudeDivision+1,c
  3824  001AAA  0E01               	movlw	1
  3825  001AAC  6E3B               	movwf	_amplitudeDivision,c
  3826  001AAE  0012               	return	
  3827  001AB0                     __end_of_GenerateAmplitude:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           intcon	equ	0xFF2
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           postdec1	equ	0xFE5
  3839                           plusw1	equ	0xFE3
  3840                           fsr1l	equ	0xFE1
  3841                           plusw2	equ	0xFDB
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function _GPIOInit *****************
  3845 ;; Defined at:
  3846 ;;		line 20 in file "gpio.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;		None
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;		None
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		None
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;Total ram usage:        0 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    3
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_main
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text17
  3875  0024B8                     __ptext17:
  3876                           	opt stack 0
  3877  0024B8                     _GPIOInit:
  3878                           	opt stack 27
  3879                           
  3880                           ;gpio.c: 23: TRISDbits.TRISD2 = 1;
  3881                           
  3882                           ;incstack = 0
  3883  0024B8  8495               	bsf	3989,2,c	;volatile
  3884                           
  3885                           ;gpio.c: 26: TRISDbits.TRISD3 = 1;
  3886  0024BA  8695               	bsf	3989,3,c	;volatile
  3887                           
  3888                           ;gpio.c: 29: TRISDbits.TRISD0 = 1;
  3889  0024BC  8095               	bsf	3989,0,c	;volatile
  3890                           
  3891                           ;gpio.c: 32: TRISDbits.TRISD1 = 0;
  3892  0024BE  9295               	bcf	3989,1,c	;volatile
  3893                           
  3894                           ;gpio.c: 35: TRISCbits.TRISC1 = 0;
  3895  0024C0  9294               	bcf	3988,1,c	;volatile
  3896                           
  3897                           ;gpio.c: 36: LATCbits.LATC1 = 0;
  3898  0024C2  928B               	bcf	3979,1,c	;volatile
  3899  0024C4  0012               	return		;funcret
  3900  0024C6                     __end_of_GPIOInit:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           intcon	equ	0xFF2
  3909                           postinc0	equ	0xFEE
  3910                           wreg	equ	0xFE8
  3911                           postdec1	equ	0xFE5
  3912                           plusw1	equ	0xFE3
  3913                           fsr1l	equ	0xFE1
  3914                           plusw2	equ	0xFDB
  3915                           status	equ	0xFD8
  3916                           
  3917 ;; *************** function _CookTimeSet *****************
  3918 ;; Defined at:
  3919 ;;		line 97 in file "cooktime_controller.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  convertedCoo    1    1[BANK0 ] unsigned char 
  3924 ;;  currentMin      1    0[BANK0 ] unsigned char 
  3925 ;; Return value:  Size  Location     Type
  3926 ;;                  1    wreg      void 
  3927 ;; Registers used:
  3928 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3935 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;Total ram usage:        2 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    6
  3941 ;; This function calls:
  3942 ;;		_I2C_ReadFromSlave
  3943 ;;		_IntToBcd_cook_time
  3944 ;;		_bcd_to_decimal_cook_time
  3945 ;; This function is called by:
  3946 ;;		_main
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text18
  3951  0021B4                     __ptext18:
  3952                           	opt stack 0
  3953  0021B4                     _CookTimeSet:
  3954                           	opt stack 24
  3955                           
  3956                           ;cooktime_controller.c: 100: uint8_t currentMin;
  3957                           ;cooktime_controller.c: 101: currentMinFromRTC = I2C_ReadFromSlave(0x01);
  3958                           
  3959                           ;incstack = 0
  3960  0021B4  0E01               	movlw	1
  3961  0021B6  EC81  F011         	call	_I2C_ReadFromSlave
  3962  0021BA  6E3F               	movwf	_currentMinFromRTC,c	;volatile
  3963                           
  3964                           ;cooktime_controller.c: 102: currentMinFromRTC = currentMinFromRTC & 0x7F;
  3965  0021BC  503F               	movf	_currentMinFromRTC,w,c	;volatile
  3966  0021BE  0B7F               	andlw	127
  3967  0021C0  6E3F               	movwf	_currentMinFromRTC,c	;volatile
  3968                           
  3969                           ;cooktime_controller.c: 103: currentMin = bcd_to_decimal_cook_time(currentMinFromRTC);
  3970  0021C2  503F               	movf	_currentMinFromRTC,w,c	;volatile
  3971  0021C4  ECD5  F011         	call	_bcd_to_decimal_cook_time
  3972  0021C8  5026               	movf	?_bcd_to_decimal_cook_time,w,c
  3973  0021CA  0100               	movlb	0	; () banked
  3974  0021CC  6FD9               	movwf	CookTimeSet@currentMin& (0+255),b
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;cooktime_controller.c: 106: setCookTimeMin = (uint8_t)cookTimeAdcRead;
  3978  0021CE  C031  F040         	movff	_cookTimeAdcRead,_setCookTimeMin	;volatile
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;cooktime_controller.c: 107: setCookTimeMin = setCookTimeMin + currentMin;
  3982  0021D2  5040               	movf	_setCookTimeMin,w,c	;volatile
  3983  0021D4  25D9               	addwf	CookTimeSet@currentMin& (0+255),w,b
  3984  0021D6  6E40               	movwf	_setCookTimeMin,c	;volatile
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;cooktime_controller.c: 110: if(setCookTimeMin > 59)
  3988  0021D8  0E3B               	movlw	59
  3989  0021DA  6440               	cpfsgt	_setCookTimeMin,c	;volatile
  3990  0021DC  D002               	goto	l514
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;cooktime_controller.c: 111: {
  3994                           ;cooktime_controller.c: 112: setCookTimeMin = (uint8_t)cookTimeAdcRead - (uint8_t)1;
  3995  0021DE  0431               	decf	_cookTimeAdcRead,w,c	;volatile
  3996  0021E0  6E40               	movwf	_setCookTimeMin,c	;volatile
  3997  0021E2                     l514:
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;cooktime_controller.c: 113: }
  4001                           ;cooktime_controller.c: 116: uint8_t convertedCookMinutesToBCD = IntToBcd_cook_time(setC
      +                          ookTimeMin);
  4002                           
  4003                           ; BSR set to: 0
  4004  0021E2  5040               	movf	_setCookTimeMin,w,c	;volatile
  4005  0021E4  EC33  F011         	call	_IntToBcd_cook_time
  4006  0021E8  0100               	movlb	0	; () banked
  4007  0021EA  6FDA               	movwf	CookTimeSet@convertedCookMinutesToBCD& (0+255),b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;cooktime_controller.c: 117: setCookTimeMin = convertedCookMinutesToBCD;
  4011  0021EC  C0DA  F040         	movff	CookTimeSet@convertedCookMinutesToBCD,_setCookTimeMin	;volatile
  4012                           
  4013                           ; BSR set to: 0
  4014  0021F0  0012               	return		;funcret
  4015  0021F2                     __end_of_CookTimeSet:
  4016                           	opt stack 0
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           postinc0	equ	0xFEE
  4025                           wreg	equ	0xFE8
  4026                           postdec1	equ	0xFE5
  4027                           plusw1	equ	0xFE3
  4028                           fsr1l	equ	0xFE1
  4029                           plusw2	equ	0xFDB
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function _bcd_to_decimal_cook_time *****************
  4033 ;; Defined at:
  4034 ;;		line 93 in file "cooktime_controller.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  x               1    wreg     unsigned char 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  x               1   40[COMRAM] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  2   37[COMRAM] int 
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0, prodl, prodh
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4048 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;Total ram usage:        4 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    3
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_CookTimeSet
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text19
  4063  0023AA                     __ptext19:
  4064                           	opt stack 0
  4065  0023AA                     _bcd_to_decimal_cook_time:
  4066                           	opt stack 26
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;incstack = 0
  4070                           ;bcd_to_decimal_cook_time@x stored from wreg
  4071  0023AA  6E29               	movwf	bcd_to_decimal_cook_time@x,c
  4072                           
  4073                           ;cooktime_controller.c: 94: return x - 6 * (x >> 4);
  4074  0023AC  C029  F028         	movff	bcd_to_decimal_cook_time@x,??_bcd_to_decimal_cook_time
  4075  0023B0  3A28               	swapf	??_bcd_to_decimal_cook_time,f,c
  4076  0023B2  0E0F               	movlw	15
  4077  0023B4  1628               	andwf	??_bcd_to_decimal_cook_time,f,c
  4078  0023B6  5028               	movf	??_bcd_to_decimal_cook_time,w,c
  4079  0023B8  0D06               	mullw	6
  4080  0023BA  1EF3               	comf	prodl,f,c
  4081  0023BC  1EF4               	comf	prodh,f,c
  4082  0023BE  4AF3               	infsnz	prodl,f,c
  4083  0023C0  2AF4               	incf	prodh,f,c
  4084  0023C2  5029               	movf	bcd_to_decimal_cook_time@x,w,c
  4085  0023C4  24F3               	addwf	prodl,w,c
  4086  0023C6  6E26               	movwf	?_bcd_to_decimal_cook_time,c
  4087  0023C8  0E00               	movlw	0
  4088  0023CA  20F4               	addwfc	prodh,w,c
  4089  0023CC  6E27               	movwf	?_bcd_to_decimal_cook_time+1,c
  4090  0023CE  0012               	return	
  4091  0023D0                     __end_of_bcd_to_decimal_cook_time:
  4092                           	opt stack 0
  4093                           tblptru	equ	0xFF8
  4094                           tblptrh	equ	0xFF7
  4095                           tblptrl	equ	0xFF6
  4096                           tablat	equ	0xFF5
  4097                           prodh	equ	0xFF4
  4098                           prodl	equ	0xFF3
  4099                           intcon	equ	0xFF2
  4100                           postinc0	equ	0xFEE
  4101                           wreg	equ	0xFE8
  4102                           postdec1	equ	0xFE5
  4103                           plusw1	equ	0xFE3
  4104                           fsr1l	equ	0xFE1
  4105                           plusw2	equ	0xFDB
  4106                           status	equ	0xFD8
  4107                           
  4108 ;; *************** function _IntToBcd_cook_time *****************
  4109 ;; Defined at:
  4110 ;;		line 88 in file "cooktime_controller.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  x               1    wreg     unsigned char 
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  x               1   47[COMRAM] unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      unsigned char 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;Total ram usage:        3 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    4
  4131 ;; This function calls:
  4132 ;;		___awdiv
  4133 ;;		___awmod
  4134 ;; This function is called by:
  4135 ;;		_CookTimeSet
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text20
  4140  002266                     __ptext20:
  4141                           	opt stack 0
  4142  002266                     _IntToBcd_cook_time:
  4143                           	opt stack 25
  4144                           
  4145                           ;incstack = 0
  4146                           ;IntToBcd_cook_time@x stored from wreg
  4147  002266  6E30               	movwf	IntToBcd_cook_time@x,c
  4148                           
  4149                           ;cooktime_controller.c: 90: return ((x / 10) << 4) | (x % 10);
  4150  002268  C030  F026         	movff	IntToBcd_cook_time@x,___awmod@dividend
  4151  00226C  6A27               	clrf	___awmod@dividend+1,c
  4152  00226E  0E00               	movlw	0
  4153  002270  6E29               	movwf	___awmod@divisor+1,c
  4154  002272  0E0A               	movlw	10
  4155  002274  6E28               	movwf	___awmod@divisor,c
  4156  002276  ECBB  F00F         	call	___awmod	;wreg free
  4157  00227A  C026  F02E         	movff	?___awmod,??_IntToBcd_cook_time
  4158  00227E  C027  F02F         	movff	?___awmod+1,??_IntToBcd_cook_time+1
  4159  002282  C030  F026         	movff	IntToBcd_cook_time@x,___awdiv@dividend
  4160  002286  6A27               	clrf	___awdiv@dividend+1,c
  4161  002288  0E00               	movlw	0
  4162  00228A  6E29               	movwf	___awdiv@divisor+1,c
  4163  00228C  0E0A               	movlw	10
  4164  00228E  6E28               	movwf	___awdiv@divisor,c
  4165  002290  ECF7  F00E         	call	___awdiv	;wreg free
  4166  002294  3826               	swapf	?___awdiv,w,c
  4167  002296  0BF0               	andlw	240
  4168  002298  102E               	iorwf	??_IntToBcd_cook_time,w,c
  4169  00229A  0012               	return	
  4170  00229C                     __end_of_IntToBcd_cook_time:
  4171                           	opt stack 0
  4172                           tblptru	equ	0xFF8
  4173                           tblptrh	equ	0xFF7
  4174                           tblptrl	equ	0xFF6
  4175                           tablat	equ	0xFF5
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           intcon	equ	0xFF2
  4179                           postinc0	equ	0xFEE
  4180                           wreg	equ	0xFE8
  4181                           postdec1	equ	0xFE5
  4182                           plusw1	equ	0xFE3
  4183                           fsr1l	equ	0xFE1
  4184                           plusw2	equ	0xFDB
  4185                           status	equ	0xFD8
  4186                           
  4187 ;; *************** function ___awmod *****************
  4188 ;; Defined at:
  4189 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awmod.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  dividend        2   37[COMRAM] int 
  4192 ;;  divisor         2   39[COMRAM] int 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  sign            1   42[COMRAM] unsigned char 
  4195 ;;  counter         1   41[COMRAM] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  2   37[COMRAM] int 
  4198 ;; Registers used:
  4199 ;;		wreg, status,2, status,0
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4205 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;Total ram usage:        6 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    3
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_IntToBcd
  4216 ;;		_IntToBcd_cook_time
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           	psect	text21
  4221  001F76                     __ptext21:
  4222                           	opt stack 0
  4223  001F76                     ___awmod:
  4224                           	opt stack 25
  4225                           
  4226                           ;incstack = 0
  4227  001F76  0E00               	movlw	0
  4228  001F78  6E2B               	movwf	___awmod@sign,c
  4229  001F7A  AE27               	btfss	___awmod@dividend+1,7,c
  4230  001F7C  D006               	goto	l721
  4231  001F7E  6C26               	negf	___awmod@dividend,c
  4232  001F80  1E27               	comf	___awmod@dividend+1,f,c
  4233  001F82  B0D8               	btfsc	status,0,c
  4234  001F84  2A27               	incf	___awmod@dividend+1,f,c
  4235  001F86  0E01               	movlw	1
  4236  001F88  6E2B               	movwf	___awmod@sign,c
  4237  001F8A                     l721:
  4238  001F8A  AE29               	btfss	___awmod@divisor+1,7,c
  4239  001F8C  D004               	goto	l722
  4240  001F8E  6C28               	negf	___awmod@divisor,c
  4241  001F90  1E29               	comf	___awmod@divisor+1,f,c
  4242  001F92  B0D8               	btfsc	status,0,c
  4243  001F94  2A29               	incf	___awmod@divisor+1,f,c
  4244  001F96                     l722:
  4245  001F96  5028               	movf	___awmod@divisor,w,c
  4246  001F98  1029               	iorwf	___awmod@divisor+1,w,c
  4247  001F9A  B4D8               	btfsc	status,2,c
  4248  001F9C  D018               	goto	l729
  4249  001F9E  0E01               	movlw	1
  4250  001FA0  6E2A               	movwf	___awmod@counter,c
  4251  001FA2  D004               	goto	l724
  4252  001FA4  90D8               	bcf	status,0,c
  4253  001FA6  3628               	rlcf	___awmod@divisor,f,c
  4254  001FA8  3629               	rlcf	___awmod@divisor+1,f,c
  4255  001FAA  2A2A               	incf	___awmod@counter,f,c
  4256  001FAC                     l724:
  4257  001FAC  AE29               	btfss	___awmod@divisor+1,7,c
  4258  001FAE  D7FA               	goto	l725
  4259  001FB0                     u2080:
  4260  001FB0  5028               	movf	___awmod@divisor,w,c
  4261  001FB2  5C26               	subwf	___awmod@dividend,w,c
  4262  001FB4  5029               	movf	___awmod@divisor+1,w,c
  4263  001FB6  5827               	subwfb	___awmod@dividend+1,w,c
  4264  001FB8  A0D8               	btfss	status,0,c
  4265  001FBA  D004               	goto	l728
  4266  001FBC  5028               	movf	___awmod@divisor,w,c
  4267  001FBE  5E26               	subwf	___awmod@dividend,f,c
  4268  001FC0  5029               	movf	___awmod@divisor+1,w,c
  4269  001FC2  5A27               	subwfb	___awmod@dividend+1,f,c
  4270  001FC4                     l728:
  4271  001FC4  90D8               	bcf	status,0,c
  4272  001FC6  3229               	rrcf	___awmod@divisor+1,f,c
  4273  001FC8  3228               	rrcf	___awmod@divisor,f,c
  4274  001FCA  2E2A               	decfsz	___awmod@counter,f,c
  4275  001FCC  D7F1               	goto	u2080
  4276  001FCE                     l729:
  4277  001FCE  502B               	movf	___awmod@sign,w,c
  4278  001FD0  B4D8               	btfsc	status,2,c
  4279  001FD2  D004               	goto	l730
  4280  001FD4  6C26               	negf	___awmod@dividend,c
  4281  001FD6  1E27               	comf	___awmod@dividend+1,f,c
  4282  001FD8  B0D8               	btfsc	status,0,c
  4283  001FDA  2A27               	incf	___awmod@dividend+1,f,c
  4284  001FDC                     l730:
  4285  001FDC  C026  F026         	movff	___awmod@dividend,?___awmod
  4286  001FE0  C027  F027         	movff	___awmod@dividend+1,?___awmod+1
  4287  001FE4  0012               	return	
  4288  001FE6                     __end_of___awmod:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           intcon	equ	0xFF2
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           postdec1	equ	0xFE5
  4300                           plusw1	equ	0xFE3
  4301                           fsr1l	equ	0xFE1
  4302                           plusw2	equ	0xFDB
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function ___awdiv *****************
  4306 ;; Defined at:
  4307 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/awdiv.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  dividend        2   37[COMRAM] int 
  4310 ;;  divisor         2   39[COMRAM] int 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  quotient        2   43[COMRAM] int 
  4313 ;;  sign            1   42[COMRAM] unsigned char 
  4314 ;;  counter         1   41[COMRAM] unsigned char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  2   37[COMRAM] int 
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;Total ram usage:        8 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    3
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		_IntToBcd
  4335 ;;		_IntToBcd_cook_time
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text22
  4340  001DEE                     __ptext22:
  4341                           	opt stack 0
  4342  001DEE                     ___awdiv:
  4343                           	opt stack 25
  4344                           
  4345                           ;incstack = 0
  4346  001DEE  0E00               	movlw	0
  4347  001DF0  6E2B               	movwf	___awdiv@sign,c
  4348  001DF2  AE29               	btfss	___awdiv@divisor+1,7,c
  4349  001DF4  D006               	goto	l708
  4350  001DF6  6C28               	negf	___awdiv@divisor,c
  4351  001DF8  1E29               	comf	___awdiv@divisor+1,f,c
  4352  001DFA  B0D8               	btfsc	status,0,c
  4353  001DFC  2A29               	incf	___awdiv@divisor+1,f,c
  4354  001DFE  0E01               	movlw	1
  4355  001E00  6E2B               	movwf	___awdiv@sign,c
  4356  001E02                     l708:
  4357  001E02  AE27               	btfss	___awdiv@dividend+1,7,c
  4358  001E04  D006               	goto	l709
  4359  001E06  6C26               	negf	___awdiv@dividend,c
  4360  001E08  1E27               	comf	___awdiv@dividend+1,f,c
  4361  001E0A  B0D8               	btfsc	status,0,c
  4362  001E0C  2A27               	incf	___awdiv@dividend+1,f,c
  4363  001E0E  0E01               	movlw	1
  4364  001E10  1A2B               	xorwf	___awdiv@sign,f,c
  4365  001E12                     l709:
  4366  001E12  0E00               	movlw	0
  4367  001E14  6E2D               	movwf	___awdiv@quotient+1,c
  4368  001E16  0E00               	movlw	0
  4369  001E18  6E2C               	movwf	___awdiv@quotient,c
  4370  001E1A  5028               	movf	___awdiv@divisor,w,c
  4371  001E1C  1029               	iorwf	___awdiv@divisor+1,w,c
  4372  001E1E  B4D8               	btfsc	status,2,c
  4373  001E20  D01C               	goto	l716
  4374  001E22  0E01               	movlw	1
  4375  001E24  6E2A               	movwf	___awdiv@counter,c
  4376  001E26  D004               	goto	l711
  4377  001E28  90D8               	bcf	status,0,c
  4378  001E2A  3628               	rlcf	___awdiv@divisor,f,c
  4379  001E2C  3629               	rlcf	___awdiv@divisor+1,f,c
  4380  001E2E  2A2A               	incf	___awdiv@counter,f,c
  4381  001E30                     l711:
  4382  001E30  AE29               	btfss	___awdiv@divisor+1,7,c
  4383  001E32  D7FA               	goto	l712
  4384  001E34                     u2020:
  4385  001E34  90D8               	bcf	status,0,c
  4386  001E36  362C               	rlcf	___awdiv@quotient,f,c
  4387  001E38  362D               	rlcf	___awdiv@quotient+1,f,c
  4388  001E3A  5028               	movf	___awdiv@divisor,w,c
  4389  001E3C  5C26               	subwf	___awdiv@dividend,w,c
  4390  001E3E  5029               	movf	___awdiv@divisor+1,w,c
  4391  001E40  5827               	subwfb	___awdiv@dividend+1,w,c
  4392  001E42  A0D8               	btfss	status,0,c
  4393  001E44  D005               	goto	l715
  4394  001E46  5028               	movf	___awdiv@divisor,w,c
  4395  001E48  5E26               	subwf	___awdiv@dividend,f,c
  4396  001E4A  5029               	movf	___awdiv@divisor+1,w,c
  4397  001E4C  5A27               	subwfb	___awdiv@dividend+1,f,c
  4398  001E4E  802C               	bsf	___awdiv@quotient,0,c
  4399  001E50                     l715:
  4400  001E50  90D8               	bcf	status,0,c
  4401  001E52  3229               	rrcf	___awdiv@divisor+1,f,c
  4402  001E54  3228               	rrcf	___awdiv@divisor,f,c
  4403  001E56  2E2A               	decfsz	___awdiv@counter,f,c
  4404  001E58  D7ED               	goto	u2020
  4405  001E5A                     l716:
  4406  001E5A  502B               	movf	___awdiv@sign,w,c
  4407  001E5C  B4D8               	btfsc	status,2,c
  4408  001E5E  D004               	goto	l717
  4409  001E60  6C2C               	negf	___awdiv@quotient,c
  4410  001E62  1E2D               	comf	___awdiv@quotient+1,f,c
  4411  001E64  B0D8               	btfsc	status,0,c
  4412  001E66  2A2D               	incf	___awdiv@quotient+1,f,c
  4413  001E68                     l717:
  4414  001E68  C02C  F026         	movff	___awdiv@quotient,?___awdiv
  4415  001E6C  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
  4416  001E70  0012               	return	
  4417  001E72                     __end_of___awdiv:
  4418                           	opt stack 0
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           postinc0	equ	0xFEE
  4427                           wreg	equ	0xFE8
  4428                           postdec1	equ	0xFE5
  4429                           plusw1	equ	0xFE3
  4430                           fsr1l	equ	0xFE1
  4431                           plusw2	equ	0xFDB
  4432                           status	equ	0xFD8
  4433                           
  4434 ;; *************** function _I2C_ReadFromSlave *****************
  4435 ;; Defined at:
  4436 ;;		line 104 in file "i2c.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  addressByte     1    wreg     unsigned char 
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  addressByte     1   40[COMRAM] unsigned char 
  4441 ;;  dataFromAddr    1   41[COMRAM] unsigned char 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  1    wreg      unsigned char 
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;Total ram usage:        2 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:    5
  4458 ;; This function calls:
  4459 ;;		_I2C_Read
  4460 ;;		_I2C_Start
  4461 ;;		_I2C_WriteControl
  4462 ;;		_I2C_WriteData
  4463 ;; This function is called by:
  4464 ;;		_ReadAndDisplayMinFromRTC
  4465 ;;		_ReadAndDisplayHrFromRTC
  4466 ;;		_ReadAndDisplaySecFromRTC
  4467 ;;		_CookTimeSet
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text23
  4472  002302                     __ptext23:
  4473                           	opt stack 0
  4474  002302                     _I2C_ReadFromSlave:
  4475                           	opt stack 23
  4476                           
  4477                           ;incstack = 0
  4478                           ;I2C_ReadFromSlave@addressByte stored from wreg
  4479  002302  6E29               	movwf	I2C_ReadFromSlave@addressByte,c
  4480                           
  4481                           ;i2c.c: 106: unsigned char dataFromAddress;
  4482                           ;i2c.c: 107: I2C_Start();
  4483  002304  EC88  F012         	call	_I2C_Start	;wreg free
  4484                           
  4485                           ;i2c.c: 108: I2C_WriteControl(0b11011110, WRITE_MODE);
  4486  002308  C047  F027         	movff	_WRITE_MODE,I2C_WriteControl@R_W_mode
  4487  00230C  0EDE               	movlw	222
  4488  00230E  EC28  F012         	call	_I2C_WriteControl
  4489                           
  4490                           ;i2c.c: 109: I2C_WriteData(addressByte);
  4491  002312  5029               	movf	I2C_ReadFromSlave@addressByte,w,c
  4492  002314  EC71  F012         	call	_I2C_WriteData
  4493                           
  4494                           ;i2c.c: 111: I2C_Start();
  4495  002318  EC88  F012         	call	_I2C_Start	;wreg free
  4496                           
  4497                           ;i2c.c: 113: I2C_WriteControl(0b11011110, READ_MODE);
  4498  00231C  C059  F027         	movff	_READ_MODE,I2C_WriteControl@R_W_mode
  4499  002320  0EDE               	movlw	222
  4500  002322  EC28  F012         	call	_I2C_WriteControl
  4501                           
  4502                           ;i2c.c: 115: dataFromAddress = I2C_Read(0);
  4503  002326  0E00               	movlw	0
  4504  002328  EC9A  F011         	call	_I2C_Read
  4505  00232C  6E2A               	movwf	I2C_ReadFromSlave@dataFromAddress,c
  4506                           
  4507                           ;i2c.c: 117: PEN = 1;
  4508  00232E  84C5               	bsf	4037,2,c	;volatile
  4509                           
  4510                           ;i2c.c: 119: return dataFromAddress;
  4511  002330  502A               	movf	I2C_ReadFromSlave@dataFromAddress,w,c
  4512  002332  0012               	return	
  4513  002334                     __end_of_I2C_ReadFromSlave:
  4514                           	opt stack 0
  4515                           tblptru	equ	0xFF8
  4516                           tblptrh	equ	0xFF7
  4517                           tblptrl	equ	0xFF6
  4518                           tablat	equ	0xFF5
  4519                           prodh	equ	0xFF4
  4520                           prodl	equ	0xFF3
  4521                           intcon	equ	0xFF2
  4522                           postinc0	equ	0xFEE
  4523                           wreg	equ	0xFE8
  4524                           postdec1	equ	0xFE5
  4525                           plusw1	equ	0xFE3
  4526                           fsr1l	equ	0xFE1
  4527                           plusw2	equ	0xFDB
  4528                           status	equ	0xFD8
  4529                           
  4530 ;; *************** function _I2C_Read *****************
  4531 ;; Defined at:
  4532 ;;		line 85 in file "i2c.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  ack             1    wreg     unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  ack             1   38[COMRAM] unsigned char 
  4537 ;;  readData        1   39[COMRAM] unsigned char 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      unsigned char 
  4540 ;; Registers used:
  4541 ;;		wreg, status,2, status,0, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;Total ram usage:        2 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    4
  4554 ;; This function calls:
  4555 ;;		_I2C_Wait
  4556 ;; This function is called by:
  4557 ;;		_I2C_ReadFromSlave
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           	psect	text24
  4562  002334                     __ptext24:
  4563                           	opt stack 0
  4564  002334                     _I2C_Read:
  4565                           	opt stack 23
  4566                           
  4567                           ;incstack = 0
  4568                           ;I2C_Read@ack stored from wreg
  4569  002334  6E27               	movwf	I2C_Read@ack,c
  4570                           
  4571                           ;i2c.c: 87: unsigned char readData;
  4572                           ;i2c.c: 89: I2C_Wait();
  4573  002336  EC43  F012         	call	_I2C_Wait	;wreg free
  4574                           
  4575                           ;i2c.c: 90: RCEN = 1;
  4576  00233A  86C5               	bsf	4037,3,c	;volatile
  4577                           
  4578                           ;i2c.c: 92: I2C_Wait();
  4579  00233C  EC43  F012         	call	_I2C_Wait	;wreg free
  4580                           
  4581                           ;i2c.c: 94: __nop();
  4582  002340  F000               	nop	
  4583                           
  4584                           ;i2c.c: 96: readData = SSPBUF;
  4585  002342  CFC9 F028          	movff	4041,I2C_Read@readData	;volatile
  4586                           
  4587                           ;i2c.c: 97: I2C_Wait();
  4588  002346  EC43  F012         	call	_I2C_Wait	;wreg free
  4589                           
  4590                           ;i2c.c: 98: if(ack) ACKDT = 0;
  4591  00234A  5027               	movf	I2C_Read@ack,w,c
  4592  00234C  B4D8               	btfsc	status,2,c
  4593  00234E  D002               	goto	l256
  4594  002350  9AC5               	bcf	4037,5,c	;volatile
  4595  002352  D001               	goto	l257
  4596  002354                     l256:
  4597                           
  4598                           ;i2c.c: 99: else ACKDT = 1;
  4599  002354  8AC5               	bsf	4037,5,c	;volatile
  4600  002356                     l257:
  4601                           
  4602                           ;i2c.c: 100: ACKEN = 1;
  4603  002356  88C5               	bsf	4037,4,c	;volatile
  4604                           
  4605                           ;i2c.c: 101: return readData;
  4606  002358  5028               	movf	I2C_Read@readData,w,c
  4607  00235A  0012               	return	
  4608  00235C                     __end_of_I2C_Read:
  4609                           	opt stack 0
  4610                           tblptru	equ	0xFF8
  4611                           tblptrh	equ	0xFF7
  4612                           tblptrl	equ	0xFF6
  4613                           tablat	equ	0xFF5
  4614                           prodh	equ	0xFF4
  4615                           prodl	equ	0xFF3
  4616                           intcon	equ	0xFF2
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           postdec1	equ	0xFE5
  4620                           plusw1	equ	0xFE3
  4621                           fsr1l	equ	0xFE1
  4622                           plusw2	equ	0xFDB
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _CookTimeDisplay *****************
  4626 ;; Defined at:
  4627 ;;		line 29 in file "cooktime_controller.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  adcRead         2   14[BANK0 ] unsigned int 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  cookTimeCont    2   27[BANK1 ] unsigned char [2]
  4632 ;;  cookTimeCont    1   29[BANK1 ] unsigned char [1]
  4633 ;;  setBakeTimeD   10    0[BANK1 ] unsigned char [10]
  4634 ;;  nextMenu        7   10[BANK1 ] unsigned char [7]
  4635 ;;  backMenu        6   17[BANK1 ] unsigned char [6]
  4636 ;;  minDisplay      4   23[BANK1 ] unsigned char [4]
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  1    wreg      void 
  4639 ;; Registers used:
  4640 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4646 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Totals:         0       2      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;Total ram usage:       32 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:    5
  4653 ;; This function calls:
  4654 ;;		___lwdiv
  4655 ;;		_lcd_char
  4656 ;;		_lcd_command
  4657 ;;		_lcd_string
  4658 ;;		_sprintf
  4659 ;; This function is called by:
  4660 ;;		_main
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text25
  4665  001492                     __ptext25:
  4666                           	opt stack 0
  4667  001492                     _CookTimeDisplay:
  4668                           	opt stack 25
  4669                           
  4670                           ;cooktime_controller.c: 31: lcd_command(0x80);
  4671                           
  4672                           ;incstack = 0
  4673  001492  0E80               	movlw	128
  4674  001494  EC5F  F00C         	call	_lcd_command
  4675                           
  4676                           ;cooktime_controller.c: 32: char setBakeTimeDisplay[] = "Bake Time";
  4677  001498  EE20  F08B         	lfsr	2,CookTimeDisplay@F3152
  4678  00149C  EE11  F000         	lfsr	1,CookTimeDisplay@setBakeTimeDisplay
  4679  0014A0  0E09               	movlw	9
  4680  0014A2                     u2351:
  4681  0014A2  CFDB FFE3          	movff	plusw2,plusw1
  4682  0014A6  06E8               	decf	wreg,f,c
  4683  0014A8  E2FC               	bc	u2351
  4684                           
  4685                           ;cooktime_controller.c: 33: lcd_string(setBakeTimeDisplay);
  4686  0014AA  0E00               	movlw	low CookTimeDisplay@setBakeTimeDisplay
  4687  0014AC  6E29               	movwf	lcd_string@x,c
  4688  0014AE  0E01               	movlw	high CookTimeDisplay@setBakeTimeDisplay
  4689  0014B0  6E2A               	movwf	lcd_string@x+1,c
  4690  0014B2  EC4E  F011         	call	_lcd_string	;wreg free
  4691                           
  4692                           ;cooktime_controller.c: 35: lcd_command(0x8A);
  4693  0014B6  0E8A               	movlw	138
  4694  0014B8  EC5F  F00C         	call	_lcd_command
  4695                           
  4696                           ;cooktime_controller.c: 36: char backMenu[] = "|Back";
  4697  0014BC  EE20  F0AF         	lfsr	2,CookTimeDisplay@F3154
  4698  0014C0  EE11  F011         	lfsr	1,CookTimeDisplay@backMenu
  4699  0014C4  0E05               	movlw	5
  4700  0014C6                     u2361:
  4701  0014C6  CFDB FFE3          	movff	plusw2,plusw1
  4702  0014CA  06E8               	decf	wreg,f,c
  4703  0014CC  E2FC               	bc	u2361
  4704                           
  4705                           ;cooktime_controller.c: 37: lcd_string(backMenu);
  4706  0014CE  0E11               	movlw	low CookTimeDisplay@backMenu
  4707  0014D0  6E29               	movwf	lcd_string@x,c
  4708  0014D2  0E01               	movlw	high CookTimeDisplay@backMenu
  4709  0014D4  6E2A               	movwf	lcd_string@x+1,c
  4710  0014D6  EC4E  F011         	call	_lcd_string	;wreg free
  4711                           
  4712                           ;cooktime_controller.c: 39: lcd_command(0xCA);
  4713  0014DA  0ECA               	movlw	202
  4714  0014DC  EC5F  F00C         	call	_lcd_command
  4715                           
  4716                           ;cooktime_controller.c: 40: char nextMenu[] = "|Start";
  4717  0014E0  EE20  F0A8         	lfsr	2,CookTimeDisplay@F3156
  4718  0014E4  EE11  F00A         	lfsr	1,CookTimeDisplay@nextMenu
  4719  0014E8  0E06               	movlw	6
  4720  0014EA                     u2371:
  4721  0014EA  CFDB FFE3          	movff	plusw2,plusw1
  4722  0014EE  06E8               	decf	wreg,f,c
  4723  0014F0  E2FC               	bc	u2371
  4724                           
  4725                           ;cooktime_controller.c: 41: lcd_string(nextMenu);
  4726  0014F2  0E0A               	movlw	low CookTimeDisplay@nextMenu
  4727  0014F4  6E29               	movwf	lcd_string@x,c
  4728  0014F6  0E01               	movlw	high CookTimeDisplay@nextMenu
  4729  0014F8  6E2A               	movwf	lcd_string@x+1,c
  4730  0014FA  EC4E  F011         	call	_lcd_string	;wreg free
  4731                           
  4732                           ;cooktime_controller.c: 43: lcd_command(0xC6);
  4733  0014FE  0EC6               	movlw	198
  4734  001500  EC5F  F00C         	call	_lcd_command
  4735                           
  4736                           ;cooktime_controller.c: 44: char minDisplay[] = "MIN";
  4737  001504  C050  F117         	movff	CookTimeDisplay@F3158,CookTimeDisplay@minDisplay
  4738  001508  C051  F118         	movff	CookTimeDisplay@F3158+1,CookTimeDisplay@minDisplay+1
  4739  00150C  C052  F119         	movff	CookTimeDisplay@F3158+2,CookTimeDisplay@minDisplay+2
  4740  001510  C053  F11A         	movff	CookTimeDisplay@F3158+3,CookTimeDisplay@minDisplay+3
  4741                           
  4742                           ;cooktime_controller.c: 45: lcd_string(minDisplay);
  4743  001514  0E17               	movlw	low CookTimeDisplay@minDisplay
  4744  001516  6E29               	movwf	lcd_string@x,c
  4745  001518  0E01               	movlw	high CookTimeDisplay@minDisplay
  4746  00151A  6E2A               	movwf	lcd_string@x+1,c
  4747  00151C  EC4E  F011         	call	_lcd_string	;wreg free
  4748                           
  4749                           ;cooktime_controller.c: 48: cookTimeAdcRead = adcRead/17;
  4750  001520  C0E7  F026         	movff	CookTimeDisplay@adcRead,___lwdiv@dividend
  4751  001524  C0E8  F027         	movff	CookTimeDisplay@adcRead+1,___lwdiv@dividend+1
  4752  001528  0E00               	movlw	0
  4753  00152A  6E29               	movwf	___lwdiv@divisor+1,c
  4754  00152C  0E11               	movlw	17
  4755  00152E  6E28               	movwf	___lwdiv@divisor,c
  4756  001530  EC20  F010         	call	___lwdiv	;wreg free
  4757  001534  C026  F031         	movff	?___lwdiv,_cookTimeAdcRead	;volatile
  4758  001538  C027  F032         	movff	?___lwdiv+1,_cookTimeAdcRead+1	;volatile
  4759                           
  4760                           ;cooktime_controller.c: 50: if(cookTimeAdcRead >= 60)
  4761  00153C  5032               	movf	_cookTimeAdcRead+1,w,c	;volatile
  4762  00153E  E104               	bnz	u2380
  4763  001540  0E3C               	movlw	60
  4764  001542  5C31               	subwf	_cookTimeAdcRead,w,c	;volatile
  4765  001544  A0D8               	btfss	status,0,c
  4766  001546  D004               	goto	l499
  4767  001548                     u2380:
  4768                           
  4769                           ;cooktime_controller.c: 51: {
  4770                           ;cooktime_controller.c: 52: cookTimeAdcRead = 59;
  4771  001548  0E00               	movlw	0
  4772  00154A  6E32               	movwf	_cookTimeAdcRead+1,c	;volatile
  4773  00154C  0E3B               	movlw	59
  4774  00154E  6E31               	movwf	_cookTimeAdcRead,c	;volatile
  4775  001550                     l499:
  4776                           
  4777                           ;cooktime_controller.c: 53: }
  4778                           ;cooktime_controller.c: 55: if(cookTimeAdcRead < 10)
  4779  001550  5032               	movf	_cookTimeAdcRead+1,w,c	;volatile
  4780  001552  E123               	bnz	l3932
  4781  001554  0E0A               	movlw	10
  4782  001556  5C31               	subwf	_cookTimeAdcRead,w,c	;volatile
  4783  001558  B0D8               	btfsc	status,0,c
  4784  00155A  D01F               	goto	l500
  4785                           
  4786                           ;cooktime_controller.c: 56: {
  4787                           ;cooktime_controller.c: 57: lcd_command(0xC3);
  4788  00155C  0EC3               	movlw	195
  4789  00155E  EC5F  F00C         	call	_lcd_command
  4790                           
  4791                           ;cooktime_controller.c: 58: lcd_char('0');
  4792  001562  0E30               	movlw	48
  4793  001564  EC08  F00C         	call	_lcd_char
  4794                           
  4795                           ;cooktime_controller.c: 59: lcd_command(0xC4);
  4796  001568  0EC4               	movlw	196
  4797  00156A  EC5F  F00C         	call	_lcd_command
  4798                           
  4799                           ;cooktime_controller.c: 60: char cookTimeContainer[1];
  4800                           ;cooktime_controller.c: 61: sprintf(cookTimeContainer, "%u", cookTimeAdcRead);
  4801  00156E  0E1D               	movlw	low CookTimeDisplay@cookTimeContainer
  4802  001570  0100               	movlb	0	; () banked
  4803  001572  6FDA               	movwf	sprintf@sp& (0+255),b
  4804  001574  0E01               	movlw	high CookTimeDisplay@cookTimeContainer
  4805  001576  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  4806  001578  0E0B               	movlw	low STR_1
  4807  00157A  6FDC               	movwf	sprintf@f& (0+255),b
  4808  00157C  0E10               	movlw	high STR_1
  4809  00157E  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  4810  001580  C031  F0DE         	movff	_cookTimeAdcRead,?_sprintf+4	;volatile
  4811  001584  C032  F0DF         	movff	_cookTimeAdcRead+1,?_sprintf+5	;volatile
  4812  001588  ECE6  F00A         	call	_sprintf	;wreg free
  4813                           
  4814                           ;cooktime_controller.c: 62: lcd_string(cookTimeContainer);
  4815  00158C  0E1D               	movlw	low CookTimeDisplay@cookTimeContainer
  4816  00158E  6E29               	movwf	lcd_string@x,c
  4817  001590  0E01               	movlw	high CookTimeDisplay@cookTimeContainer
  4818  001592  6E2A               	movwf	lcd_string@x+1,c
  4819  001594  EC4E  F011         	call	_lcd_string	;wreg free
  4820                           
  4821                           ;cooktime_controller.c: 63: }
  4822  001598  0012               	return	
  4823  00159A                     l500:
  4824  00159A                     l3932:
  4825                           
  4826                           ;cooktime_controller.c: 64: else{
  4827                           ;cooktime_controller.c: 65: lcd_command(0xC3);
  4828  00159A  0EC3               	movlw	195
  4829  00159C  EC5F  F00C         	call	_lcd_command
  4830                           
  4831                           ;cooktime_controller.c: 66: char cookTimeContainer[2];
  4832                           ;cooktime_controller.c: 67: sprintf(cookTimeContainer, "%u", cookTimeAdcRead);
  4833  0015A0  0E1B               	movlw	low CookTimeDisplay@cookTimeContainer_1412
  4834  0015A2  0100               	movlb	0	; () banked
  4835  0015A4  6FDA               	movwf	sprintf@sp& (0+255),b
  4836  0015A6  0E01               	movlw	high CookTimeDisplay@cookTimeContainer_1412
  4837  0015A8  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  4838  0015AA  0E0B               	movlw	low STR_1
  4839  0015AC  6FDC               	movwf	sprintf@f& (0+255),b
  4840  0015AE  0E10               	movlw	high STR_1
  4841  0015B0  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  4842  0015B2  C031  F0DE         	movff	_cookTimeAdcRead,?_sprintf+4	;volatile
  4843  0015B6  C032  F0DF         	movff	_cookTimeAdcRead+1,?_sprintf+5	;volatile
  4844  0015BA  ECE6  F00A         	call	_sprintf	;wreg free
  4845                           
  4846                           ;cooktime_controller.c: 68: lcd_string(cookTimeContainer);
  4847  0015BE  0E1B               	movlw	low CookTimeDisplay@cookTimeContainer_1412
  4848  0015C0  6E29               	movwf	lcd_string@x,c
  4849  0015C2  0E01               	movlw	high CookTimeDisplay@cookTimeContainer_1412
  4850  0015C4  6E2A               	movwf	lcd_string@x+1,c
  4851  0015C6  EC4E  F011         	call	_lcd_string	;wreg free
  4852  0015CA  0012               	return	
  4853  0015CC                     __end_of_CookTimeDisplay:
  4854                           	opt stack 0
  4855                           tblptru	equ	0xFF8
  4856                           tblptrh	equ	0xFF7
  4857                           tblptrl	equ	0xFF6
  4858                           tablat	equ	0xFF5
  4859                           prodh	equ	0xFF4
  4860                           prodl	equ	0xFF3
  4861                           intcon	equ	0xFF2
  4862                           postinc0	equ	0xFEE
  4863                           wreg	equ	0xFE8
  4864                           postdec1	equ	0xFE5
  4865                           plusw1	equ	0xFE3
  4866                           fsr1l	equ	0xFE1
  4867                           plusw2	equ	0xFDB
  4868                           status	equ	0xFD8
  4869                           
  4870 ;; *************** function _CheckCookDone *****************
  4871 ;; Defined at:
  4872 ;;		line 264 in file "main.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  bakeDone       11    6[BANK0 ] unsigned char [11]
  4877 ;;  clear           6   17[BANK0 ] unsigned char [6]
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;Total ram usage:       17 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    7
  4894 ;; This function calls:
  4895 ;;		_InitI2C_MasterMode
  4896 ;;		_WriteToDac
  4897 ;;		_clearAlarm
  4898 ;;		_lcd_clear
  4899 ;;		_lcd_command
  4900 ;;		_lcd_string
  4901 ;; This function is called by:
  4902 ;;		_main
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text26
  4907  001E72                     __ptext26:
  4908                           	opt stack 0
  4909  001E72                     _CheckCookDone:
  4910                           	opt stack 23
  4911                           
  4912                           ;main.c: 266: if(PORTDbits.RD0 == 1)
  4913                           
  4914                           ;incstack = 0
  4915  001E72  A083               	btfss	3971,0,c	;volatile
  4916  001E74  0012               	return	
  4917                           
  4918                           ;main.c: 267: {
  4919                           ;main.c: 268: WriteToDac(0x00,0);
  4920  001E76  0E00               	movlw	0
  4921  001E78  6E28               	movwf	WriteToDac@data+1,c
  4922  001E7A  0E00               	movlw	0
  4923  001E7C  6E27               	movwf	WriteToDac@data,c
  4924  001E7E  0E00               	movlw	0
  4925  001E80  6E2A               	movwf	WriteToDac@frequency+1,c
  4926  001E82  0E00               	movlw	0
  4927  001E84  6E29               	movwf	WriteToDac@frequency,c
  4928  001E86  EC72  F010         	call	_WriteToDac	;wreg free
  4929                           
  4930                           ;main.c: 269: LATDbits.LATD6 = 0;
  4931  001E8A  9C8C               	bcf	3980,6,c	;volatile
  4932                           
  4933                           ;main.c: 270: LATDbits.LATD7 = 1;
  4934  001E8C  8E8C               	bsf	3980,7,c	;volatile
  4935                           
  4936                           ;main.c: 271: sineOut = 0;
  4937  001E8E  0E00               	movlw	0
  4938  001E90  6E49               	movwf	_sineOut,c	;volatile
  4939                           
  4940                           ;main.c: 272: InitI2C_MasterMode();
  4941  001E92  EC37  F012         	call	_InitI2C_MasterMode	;wreg free
  4942                           
  4943                           ;main.c: 274: clearAlarm();
  4944  001E96  ECF9  F010         	call	_clearAlarm	;wreg free
  4945                           
  4946                           ;main.c: 276: lcd_clear();
  4947  001E9A  EC80  F012         	call	_lcd_clear	;wreg free
  4948                           
  4949                           ;main.c: 277: lcd_command(0x80);
  4950  001E9E  0E80               	movlw	128
  4951  001EA0  EC5F  F00C         	call	_lcd_command
  4952                           
  4953                           ;main.c: 278: char bakeDone[] = "Bake Done!";
  4954  001EA4  EE20  F080         	lfsr	2,CheckCookDone@F3209
  4955  001EA8  EE10  F0DF         	lfsr	1,CheckCookDone@bakeDone
  4956  001EAC  0E0A               	movlw	10
  4957  001EAE                     u2151:
  4958  001EAE  CFDB FFE3          	movff	plusw2,plusw1
  4959  001EB2  06E8               	decf	wreg,f,c
  4960  001EB4  E2FC               	bc	u2151
  4961                           
  4962                           ;main.c: 279: lcd_string(bakeDone);
  4963  001EB6  0EDF               	movlw	low CheckCookDone@bakeDone
  4964  001EB8  6E29               	movwf	lcd_string@x,c
  4965  001EBA  0E00               	movlw	high CheckCookDone@bakeDone
  4966  001EBC  6E2A               	movwf	lcd_string@x+1,c
  4967  001EBE  EC4E  F011         	call	_lcd_string	;wreg free
  4968                           
  4969                           ;main.c: 281: lcd_command(0xCB);
  4970  001EC2  0ECB               	movlw	203
  4971  001EC4  EC5F  F00C         	call	_lcd_command
  4972                           
  4973                           ;main.c: 282: char clear[] = "Clear";
  4974  001EC8  EE20  F0D3         	lfsr	2,CheckCookDone@F3211
  4975  001ECC  EE10  F0EA         	lfsr	1,CheckCookDone@clear
  4976  001ED0  0E05               	movlw	5
  4977  001ED2                     u2161:
  4978  001ED2  CFDB FFE3          	movff	plusw2,plusw1
  4979  001ED6  06E8               	decf	wreg,f,c
  4980  001ED8  E2FC               	bc	u2161
  4981                           
  4982                           ;main.c: 283: lcd_string(clear);
  4983  001EDA  0EEA               	movlw	low CheckCookDone@clear
  4984  001EDC  6E29               	movwf	lcd_string@x,c
  4985  001EDE  0E00               	movlw	high CheckCookDone@clear
  4986  001EE0  6E2A               	movwf	lcd_string@x+1,c
  4987  001EE2  EC4E  F011         	call	_lcd_string	;wreg free
  4988                           
  4989                           ;main.c: 285: LCD_STATES = CookTimeDone;
  4990  001EE6  0E09               	movlw	9
  4991  001EE8  0101               	movlb	1	; () banked
  4992  001EEA  6FBC               	movwf	_LCD_STATES& (0+255),b
  4993                           
  4994                           ; BSR set to: 1
  4995                           ;main.c: 287: alarmSet = 1;
  4996  001EEC  0E01               	movlw	1
  4997  001EEE  6E4A               	movwf	_alarmSet,c	;volatile
  4998                           
  4999                           ; BSR set to: 1
  5000                           ;main.c: 288: PR2 = 1;
  5001  001EF0  0E01               	movlw	1
  5002  001EF2  6ECB               	movwf	4043,c	;volatile
  5003  001EF4  0012               	return	
  5004  001EF6                     __end_of_CheckCookDone:
  5005                           	opt stack 0
  5006                           tblptru	equ	0xFF8
  5007                           tblptrh	equ	0xFF7
  5008                           tblptrl	equ	0xFF6
  5009                           tablat	equ	0xFF5
  5010                           prodh	equ	0xFF4
  5011                           prodl	equ	0xFF3
  5012                           intcon	equ	0xFF2
  5013                           postinc0	equ	0xFEE
  5014                           wreg	equ	0xFE8
  5015                           postdec1	equ	0xFE5
  5016                           plusw1	equ	0xFE3
  5017                           fsr1l	equ	0xFE1
  5018                           plusw2	equ	0xFDB
  5019                           status	equ	0xFD8
  5020                           
  5021 ;; *************** function _lcd_clear *****************
  5022 ;; Defined at:
  5023 ;;		line 76 in file "lcd.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;		None
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  1    wreg      void 
  5030 ;; Registers used:
  5031 ;;		wreg, status,2, status,0, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;Total ram usage:        0 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    4
  5044 ;; This function calls:
  5045 ;;		_lcd_command
  5046 ;; This function is called by:
  5047 ;;		_main
  5048 ;;		_CheckCookDone
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           	psect	text27
  5053  002500                     __ptext27:
  5054                           	opt stack 0
  5055  002500                     _lcd_clear:
  5056                           	opt stack 26
  5057                           
  5058                           ;lcd.c: 78: lcd_command(0x01);
  5059                           
  5060                           ;incstack = 0
  5061  002500  0E01               	movlw	1
  5062  002502  EC5F  F00C         	call	_lcd_command
  5063  002506  0012               	return		;funcret
  5064  002508                     __end_of_lcd_clear:
  5065                           	opt stack 0
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           postinc0	equ	0xFEE
  5074                           wreg	equ	0xFE8
  5075                           postdec1	equ	0xFE5
  5076                           plusw1	equ	0xFE3
  5077                           fsr1l	equ	0xFE1
  5078                           plusw2	equ	0xFDB
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function _clearAlarm *****************
  5082 ;; Defined at:
  5083 ;;		line 292 in file "main.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;		None
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;		None
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      void 
  5090 ;; Registers used:
  5091 ;;		wreg, status,2, status,0, cstack
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;Total ram usage:        2 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; Hardware stack levels required when called:    6
  5104 ;; This function calls:
  5105 ;;		_I2C_WriteToSlave
  5106 ;; This function is called by:
  5107 ;;		_main
  5108 ;;		_CheckCookDone
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text28
  5113  0021F2                     __ptext28:
  5114                           	opt stack 0
  5115  0021F2                     _clearAlarm:
  5116                           	opt stack 24
  5117                           
  5118                           ;main.c: 294: I2C_WriteToSlave(0b11011110, 0, 0x07, 0x00);
  5119                           
  5120                           ;incstack = 0
  5121  0021F2  0E00               	movlw	0
  5122  0021F4  6E29               	movwf	I2C_WriteToSlave@R_W_mode,c
  5123  0021F6  0E07               	movlw	7
  5124  0021F8  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  5125  0021FA  0E00               	movlw	0
  5126  0021FC  6E2B               	movwf	I2C_WriteToSlave@data,c
  5127  0021FE  0EDE               	movlw	222
  5128  002200  ECE8  F011         	call	_I2C_WriteToSlave
  5129                           
  5130                           ;main.c: 295: _delay((unsigned long)((100)*(8000000/4000.0)));
  5131  002204  0E02               	movlw	2
  5132  002206  6E2E               	movwf	(??_clearAlarm+1)& (0+255),c
  5133  002208  0E04               	movlw	4
  5134  00220A  6E2D               	movwf	??_clearAlarm& (0+255),c
  5135  00220C  0EBA               	movlw	186
  5136  00220E                     u2597:
  5137  00220E  2EE8               	decfsz	wreg,f,c
  5138  002210  D7FE               	bra	u2597
  5139  002212  2E2D               	decfsz	??_clearAlarm& (0+255),f,c
  5140  002214  D7FC               	bra	u2597
  5141  002216  2E2E               	decfsz	(??_clearAlarm+1)& (0+255),f,c
  5142  002218  D7FA               	bra	u2597
  5143  00221A  D000               	nop2	
  5144                           
  5145                           ;main.c: 296: I2C_WriteToSlave(0b11011110, 0, 0x0D, 0x00);
  5146  00221C  0E00               	movlw	0
  5147  00221E  6E29               	movwf	I2C_WriteToSlave@R_W_mode,c
  5148  002220  0E0D               	movlw	13
  5149  002222  6E2A               	movwf	I2C_WriteToSlave@addressByte,c
  5150  002224  0E00               	movlw	0
  5151  002226  6E2B               	movwf	I2C_WriteToSlave@data,c
  5152  002228  0EDE               	movlw	222
  5153  00222A  ECE8  F011         	call	_I2C_WriteToSlave
  5154  00222E  0012               	return		;funcret
  5155  002230                     __end_of_clearAlarm:
  5156                           	opt stack 0
  5157                           tblptru	equ	0xFF8
  5158                           tblptrh	equ	0xFF7
  5159                           tblptrl	equ	0xFF6
  5160                           tablat	equ	0xFF5
  5161                           prodh	equ	0xFF4
  5162                           prodl	equ	0xFF3
  5163                           intcon	equ	0xFF2
  5164                           postinc0	equ	0xFEE
  5165                           wreg	equ	0xFE8
  5166                           postdec1	equ	0xFE5
  5167                           plusw1	equ	0xFE3
  5168                           fsr1l	equ	0xFE1
  5169                           plusw2	equ	0xFDB
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function _I2C_WriteToSlave *****************
  5173 ;; Defined at:
  5174 ;;		line 122 in file "i2c.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  slaveAddress    1    wreg     unsigned char 
  5177 ;;  R_W_mode        1   40[COMRAM] unsigned char 
  5178 ;;  addressByte     1   41[COMRAM] unsigned char 
  5179 ;;  data            1   42[COMRAM] unsigned char 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  slaveAddress    1   43[COMRAM] unsigned char 
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, status,2, status,0, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5191 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;Total ram usage:        4 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    5
  5198 ;; This function calls:
  5199 ;;		_I2C_Start
  5200 ;;		_I2C_Stop
  5201 ;;		_I2C_WriteControl
  5202 ;;		_I2C_WriteData
  5203 ;; This function is called by:
  5204 ;;		_clearAlarm
  5205 ;;		_WriteToRTC
  5206 ;;		_WriteTimeToCookToRTC
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text29
  5211  0023D0                     __ptext29:
  5212                           	opt stack 0
  5213  0023D0                     _I2C_WriteToSlave:
  5214                           	opt stack 24
  5215                           
  5216                           ;incstack = 0
  5217                           ;I2C_WriteToSlave@slaveAddress stored from wreg
  5218  0023D0  6E2C               	movwf	I2C_WriteToSlave@slaveAddress,c
  5219                           
  5220                           ;i2c.c: 125: I2C_Start();
  5221  0023D2  EC88  F012         	call	_I2C_Start	;wreg free
  5222                           
  5223                           ;i2c.c: 126: I2C_WriteControl(slaveAddress, R_W_mode);
  5224  0023D6  C029  F027         	movff	I2C_WriteToSlave@R_W_mode,I2C_WriteControl@R_W_mode
  5225  0023DA  502C               	movf	I2C_WriteToSlave@slaveAddress,w,c
  5226  0023DC  EC28  F012         	call	_I2C_WriteControl
  5227                           
  5228                           ;i2c.c: 127: I2C_WriteData(addressByte);
  5229  0023E0  502A               	movf	I2C_WriteToSlave@addressByte,w,c
  5230  0023E2  EC71  F012         	call	_I2C_WriteData
  5231                           
  5232                           ;i2c.c: 128: I2C_WriteData(data);
  5233  0023E6  502B               	movf	I2C_WriteToSlave@data,w,c
  5234  0023E8  EC71  F012         	call	_I2C_WriteData
  5235                           
  5236                           ;i2c.c: 129: I2C_Stop();
  5237  0023EC  EC84  F012         	call	_I2C_Stop	;wreg free
  5238  0023F0  0012               	return		;funcret
  5239  0023F2                     __end_of_I2C_WriteToSlave:
  5240                           	opt stack 0
  5241                           tblptru	equ	0xFF8
  5242                           tblptrh	equ	0xFF7
  5243                           tblptrl	equ	0xFF6
  5244                           tablat	equ	0xFF5
  5245                           prodh	equ	0xFF4
  5246                           prodl	equ	0xFF3
  5247                           intcon	equ	0xFF2
  5248                           postinc0	equ	0xFEE
  5249                           wreg	equ	0xFE8
  5250                           postdec1	equ	0xFE5
  5251                           plusw1	equ	0xFE3
  5252                           fsr1l	equ	0xFE1
  5253                           plusw2	equ	0xFDB
  5254                           status	equ	0xFD8
  5255                           
  5256 ;; *************** function _I2C_WriteData *****************
  5257 ;; Defined at:
  5258 ;;		line 61 in file "i2c.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  data            1    wreg     unsigned char 
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;  data            1   38[COMRAM] unsigned char 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;                  1    wreg      void 
  5265 ;; Registers used:
  5266 ;;		wreg, status,2, status,0, cstack
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;Total ram usage:        1 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    4
  5279 ;; This function calls:
  5280 ;;		_I2C_Wait
  5281 ;; This function is called by:
  5282 ;;		_I2C_ReadFromSlave
  5283 ;;		_I2C_WriteToSlave
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text30
  5288  0024E2                     __ptext30:
  5289                           	opt stack 0
  5290  0024E2                     _I2C_WriteData:
  5291                           	opt stack 24
  5292                           
  5293                           ;incstack = 0
  5294                           ;I2C_WriteData@data stored from wreg
  5295  0024E2  6E27               	movwf	I2C_WriteData@data,c
  5296                           
  5297                           ;i2c.c: 63: I2C_Wait();
  5298  0024E4  EC43  F012         	call	_I2C_Wait	;wreg free
  5299                           
  5300                           ;i2c.c: 64: SSPBUF = data;
  5301  0024E8  C027  FFC9         	movff	I2C_WriteData@data,4041	;volatile
  5302  0024EC  0012               	return		;funcret
  5303  0024EE                     __end_of_I2C_WriteData:
  5304                           	opt stack 0
  5305                           tblptru	equ	0xFF8
  5306                           tblptrh	equ	0xFF7
  5307                           tblptrl	equ	0xFF6
  5308                           tablat	equ	0xFF5
  5309                           prodh	equ	0xFF4
  5310                           prodl	equ	0xFF3
  5311                           intcon	equ	0xFF2
  5312                           postinc0	equ	0xFEE
  5313                           wreg	equ	0xFE8
  5314                           postdec1	equ	0xFE5
  5315                           plusw1	equ	0xFE3
  5316                           fsr1l	equ	0xFE1
  5317                           plusw2	equ	0xFDB
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function _I2C_WriteControl *****************
  5321 ;; Defined at:
  5322 ;;		line 68 in file "i2c.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  slaveAddress    1    wreg     unsigned char 
  5325 ;;  R_W_mode        1   38[COMRAM] unsigned char 
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  slaveAddress    1   39[COMRAM] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  1    wreg      void 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0, cstack
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5337 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;Total ram usage:        2 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    4
  5344 ;; This function calls:
  5345 ;;		_I2C_Wait
  5346 ;; This function is called by:
  5347 ;;		_I2C_ReadFromSlave
  5348 ;;		_I2C_WriteToSlave
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text31
  5353  002450                     __ptext31:
  5354                           	opt stack 0
  5355  002450                     _I2C_WriteControl:
  5356                           	opt stack 24
  5357                           
  5358                           ;incstack = 0
  5359                           ;I2C_WriteControl@slaveAddress stored from wreg
  5360  002450  6E28               	movwf	I2C_WriteControl@slaveAddress,c
  5361                           
  5362                           ;i2c.c: 72: if(R_W_mode)
  5363  002452  5027               	movf	I2C_WriteControl@R_W_mode,w,c
  5364  002454  B4D8               	btfsc	status,2,c
  5365  002456  D003               	goto	l251
  5366                           
  5367                           ;i2c.c: 73: {
  5368                           ;i2c.c: 74: slaveAddress = slaveAddress | (1 << 0);
  5369  002458  5028               	movf	I2C_WriteControl@slaveAddress,w,c
  5370  00245A  0901               	iorlw	1
  5371  00245C  D002               	goto	L7
  5372  00245E                     l251:
  5373                           
  5374                           ;i2c.c: 76: else{
  5375                           ;i2c.c: 77: slaveAddress = slaveAddress & ~(1 << 0);
  5376  00245E  5028               	movf	I2C_WriteControl@slaveAddress,w,c
  5377  002460  0BFE               	andlw	254
  5378  002462                     L7:
  5379  002462  6E28               	movwf	I2C_WriteControl@slaveAddress,c
  5380                           
  5381                           ;i2c.c: 79: }
  5382                           ;i2c.c: 81: I2C_Wait();
  5383  002464  EC43  F012         	call	_I2C_Wait	;wreg free
  5384                           
  5385                           ;i2c.c: 82: SSPBUF = slaveAddress;
  5386  002468  C028  FFC9         	movff	I2C_WriteControl@slaveAddress,4041	;volatile
  5387  00246C  0012               	return		;funcret
  5388  00246E                     __end_of_I2C_WriteControl:
  5389                           	opt stack 0
  5390                           tblptru	equ	0xFF8
  5391                           tblptrh	equ	0xFF7
  5392                           tblptrl	equ	0xFF6
  5393                           tablat	equ	0xFF5
  5394                           prodh	equ	0xFF4
  5395                           prodl	equ	0xFF3
  5396                           intcon	equ	0xFF2
  5397                           postinc0	equ	0xFEE
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           plusw1	equ	0xFE3
  5401                           fsr1l	equ	0xFE1
  5402                           plusw2	equ	0xFDB
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function _I2C_Stop *****************
  5406 ;; Defined at:
  5407 ;;		line 48 in file "i2c.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;		None
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  1    wreg      void 
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;Total ram usage:        0 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    4
  5428 ;; This function calls:
  5429 ;;		_I2C_Wait
  5430 ;; This function is called by:
  5431 ;;		_I2C_WriteToSlave
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           	psect	text32
  5436  002508                     __ptext32:
  5437                           	opt stack 0
  5438  002508                     _I2C_Stop:
  5439                           	opt stack 24
  5440                           
  5441                           ;i2c.c: 50: I2C_Wait();
  5442                           
  5443                           ;incstack = 0
  5444  002508  EC43  F012         	call	_I2C_Wait	;wreg free
  5445                           
  5446                           ;i2c.c: 51: PEN = 1;
  5447  00250C  84C5               	bsf	4037,2,c	;volatile
  5448  00250E  0012               	return		;funcret
  5449  002510                     __end_of_I2C_Stop:
  5450                           	opt stack 0
  5451                           tblptru	equ	0xFF8
  5452                           tblptrh	equ	0xFF7
  5453                           tblptrl	equ	0xFF6
  5454                           tablat	equ	0xFF5
  5455                           prodh	equ	0xFF4
  5456                           prodl	equ	0xFF3
  5457                           intcon	equ	0xFF2
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postdec1	equ	0xFE5
  5461                           plusw1	equ	0xFE3
  5462                           fsr1l	equ	0xFE1
  5463                           plusw2	equ	0xFDB
  5464                           status	equ	0xFD8
  5465                           
  5466 ;; *************** function _I2C_Start *****************
  5467 ;; Defined at:
  5468 ;;		line 42 in file "i2c.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;Total ram usage:        0 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    4
  5489 ;; This function calls:
  5490 ;;		_I2C_Wait
  5491 ;; This function is called by:
  5492 ;;		_I2C_ReadFromSlave
  5493 ;;		_I2C_WriteToSlave
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text33
  5498  002510                     __ptext33:
  5499                           	opt stack 0
  5500  002510                     _I2C_Start:
  5501                           	opt stack 24
  5502                           
  5503                           ;i2c.c: 44: I2C_Wait();
  5504                           
  5505                           ;incstack = 0
  5506  002510  EC43  F012         	call	_I2C_Wait	;wreg free
  5507                           
  5508                           ;i2c.c: 45: SSPCON2bits.SEN = 1;
  5509  002514  80C5               	bsf	4037,0,c	;volatile
  5510  002516  0012               	return		;funcret
  5511  002518                     __end_of_I2C_Start:
  5512                           	opt stack 0
  5513                           tblptru	equ	0xFF8
  5514                           tblptrh	equ	0xFF7
  5515                           tblptrl	equ	0xFF6
  5516                           tablat	equ	0xFF5
  5517                           prodh	equ	0xFF4
  5518                           prodl	equ	0xFF3
  5519                           intcon	equ	0xFF2
  5520                           postinc0	equ	0xFEE
  5521                           wreg	equ	0xFE8
  5522                           postdec1	equ	0xFE5
  5523                           plusw1	equ	0xFE3
  5524                           fsr1l	equ	0xFE1
  5525                           plusw2	equ	0xFDB
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function _I2C_Wait *****************
  5529 ;; Defined at:
  5530 ;;		line 54 in file "i2c.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2, status,0
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;Total ram usage:        1 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    3
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_I2C_Start
  5555 ;;		_I2C_Stop
  5556 ;;		_I2C_WriteData
  5557 ;;		_I2C_WriteControl
  5558 ;;		_I2C_Read
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text34
  5563  002486                     __ptext34:
  5564                           	opt stack 0
  5565  002486                     _I2C_Wait:
  5566                           	opt stack 24
  5567                           
  5568                           ;i2c.c: 56: while((SSPCON2 & 0x1F) || (SSPSTAT & 0x04));
  5569                           
  5570                           ;incstack = 0
  5571  002486  CFC5 F026          	movff	4037,??_I2C_Wait	;volatile
  5572  00248A  0E1F               	movlw	31
  5573  00248C  1626               	andwf	??_I2C_Wait,f,c
  5574  00248E  A4D8               	btfss	status,2,c
  5575  002490  D7FA               	goto	_I2C_Wait
  5576  002492  A4C7               	btfss	4039,2,c	;volatile
  5577  002494  0012               	return	
  5578  002496  D7F7               	goto	_I2C_Wait
  5579  002498                     __end_of_I2C_Wait:
  5580                           	opt stack 0
  5581                           tblptru	equ	0xFF8
  5582                           tblptrh	equ	0xFF7
  5583                           tblptrl	equ	0xFF6
  5584                           tablat	equ	0xFF5
  5585                           prodh	equ	0xFF4
  5586                           prodl	equ	0xFF3
  5587                           intcon	equ	0xFF2
  5588                           postinc0	equ	0xFEE
  5589                           wreg	equ	0xFE8
  5590                           postdec1	equ	0xFE5
  5591                           plusw1	equ	0xFE3
  5592                           fsr1l	equ	0xFE1
  5593                           plusw2	equ	0xFDB
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function _WriteToDac *****************
  5597 ;; Defined at:
  5598 ;;		line 61 in file "spi.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  data            2   38[COMRAM] unsigned int 
  5601 ;;  frequency       2   40[COMRAM] unsigned int 
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;  output          2    4[BANK0 ] unsigned int 
  5604 ;;  command         2    0[BANK0 ] unsigned int 
  5605 ;;  low             1    3[BANK0 ] unsigned char 
  5606 ;;  high            1    2[BANK0 ] unsigned char 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      void 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;Total ram usage:       12 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    4
  5623 ;; This function calls:
  5624 ;;		_WriteSpi
  5625 ;; This function is called by:
  5626 ;;		_main
  5627 ;;		_CheckCookDone
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text35
  5632  0020E4                     __ptext35:
  5633                           	opt stack 0
  5634  0020E4                     _WriteToDac:
  5635                           	opt stack 26
  5636                           
  5637                           ;spi.c: 62: TRISCbits.TRISC2 = 0;
  5638                           
  5639                           ;incstack = 0
  5640  0020E4  9494               	bcf	3988,2,c	;volatile
  5641                           
  5642                           ;spi.c: 64: PORTCbits.RC2 = 0;
  5643  0020E6  9482               	bcf	3970,2,c	;volatile
  5644                           
  5645                           ;spi.c: 66: uint16_t command = 0xF000;
  5646  0020E8  0EF0               	movlw	240
  5647  0020EA  0100               	movlb	0	; () banked
  5648  0020EC  6FDA               	movwf	(WriteToDac@command+1)& (0+255),b
  5649  0020EE  0E00               	movlw	0
  5650  0020F0  6FD9               	movwf	WriteToDac@command& (0+255),b
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;spi.c: 68: uint16_t output = command |(data<<2);
  5654  0020F2  C027  F02B         	movff	WriteToDac@data,??_WriteToDac
  5655  0020F6  C028  F02C         	movff	WriteToDac@data+1,??_WriteToDac+1
  5656  0020FA  90D8               	bcf	status,0,c
  5657  0020FC  362B               	rlcf	??_WriteToDac,f,c
  5658  0020FE  362C               	rlcf	??_WriteToDac+1,f,c
  5659  002100  90D8               	bcf	status,0,c
  5660  002102  362B               	rlcf	??_WriteToDac,f,c
  5661  002104  362C               	rlcf	??_WriteToDac+1,f,c
  5662  002106  51D9               	movf	WriteToDac@command& (0+255),w,b
  5663  002108  102B               	iorwf	??_WriteToDac,w,c
  5664  00210A  6FDD               	movwf	WriteToDac@output& (0+255),b
  5665  00210C  51DA               	movf	(WriteToDac@command+1)& (0+255),w,b
  5666  00210E  102C               	iorwf	??_WriteToDac+1,w,c
  5667  002110  6FDE               	movwf	(WriteToDac@output+1)& (0+255),b
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;spi.c: 70: uint8_t high = (uint8_t)(output>>8);
  5671  002112  51DE               	movf	(WriteToDac@output+1)& (0+255),w,b
  5672  002114  6FDB               	movwf	WriteToDac@high& (0+255),b
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;spi.c: 72: uint8_t low = output & 0x00ff;
  5676  002116  C0DD  F0DC         	movff	WriteToDac@output,WriteToDac@low
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;spi.c: 74: WriteSpi(high);
  5680  00211A  51DB               	movf	WriteToDac@high& (0+255),w,b
  5681  00211C  EC63  F012         	call	_WriteSpi
  5682                           
  5683                           ;spi.c: 75: WriteSpi(low);
  5684  002120  0100               	movlb	0	; () banked
  5685  002122  51DC               	movf	WriteToDac@low& (0+255),w,b
  5686  002124  EC63  F012         	call	_WriteSpi
  5687                           
  5688                           ;spi.c: 77: PORTCbits.RC2 = 1;
  5689  002128  8482               	bsf	3970,2,c	;volatile
  5690  00212A  0012               	return		;funcret
  5691  00212C                     __end_of_WriteToDac:
  5692                           	opt stack 0
  5693                           tblptru	equ	0xFF8
  5694                           tblptrh	equ	0xFF7
  5695                           tblptrl	equ	0xFF6
  5696                           tablat	equ	0xFF5
  5697                           prodh	equ	0xFF4
  5698                           prodl	equ	0xFF3
  5699                           intcon	equ	0xFF2
  5700                           postinc0	equ	0xFEE
  5701                           wreg	equ	0xFE8
  5702                           postdec1	equ	0xFE5
  5703                           plusw1	equ	0xFE3
  5704                           fsr1l	equ	0xFE1
  5705                           plusw2	equ	0xFDB
  5706                           status	equ	0xFD8
  5707                           
  5708 ;; *************** function _WriteSpi *****************
  5709 ;; Defined at:
  5710 ;;		line 53 in file "spi.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;  data            1    wreg     unsigned char 
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;  data            1   37[COMRAM] unsigned char 
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  1    wreg      void 
  5717 ;; Registers used:
  5718 ;;		wreg
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;Total ram usage:        1 bytes
  5729 ;; Hardware stack levels used:    1
  5730 ;; Hardware stack levels required when called:    3
  5731 ;; This function calls:
  5732 ;;		Nothing
  5733 ;; This function is called by:
  5734 ;;		_WriteToDac
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           	psect	text36
  5739  0024C6                     __ptext36:
  5740                           	opt stack 0
  5741  0024C6                     _WriteSpi:
  5742                           	opt stack 26
  5743                           
  5744                           ;incstack = 0
  5745                           ;WriteSpi@data stored from wreg
  5746  0024C6  6E26               	movwf	WriteSpi@data,c
  5747                           
  5748                           ;spi.c: 55: SSPBUF = data;
  5749  0024C8  C026  FFC9         	movff	WriteSpi@data,4041	;volatile
  5750  0024CC  A69E               	btfss	3998,3,c	;volatile
  5751  0024CE  D7FE               	goto	l287
  5752                           
  5753                           ;spi.c: 57: PIR1bits.SSPIF = 0;
  5754  0024D0  969E               	bcf	3998,3,c	;volatile
  5755  0024D2  0012               	return		;funcret
  5756  0024D4                     __end_of_WriteSpi:
  5757                           	opt stack 0
  5758                           tblptru	equ	0xFF8
  5759                           tblptrh	equ	0xFF7
  5760                           tblptrl	equ	0xFF6
  5761                           tablat	equ	0xFF5
  5762                           prodh	equ	0xFF4
  5763                           prodl	equ	0xFF3
  5764                           intcon	equ	0xFF2
  5765                           postinc0	equ	0xFEE
  5766                           wreg	equ	0xFE8
  5767                           postdec1	equ	0xFE5
  5768                           plusw1	equ	0xFE3
  5769                           fsr1l	equ	0xFE1
  5770                           plusw2	equ	0xFDB
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _InitI2C_MasterMode *****************
  5774 ;; Defined at:
  5775 ;;		line 24 in file "i2c.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;Total ram usage:        0 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    3
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_main
  5800 ;;		_CheckCookDone
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           	psect	text37
  5805  00246E                     __ptext37:
  5806                           	opt stack 0
  5807  00246E                     _InitI2C_MasterMode:
  5808                           	opt stack 27
  5809                           
  5810                           ;i2c.c: 26: SSPCON1 = 0x28;
  5811                           
  5812                           ;incstack = 0
  5813  00246E  0E28               	movlw	40
  5814  002470  6EC6               	movwf	4038,c	;volatile
  5815                           
  5816                           ;i2c.c: 29: SSPCON2 = 0x00;
  5817  002472  0E00               	movlw	0
  5818  002474  6EC5               	movwf	4037,c	;volatile
  5819                           
  5820                           ;i2c.c: 31: SSPADD = 0x09;
  5821  002476  0E09               	movlw	9
  5822  002478  6EC8               	movwf	4040,c	;volatile
  5823                           
  5824                           ;i2c.c: 33: SSPSTAT = 0x80;
  5825  00247A  0E80               	movlw	128
  5826  00247C  6EC7               	movwf	4039,c	;volatile
  5827                           
  5828                           ;i2c.c: 35: TRISCbits.TRISC3 = 1;
  5829  00247E  8694               	bsf	3988,3,c	;volatile
  5830                           
  5831                           ;i2c.c: 36: TRISCbits.TRISC4 = 1;
  5832  002480  8894               	bsf	3988,4,c	;volatile
  5833                           
  5834                           ;i2c.c: 39: SSPIF=0;
  5835  002482  969E               	bcf	3998,3,c	;volatile
  5836  002484  0012               	return		;funcret
  5837  002486                     __end_of_InitI2C_MasterMode:
  5838                           	opt stack 0
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           intcon	equ	0xFF2
  5846                           postinc0	equ	0xFEE
  5847                           wreg	equ	0xFE8
  5848                           postdec1	equ	0xFE5
  5849                           plusw1	equ	0xFE3
  5850                           fsr1l	equ	0xFE1
  5851                           plusw2	equ	0xFDB
  5852                           status	equ	0xFD8
  5853                           
  5854 ;; *************** function _BakeTempSet *****************
  5855 ;; Defined at:
  5856 ;;		line 24 in file "bake_temp_set_controller.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  adcRead         2   14[BANK0 ] unsigned int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  setBakeTempD   10    0[BANK1 ] unsigned char [10]
  5861 ;;  nextMenu        6   16[BANK1 ] unsigned char [6]
  5862 ;;  deliminator     6   10[BANK1 ] unsigned char [6]
  5863 ;;  bakeTempCont    3   22[BANK1 ] unsigned char [3]
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  2   14[BANK0 ] unsigned int 
  5866 ;; Registers used:
  5867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5873 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Totals:         0       4      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;Total ram usage:       29 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    5
  5880 ;; This function calls:
  5881 ;;		___lwmod
  5882 ;;		_lcd_char
  5883 ;;		_lcd_command
  5884 ;;		_lcd_string
  5885 ;;		_sprintf
  5886 ;; This function is called by:
  5887 ;;		_main
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           	psect	text38
  5892  0016F0                     __ptext38:
  5893                           	opt stack 0
  5894  0016F0                     _BakeTempSet:
  5895                           	opt stack 25
  5896                           
  5897                           ;bake_temp_set_controller.c: 28: lcd_command(0x80);
  5898                           
  5899                           ;incstack = 0
  5900  0016F0  0E80               	movlw	128
  5901  0016F2  EC5F  F00C         	call	_lcd_command
  5902                           
  5903                           ;bake_temp_set_controller.c: 30: char setBakeTempDisplay[] = "Bake Temp";
  5904  0016F6  EE20  F095         	lfsr	2,BakeTempSet@F3127
  5905  0016FA  EE11  F000         	lfsr	1,BakeTempSet@setBakeTempDisplay
  5906  0016FE  0E09               	movlw	9
  5907  001700                     u2321:
  5908  001700  CFDB FFE3          	movff	plusw2,plusw1
  5909  001704  06E8               	decf	wreg,f,c
  5910  001706  E2FC               	bc	u2321
  5911                           
  5912                           ;bake_temp_set_controller.c: 31: lcd_string(setBakeTempDisplay);
  5913  001708  0E00               	movlw	low BakeTempSet@setBakeTempDisplay
  5914  00170A  6E29               	movwf	lcd_string@x,c
  5915  00170C  0E01               	movlw	high BakeTempSet@setBakeTempDisplay
  5916  00170E  6E2A               	movwf	lcd_string@x+1,c
  5917  001710  EC4E  F011         	call	_lcd_string	;wreg free
  5918                           
  5919                           ;bake_temp_set_controller.c: 33: lcd_command(0x8B);
  5920  001714  0E8B               	movlw	139
  5921  001716  EC5F  F00C         	call	_lcd_command
  5922                           
  5923                           ;bake_temp_set_controller.c: 34: char deliminator[] = "|Back";
  5924  00171A  EE20  F0BB         	lfsr	2,BakeTempSet@F3129
  5925  00171E  EE11  F00A         	lfsr	1,BakeTempSet@deliminator
  5926  001722  0E05               	movlw	5
  5927  001724                     u2331:
  5928  001724  CFDB FFE3          	movff	plusw2,plusw1
  5929  001728  06E8               	decf	wreg,f,c
  5930  00172A  E2FC               	bc	u2331
  5931                           
  5932                           ;bake_temp_set_controller.c: 35: lcd_string(deliminator);
  5933  00172C  0E0A               	movlw	low BakeTempSet@deliminator
  5934  00172E  6E29               	movwf	lcd_string@x,c
  5935  001730  0E01               	movlw	high BakeTempSet@deliminator
  5936  001732  6E2A               	movwf	lcd_string@x+1,c
  5937  001734  EC4E  F011         	call	_lcd_string	;wreg free
  5938                           
  5939                           ;bake_temp_set_controller.c: 37: lcd_command(0xCB);
  5940  001738  0ECB               	movlw	203
  5941  00173A  EC5F  F00C         	call	_lcd_command
  5942                           
  5943                           ;bake_temp_set_controller.c: 38: char nextMenu[] = "|Next";
  5944  00173E  EE20  F0B5         	lfsr	2,BakeTempSet@F3131
  5945  001742  EE11  F010         	lfsr	1,BakeTempSet@nextMenu
  5946  001746  0E05               	movlw	5
  5947  001748                     u2341:
  5948  001748  CFDB FFE3          	movff	plusw2,plusw1
  5949  00174C  06E8               	decf	wreg,f,c
  5950  00174E  E2FC               	bc	u2341
  5951                           
  5952                           ;bake_temp_set_controller.c: 39: lcd_string(nextMenu);
  5953  001750  0E10               	movlw	low BakeTempSet@nextMenu
  5954  001752  6E29               	movwf	lcd_string@x,c
  5955  001754  0E01               	movlw	high BakeTempSet@nextMenu
  5956  001756  6E2A               	movwf	lcd_string@x+1,c
  5957  001758  EC4E  F011         	call	_lcd_string	;wreg free
  5958                           
  5959                           ;bake_temp_set_controller.c: 41: lcd_command(0xC8);
  5960  00175C  0EC8               	movlw	200
  5961  00175E  EC5F  F00C         	call	_lcd_command
  5962                           
  5963                           ;bake_temp_set_controller.c: 42: lcd_char('F');
  5964  001762  0E46               	movlw	70
  5965  001764  EC08  F00C         	call	_lcd_char
  5966                           
  5967                           ;bake_temp_set_controller.c: 44: lcd_command(0xC4);
  5968  001768  0EC4               	movlw	196
  5969  00176A  EC5F  F00C         	call	_lcd_command
  5970                           
  5971                           ;bake_temp_set_controller.c: 45: _delay((unsigned long)((30)*(8000000/4000.0)));
  5972  00176E  0E4E               	movlw	78
  5973  001770  0100               	movlb	0	; () banked
  5974  001772  6FE9               	movwf	??_BakeTempSet& (0+255),b
  5975  001774  0EEB               	movlw	235
  5976  001776                     u2607:
  5977  001776  2EE8               	decfsz	wreg,f,c
  5978  001778  D7FE               	bra	u2607
  5979  00177A  2FE9               	decfsz	??_BakeTempSet& (0+255),f,b
  5980  00177C  D7FC               	bra	u2607
  5981                           
  5982                           ;bake_temp_set_controller.c: 46: tempAdcRead = adcRead/4;
  5983  00177E  C0E7  F0E9         	movff	BakeTempSet@adcRead,??_BakeTempSet
  5984  001782  C0E8  F0EA         	movff	BakeTempSet@adcRead+1,??_BakeTempSet+1
  5985  001786  0100               	movlb	0	; () banked
  5986  001788  90D8               	bcf	status,0,c
  5987  00178A  33EA               	rrcf	(??_BakeTempSet+1)& (0+255),f,b
  5988  00178C  33E9               	rrcf	??_BakeTempSet& (0+255),f,b
  5989  00178E  90D8               	bcf	status,0,c
  5990  001790  33EA               	rrcf	(??_BakeTempSet+1)& (0+255),f,b
  5991  001792  33E9               	rrcf	??_BakeTempSet& (0+255),f,b
  5992  001794  C0E9  F035         	movff	??_BakeTempSet,_tempAdcRead	;volatile
  5993  001798  C0EA  F036         	movff	??_BakeTempSet+1,_tempAdcRead+1	;volatile
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;bake_temp_set_controller.c: 47: tempAdcRead += 100;
  5997  00179C  0E64               	movlw	100
  5998  00179E  2635               	addwf	_tempAdcRead,f,c	;volatile
  5999  0017A0  0E00               	movlw	0
  6000  0017A2  2236               	addwfc	_tempAdcRead+1,f,c	;volatile
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;bake_temp_set_controller.c: 48: getModOfTemp = tempAdcRead % 5;
  6004  0017A4  C035  F02D         	movff	_tempAdcRead,___lwmod@dividend	;volatile
  6005  0017A8  C036  F02E         	movff	_tempAdcRead+1,___lwmod@dividend+1	;volatile
  6006  0017AC  0E00               	movlw	0
  6007  0017AE  6E30               	movwf	___lwmod@divisor+1,c
  6008  0017B0  0E05               	movlw	5
  6009  0017B2  6E2F               	movwf	___lwmod@divisor,c
  6010  0017B4  EC96  F010         	call	___lwmod	;wreg free
  6011  0017B8  C02D  F033         	movff	?___lwmod,_getModOfTemp	;volatile
  6012  0017BC  C02E  F034         	movff	?___lwmod+1,_getModOfTemp+1	;volatile
  6013                           
  6014                           ;bake_temp_set_controller.c: 49: tempAdcRead = tempAdcRead - getModOfTemp;
  6015  0017C0  C033  F0E9         	movff	_getModOfTemp,??_BakeTempSet	;volatile
  6016  0017C4  C034  F0EA         	movff	_getModOfTemp+1,??_BakeTempSet+1	;volatile
  6017  0017C8  0100               	movlb	0	; () banked
  6018  0017CA  1FE9               	comf	??_BakeTempSet& (0+255),f,b
  6019  0017CC  1FEA               	comf	(??_BakeTempSet+1)& (0+255),f,b
  6020  0017CE  4BE9               	infsnz	??_BakeTempSet& (0+255),f,b
  6021  0017D0  2BEA               	incf	(??_BakeTempSet+1)& (0+255),f,b
  6022  0017D2  5035               	movf	_tempAdcRead,w,c	;volatile
  6023  0017D4  25E9               	addwf	??_BakeTempSet& (0+255),w,b
  6024  0017D6  6E35               	movwf	_tempAdcRead,c	;volatile
  6025  0017D8  5036               	movf	_tempAdcRead+1,w,c	;volatile
  6026  0017DA  21EA               	addwfc	(??_BakeTempSet+1)& (0+255),w,b
  6027  0017DC  6E36               	movwf	_tempAdcRead+1,c	;volatile
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;bake_temp_set_controller.c: 52: char bakeTempContainer[3];
  6031                           ;bake_temp_set_controller.c: 53: sprintf(bakeTempContainer, "%u", tempAdcRead);
  6032  0017DE  0E16               	movlw	low BakeTempSet@bakeTempContainer
  6033  0017E0  6FDA               	movwf	sprintf@sp& (0+255),b
  6034  0017E2  0E01               	movlw	high BakeTempSet@bakeTempContainer
  6035  0017E4  6FDB               	movwf	(sprintf@sp+1)& (0+255),b
  6036  0017E6  0E0B               	movlw	low STR_1
  6037  0017E8  6FDC               	movwf	sprintf@f& (0+255),b
  6038  0017EA  0E10               	movlw	high STR_1
  6039  0017EC  6FDD               	movwf	(sprintf@f+1)& (0+255),b
  6040  0017EE  C035  F0DE         	movff	_tempAdcRead,?_sprintf+4	;volatile
  6041  0017F2  C036  F0DF         	movff	_tempAdcRead+1,?_sprintf+5	;volatile
  6042  0017F6  ECE6  F00A         	call	_sprintf	;wreg free
  6043                           
  6044                           ;bake_temp_set_controller.c: 54: lcd_string(bakeTempContainer);
  6045  0017FA  0E16               	movlw	low BakeTempSet@bakeTempContainer
  6046  0017FC  6E29               	movwf	lcd_string@x,c
  6047  0017FE  0E01               	movlw	high BakeTempSet@bakeTempContainer
  6048  001800  6E2A               	movwf	lcd_string@x+1,c
  6049  001802  EC4E  F011         	call	_lcd_string	;wreg free
  6050                           
  6051                           ;bake_temp_set_controller.c: 56: return tempAdcRead;
  6052  001806  C035  F0E7         	movff	_tempAdcRead,?_BakeTempSet	;volatile
  6053  00180A  C036  F0E8         	movff	_tempAdcRead+1,?_BakeTempSet+1	;volatile
  6054  00180E  0012               	return	
  6055  001810                     __end_of_BakeTempSet:
  6056                           	opt stack 0
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           intcon	equ	0xFF2
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           postdec1	equ	0xFE5
  6067                           plusw1	equ	0xFE3
  6068                           fsr1l	equ	0xFE1
  6069                           plusw2	equ	0xFDB
  6070                           status	equ	0xFD8
  6071                           
  6072 ;; *************** function _sprintf *****************
  6073 ;; Defined at:
  6074 ;;		line 492 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  sp              2    1[BANK0 ] PTR unsigned char 
  6077 ;;		 -> CookTimeDisplay@cookTimeContainer_1412(2), CookTimeDisplay@cookTimeContainer(1), BakeTempSet@bakeTempContainer(3
      +), ReadAndDisplaySecFromRTC@secondContainerDisplay_1361(2), 
  6078 ;;		 -> ReadAndDisplaySecFromRTC@secondContainerDisplay(1), ReadAndDisplayHrFromRTC@hourContainerDisplay_1355(2), ReadAn
      +dDisplayHrFromRTC@hourContainerDisplay(1), ReadAndDisplayMinFromRTC@minContainerDisplay_1349(2), 
  6079 ;;		 -> ReadAndDisplayMinFromRTC@minContainerDisplay(1), TimeSetting@minContainer_1331(2), TimeSetting@minContainer(1), 
      +TimeSetting@hourContainer_1327(2), 
  6080 ;;		 -> TimeSetting@hourContainer(1), main@bakeTempContainer(4), 
  6081 ;;  f               2    3[BANK0 ] PTR const unsigned char 
  6082 ;;		 -> STR_14(3), STR_13(3), STR_12(3), STR_11(3), 
  6083 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(3), 
  6084 ;;		 -> STR_6(3), STR_5(3), STR_4(3), STR_3(3), 
  6085 ;;		 -> STR_2(3), STR_1(3), 
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;  tmpval          4    0        struct .
  6088 ;;  cp              3    0        PTR const unsigned char 
  6089 ;;  val             2   10[BANK0 ] unsigned int 
  6090 ;;  ap              2    8[BANK0 ] PTR void [1]
  6091 ;;		 -> ?_sprintf(2), 
  6092 ;;  len             2    0        unsigned int 
  6093 ;;  c               1   13[BANK0 ] char 
  6094 ;;  prec            1   12[BANK0 ] char 
  6095 ;;  flag            1    7[BANK0 ] unsigned char 
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  2    1[BANK0 ] int 
  6098 ;; Registers used:
  6099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6105 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;Total ram usage:       13 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    4
  6112 ;; This function calls:
  6113 ;;		___lwdiv
  6114 ;;		___lwmod
  6115 ;; This function is called by:
  6116 ;;		_main
  6117 ;;		_TimeSetting
  6118 ;;		_ReadAndDisplayMinFromRTC
  6119 ;;		_ReadAndDisplayHrFromRTC
  6120 ;;		_ReadAndDisplaySecFromRTC
  6121 ;;		_BakeTempSet
  6122 ;;		_CookTimeDisplay
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text39
  6127  0015CC                     __ptext39:
  6128                           	opt stack 0
  6129  0015CC                     _sprintf:
  6130                           	opt stack 26
  6131                           
  6132                           ;doprnt.c: 494: va_list ap;
  6133                           ;doprnt.c: 499: signed char c;
  6134                           ;doprnt.c: 506: signed char prec;
  6135                           ;doprnt.c: 508: unsigned char flag;
  6136                           ;doprnt.c: 523: union {
  6137                           ;doprnt.c: 524: unsigned long vd;
  6138                           ;doprnt.c: 525: double integ;
  6139                           ;doprnt.c: 526: } tmpval;
  6140                           ;doprnt.c: 528: unsigned int val;
  6141                           ;doprnt.c: 529: unsigned len;
  6142                           ;doprnt.c: 530: const char * cp;
  6143                           ;doprnt.c: 533: *ap = __va_start();
  6144                           
  6145                           ;incstack = 0
  6146  0015CC  0EDE               	movlw	low (?_sprintf+4)
  6147  0015CE  0100               	movlb	0	; () banked
  6148  0015D0  6FE1               	movwf	sprintf@ap& (0+255),b
  6149  0015D2  0E00               	movlw	high (?_sprintf+4)
  6150  0015D4  6FE2               	movwf	(sprintf@ap+1)& (0+255),b
  6151                           
  6152                           ;doprnt.c: 536: while(c = *f++) {
  6153  0015D6  D079               	goto	u1960
  6154  0015D8                     
  6155                           ; BSR set to: 0
  6156                           ;doprnt.c: 538: if(c != '%')
  6157                           
  6158                           ; BSR set to: 0
  6159  0015D8  0E25               	movlw	37
  6160  0015DA  19E6               	xorwf	sprintf@c& (0+255),w,b
  6161  0015DC  B4D8               	btfsc	status,2,c
  6162  0015DE  D009               	goto	l526
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;doprnt.c: 540: {
  6166                           ;doprnt.c: 541: ((*sp++ = (c)));
  6167  0015E0  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  6168  0015E4  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  6169  0015E8  C0E6  FFDF         	movff	sprintf@c,indf2
  6170                           
  6171                           ; BSR set to: 0
  6172  0015EC  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  6173  0015EE  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  6174                           
  6175                           ;doprnt.c: 542: continue;
  6176  0015F0  D06C               	goto	u1960
  6177  0015F2                     l526:
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;doprnt.c: 543: }
  6181                           ;doprnt.c: 548: flag = 0;
  6182                           
  6183                           ; BSR set to: 0
  6184  0015F2  0E00               	movlw	0
  6185  0015F4  6FE0               	movwf	sprintf@flag& (0+255),b
  6186                           
  6187                           ;doprnt.c: 635: switch(c = *f++) {
  6188  0015F6  D003               	goto	l527
  6189  0015F8                     
  6190                           ; BSR set to: 0
  6191                           ;doprnt.c: 818: flag |= 0xC0;
  6192                           
  6193                           ; BSR set to: 0
  6194  0015F8  0EC0               	movlw	192
  6195  0015FA  13E0               	iorwf	sprintf@flag& (0+255),f,b
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;doprnt.c: 822: }
  6199                           
  6200                           ;doprnt.c: 819: break;
  6201  0015FC  D011               	goto	l532
  6202  0015FE                     l527:
  6203                           
  6204                           ; BSR set to: 0
  6205                           
  6206                           ; BSR set to: 0
  6207  0015FE  C0DC  FFF6         	movff	sprintf@f,tblptrl
  6208  001602  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  6209  001606  4BDC               	infsnz	sprintf@f& (0+255),f,b
  6210  001608  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  6211  00160A                     	if	0	;tblptru may be non-zero
  6212  00160A                     	endif
  6213  00160A                     	if	0	;tblptru may be non-zero
  6214  00160A                     	endif
  6215  00160A  0008               	tblrd		*
  6216  00160C  CFF5 F0E6          	movff	tablat,sprintf@c
  6217  001610  51E6               	movf	sprintf@c& (0+255),w,b
  6218                           
  6219                           ; Switch size 1, requested type "space"
  6220                           ; Number of cases is 2, Range of values is 0 to 117
  6221                           ; switch strategies available:
  6222                           ; Name         Instructions Cycles
  6223                           ; simple_byte            7     4 (average)
  6224                           ;	Chosen strategy is simple_byte
  6225  001612  0A00               	xorlw	0	; case 0
  6226  001614  B4D8               	btfsc	status,2,c
  6227  001616  D065               	goto	u1970
  6228  001618  0A75               	xorlw	117	; case 117
  6229  00161A  B4D8               	btfsc	status,2,c
  6230  00161C  D7ED               	goto	l531
  6231  00161E  D055               	goto	u1960
  6232  001620                     l532:
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;doprnt.c: 1273: {
  6236                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6237                           
  6238                           ; BSR set to: 0
  6239  001620  C0E1  FFD9         	movff	sprintf@ap,fsr2l
  6240  001624  C0E2  FFDA         	movff	sprintf@ap+1,fsr2h
  6241  001628  CFDE F0E3          	movff	postinc2,sprintf@val
  6242  00162C  CFDD F0E4          	movff	postdec2,sprintf@val+1
  6243                           
  6244                           ; BSR set to: 0
  6245  001630  0E02               	movlw	2
  6246  001632  27E1               	addwf	sprintf@ap& (0+255),f,b
  6247  001634  0E00               	movlw	0
  6248  001636  23E2               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;doprnt.c: 1287: }
  6252                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6253  001638  0E01               	movlw	1
  6254  00163A  6FE6               	movwf	sprintf@c& (0+255),b
  6255  00163C  D011               	goto	l3448
  6256  00163E                     
  6257                           ; BSR set to: 0
  6258                           ;doprnt.c: 1306: if(val < dpowers[c])
  6259                           
  6260                           ; BSR set to: 0
  6261  00163E  51E6               	movf	sprintf@c& (0+255),w,b
  6262  001640  0D02               	mullw	2
  6263  001642  0E01               	movlw	low _dpowers
  6264  001644  24F3               	addwf	prodl,w,c
  6265  001646  6EF6               	movwf	tblptrl,c
  6266  001648  0E10               	movlw	high _dpowers
  6267  00164A  20F4               	addwfc	prodh,w,c
  6268  00164C  6EF7               	movwf	tblptrh,c
  6269  00164E                     	if	0	;There are less than 3 active tblptr bytes
  6270  00164E                     	endif
  6271  00164E  0009               	tblrd		*+
  6272  001650  50F5               	movf	tablat,w,c
  6273  001652  5DE3               	subwf	sprintf@val& (0+255),w,b
  6274  001654  0009               	tblrd		*+
  6275  001656  50F5               	movf	tablat,w,c
  6276  001658  59E4               	subwfb	(sprintf@val+1)& (0+255),w,b
  6277  00165A  A0D8               	btfss	status,0,c
  6278  00165C  D005               	goto	u1950
  6279                           
  6280                           ; BSR set to: 0
  6281                           
  6282                           ; BSR set to: 0
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;doprnt.c: 1307: break;
  6286  00165E  2BE6               	incf	sprintf@c& (0+255),f,b
  6287  001660                     l3448:
  6288                           
  6289                           ; BSR set to: 0
  6290  001660  0E05               	movlw	5
  6291  001662  19E6               	xorwf	sprintf@c& (0+255),w,b
  6292  001664  A4D8               	btfss	status,2,c
  6293  001666  D7EB               	goto	l533
  6294  001668                     u1950:
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;doprnt.c: 1422: {
  6298                           ;doprnt.c: 1469: }
  6299                           ;doprnt.c: 1472: prec = c;
  6300  001668  C0E6  F0E5         	movff	sprintf@c,sprintf@prec
  6301                           
  6302                           ;doprnt.c: 1474: while(prec--) {
  6303  00166C  D02A               	goto	l536
  6304  00166E                     
  6305                           ; BSR set to: 0
  6306                           ;doprnt.c: 1478: {
  6307                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6308                           
  6309                           ; BSR set to: 0
  6310  00166E  51E5               	movf	sprintf@prec& (0+255),w,b
  6311  001670  0D02               	mullw	2
  6312  001672  0E01               	movlw	low _dpowers
  6313  001674  24F3               	addwf	prodl,w,c
  6314  001676  6EF6               	movwf	tblptrl,c
  6315  001678  0E10               	movlw	high _dpowers
  6316  00167A  20F4               	addwfc	prodh,w,c
  6317  00167C  6EF7               	movwf	tblptrh,c
  6318  00167E                     	if	0	;There are less than 3 active tblptr bytes
  6319  00167E                     	endif
  6320  00167E  0009               	tblrd		*+
  6321  001680  CFF5 F028          	movff	tablat,___lwdiv@divisor
  6322  001684  000A               	tblrd		*-
  6323  001686  CFF5 F029          	movff	tablat,___lwdiv@divisor+1
  6324  00168A  C0E3  F026         	movff	sprintf@val,___lwdiv@dividend
  6325  00168E  C0E4  F027         	movff	sprintf@val+1,___lwdiv@dividend+1
  6326  001692  EC20  F010         	call	___lwdiv	;wreg free
  6327  001696  C026  F02D         	movff	?___lwdiv,___lwmod@dividend
  6328  00169A  C027  F02E         	movff	?___lwdiv+1,___lwmod@dividend+1
  6329  00169E  0E00               	movlw	0
  6330  0016A0  6E30               	movwf	___lwmod@divisor+1,c
  6331  0016A2  0E0A               	movlw	10
  6332  0016A4  6E2F               	movwf	___lwmod@divisor,c
  6333  0016A6  EC96  F010         	call	___lwmod	;wreg free
  6334  0016AA  502D               	movf	?___lwmod,w,c
  6335  0016AC  0F30               	addlw	48
  6336  0016AE  0100               	movlb	0	; () banked
  6337  0016B0  6FE6               	movwf	sprintf@c& (0+255),b
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;doprnt.c: 1523: }
  6341                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6342  0016B2  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  6343  0016B6  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  6344  0016BA  C0E6  FFDF         	movff	sprintf@c,indf2
  6345                           
  6346                           ; BSR set to: 0
  6347  0016BE  4BDA               	infsnz	sprintf@sp& (0+255),f,b
  6348  0016C0  2BDB               	incf	(sprintf@sp+1)& (0+255),f,b
  6349  0016C2                     l536:
  6350                           
  6351                           ; BSR set to: 0
  6352                           
  6353                           ; BSR set to: 0
  6354  0016C2  07E5               	decf	sprintf@prec& (0+255),f,b
  6355  0016C4  29E5               	incf	sprintf@prec& (0+255),w,b
  6356  0016C6  A4D8               	btfss	status,2,c
  6357  0016C8  D7D2               	goto	l537
  6358  0016CA                     u1960:
  6359                           
  6360                           ; BSR set to: 0
  6361                           
  6362                           ; BSR set to: 0
  6363                           
  6364                           ; BSR set to: 0
  6365  0016CA  C0DC  FFF6         	movff	sprintf@f,tblptrl
  6366  0016CE  C0DD  FFF7         	movff	sprintf@f+1,tblptrh
  6367  0016D2  4BDC               	infsnz	sprintf@f& (0+255),f,b
  6368  0016D4  2BDD               	incf	(sprintf@f+1)& (0+255),f,b
  6369  0016D6                     	if	0	;tblptru may be non-zero
  6370  0016D6                     	endif
  6371  0016D6                     	if	0	;tblptru may be non-zero
  6372  0016D6                     	endif
  6373  0016D6  0008               	tblrd		*
  6374  0016D8  CFF5 F0E6          	movff	tablat,sprintf@c
  6375  0016DC  51E6               	movf	sprintf@c& (0+255),w,b
  6376  0016DE  A4D8               	btfss	status,2,c
  6377  0016E0  D77B               	goto	l525
  6378  0016E2                     u1970:
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;doprnt.c: 1538: *sp = 0;
  6382                           
  6383                           ; BSR set to: 0
  6384                           
  6385                           ;doprnt.c: 1525: }
  6386                           ;doprnt.c: 1533: }
  6387                           ;doprnt.c: 1535: alldone:
  6388                           
  6389                           ; BSR set to: 0
  6390  0016E2  C0DA  FFD9         	movff	sprintf@sp,fsr2l
  6391  0016E6  C0DB  FFDA         	movff	sprintf@sp+1,fsr2h
  6392  0016EA  0E00               	movlw	0
  6393  0016EC  6EDF               	movwf	indf2,c
  6394  0016EE  0012               	return	
  6395  0016F0                     __end_of_sprintf:
  6396                           	opt stack 0
  6397                           tblptru	equ	0xFF8
  6398                           tblptrh	equ	0xFF7
  6399                           tblptrl	equ	0xFF6
  6400                           tablat	equ	0xFF5
  6401                           prodh	equ	0xFF4
  6402                           prodl	equ	0xFF3
  6403                           intcon	equ	0xFF2
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           postdec1	equ	0xFE5
  6407                           plusw1	equ	0xFE3
  6408                           fsr1l	equ	0xFE1
  6409                           indf2	equ	0xFDF
  6410                           postinc2	equ	0xFDE
  6411                           postdec2	equ	0xFDD
  6412                           plusw2	equ	0xFDB
  6413                           fsr2h	equ	0xFDA
  6414                           fsr2l	equ	0xFD9
  6415                           status	equ	0xFD8
  6416                           
  6417 ;; *************** function ___lwmod *****************
  6418 ;; Defined at:
  6419 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;  dividend        2   44[COMRAM] unsigned int 
  6422 ;;  divisor         2   46[COMRAM] unsigned int 
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;  counter         1    0[BANK0 ] unsigned char 
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  2   44[COMRAM] unsigned int 
  6427 ;; Registers used:
  6428 ;;		wreg, status,2, status,0
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6434 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;      Totals:         4       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;Total ram usage:        5 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    3
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_BakeTempSet
  6445 ;;		_sprintf
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text40
  6450  00212C                     __ptext40:
  6451                           	opt stack 0
  6452  00212C                     ___lwmod:
  6453                           	opt stack 26
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;incstack = 0
  6457  00212C  502F               	movf	___lwmod@divisor,w,c
  6458  00212E  1030               	iorwf	___lwmod@divisor+1,w,c
  6459  002130  B4D8               	btfsc	status,2,c
  6460  002132  D019               	goto	l959
  6461  002134  0E01               	movlw	1
  6462  002136  0100               	movlb	0	; () banked
  6463  002138  6FD9               	movwf	___lwmod@counter& (0+255),b
  6464  00213A  D004               	goto	l954
  6465  00213C                     
  6466                           ; BSR set to: 0
  6467                           
  6468                           ; BSR set to: 0
  6469  00213C  90D8               	bcf	status,0,c
  6470  00213E  362F               	rlcf	___lwmod@divisor,f,c
  6471  002140  3630               	rlcf	___lwmod@divisor+1,f,c
  6472  002142  2BD9               	incf	___lwmod@counter& (0+255),f,b
  6473  002144                     l954:
  6474                           
  6475                           ; BSR set to: 0
  6476                           
  6477                           ; BSR set to: 0
  6478  002144  AE30               	btfss	___lwmod@divisor+1,7,c
  6479  002146  D7FA               	goto	l955
  6480  002148                     u1890:
  6481                           
  6482                           ; BSR set to: 0
  6483                           
  6484                           ; BSR set to: 0
  6485                           
  6486                           ; BSR set to: 0
  6487  002148  502F               	movf	___lwmod@divisor,w,c
  6488  00214A  5C2D               	subwf	___lwmod@dividend,w,c
  6489  00214C  5030               	movf	___lwmod@divisor+1,w,c
  6490  00214E  582E               	subwfb	___lwmod@dividend+1,w,c
  6491  002150  A0D8               	btfss	status,0,c
  6492  002152  D004               	goto	l958
  6493                           
  6494                           ; BSR set to: 0
  6495  002154  502F               	movf	___lwmod@divisor,w,c
  6496  002156  5E2D               	subwf	___lwmod@dividend,f,c
  6497  002158  5030               	movf	___lwmod@divisor+1,w,c
  6498  00215A  5A2E               	subwfb	___lwmod@dividend+1,f,c
  6499  00215C                     l958:
  6500                           
  6501                           ; BSR set to: 0
  6502                           
  6503                           ; BSR set to: 0
  6504  00215C  90D8               	bcf	status,0,c
  6505  00215E  3230               	rrcf	___lwmod@divisor+1,f,c
  6506  002160  322F               	rrcf	___lwmod@divisor,f,c
  6507                           
  6508                           ; BSR set to: 0
  6509  002162  2FD9               	decfsz	___lwmod@counter& (0+255),f,b
  6510  002164  D7F1               	goto	u1890
  6511  002166                     l959:
  6512                           
  6513                           ; BSR set to: 0
  6514  002166  C02D  F02D         	movff	___lwmod@dividend,?___lwmod
  6515  00216A  C02E  F02E         	movff	___lwmod@dividend+1,?___lwmod+1
  6516  00216E  0012               	return		;funcret
  6517  002170                     __end_of___lwmod:
  6518                           	opt stack 0
  6519                           tblptru	equ	0xFF8
  6520                           tblptrh	equ	0xFF7
  6521                           tblptrl	equ	0xFF6
  6522                           tablat	equ	0xFF5
  6523                           prodh	equ	0xFF4
  6524                           prodl	equ	0xFF3
  6525                           intcon	equ	0xFF2
  6526                           postinc0	equ	0xFEE
  6527                           wreg	equ	0xFE8
  6528                           postdec1	equ	0xFE5
  6529                           plusw1	equ	0xFE3
  6530                           fsr1l	equ	0xFE1
  6531                           indf2	equ	0xFDF
  6532                           postinc2	equ	0xFDE
  6533                           postdec2	equ	0xFDD
  6534                           plusw2	equ	0xFDB
  6535                           fsr2h	equ	0xFDA
  6536                           fsr2l	equ	0xFD9
  6537                           status	equ	0xFD8
  6538                           
  6539 ;; *************** function ___lwdiv *****************
  6540 ;; Defined at:
  6541 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  dividend        2   37[COMRAM] unsigned int 
  6544 ;;  divisor         2   39[COMRAM] unsigned int 
  6545 ;; Auto vars:     Size  Location     Type
  6546 ;;  quotient        2   42[COMRAM] unsigned int 
  6547 ;;  counter         1   41[COMRAM] unsigned char 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  2   37[COMRAM] unsigned int 
  6550 ;; Registers used:
  6551 ;;		wreg, status,2, status,0
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;Total ram usage:        7 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    3
  6564 ;; This function calls:
  6565 ;;		Nothing
  6566 ;; This function is called by:
  6567 ;;		_TimeSetting
  6568 ;;		_CookTimeDisplay
  6569 ;;		_sprintf
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text41
  6574  002040                     __ptext41:
  6575                           	opt stack 0
  6576  002040                     ___lwdiv:
  6577                           	opt stack 26
  6578                           
  6579                           ;incstack = 0
  6580  002040  0E00               	movlw	0
  6581  002042  6E2C               	movwf	___lwdiv@quotient+1,c
  6582  002044  0E00               	movlw	0
  6583  002046  6E2B               	movwf	___lwdiv@quotient,c
  6584  002048  5028               	movf	___lwdiv@divisor,w,c
  6585  00204A  1029               	iorwf	___lwdiv@divisor+1,w,c
  6586  00204C  B4D8               	btfsc	status,2,c
  6587  00204E  D01C               	goto	l949
  6588  002050  0E01               	movlw	1
  6589  002052  6E2A               	movwf	___lwdiv@counter,c
  6590  002054  D004               	goto	l944
  6591  002056  90D8               	bcf	status,0,c
  6592  002058  3628               	rlcf	___lwdiv@divisor,f,c
  6593  00205A  3629               	rlcf	___lwdiv@divisor+1,f,c
  6594  00205C  2A2A               	incf	___lwdiv@counter,f,c
  6595  00205E                     l944:
  6596  00205E  AE29               	btfss	___lwdiv@divisor+1,7,c
  6597  002060  D7FA               	goto	l945
  6598  002062                     u1860:
  6599  002062  90D8               	bcf	status,0,c
  6600  002064  362B               	rlcf	___lwdiv@quotient,f,c
  6601  002066  362C               	rlcf	___lwdiv@quotient+1,f,c
  6602  002068  5028               	movf	___lwdiv@divisor,w,c
  6603  00206A  5C26               	subwf	___lwdiv@dividend,w,c
  6604  00206C  5029               	movf	___lwdiv@divisor+1,w,c
  6605  00206E  5827               	subwfb	___lwdiv@dividend+1,w,c
  6606  002070  A0D8               	btfss	status,0,c
  6607  002072  D005               	goto	l948
  6608  002074  5028               	movf	___lwdiv@divisor,w,c
  6609  002076  5E26               	subwf	___lwdiv@dividend,f,c
  6610  002078  5029               	movf	___lwdiv@divisor+1,w,c
  6611  00207A  5A27               	subwfb	___lwdiv@dividend+1,f,c
  6612  00207C  802B               	bsf	___lwdiv@quotient,0,c
  6613  00207E                     l948:
  6614  00207E  90D8               	bcf	status,0,c
  6615  002080  3229               	rrcf	___lwdiv@divisor+1,f,c
  6616  002082  3228               	rrcf	___lwdiv@divisor,f,c
  6617  002084  2E2A               	decfsz	___lwdiv@counter,f,c
  6618  002086  D7ED               	goto	u1860
  6619  002088                     l949:
  6620  002088  C02B  F026         	movff	___lwdiv@quotient,?___lwdiv
  6621  00208C  C02C  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6622  002090  0012               	return		;funcret
  6623  002092                     __end_of___lwdiv:
  6624                           	opt stack 0
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           intcon	equ	0xFF2
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           postdec1	equ	0xFE5
  6635                           plusw1	equ	0xFE3
  6636                           fsr1l	equ	0xFE1
  6637                           indf2	equ	0xFDF
  6638                           postinc2	equ	0xFDE
  6639                           postdec2	equ	0xFDD
  6640                           plusw2	equ	0xFDB
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _lcd_string *****************
  6646 ;; Defined at:
  6647 ;;		line 16 in file "lcd.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  x               2   40[COMRAM] PTR unsigned char 
  6650 ;;		 -> CookTimeDisplay@cookTimeContainer_1412(2), CookTimeDisplay@cookTimeContainer(1), CookTimeDisplay@minDisplay(4), 
      +CookTimeDisplay@nextMenu(7), 
  6651 ;;		 -> CookTimeDisplay@backMenu(6), CookTimeDisplay@setBakeTimeDisplay(10), BakeTempSet@bakeTempContainer(3), BakeTempS
      +et@nextMenu(6), 
  6652 ;;		 -> BakeTempSet@deliminator(6), BakeTempSet@setBakeTempDisplay(10), ReadRTCAndDisplay@bakeT(6), ReadRTCAndDisplay@de
      +liminator(2), 
  6653 ;;		 -> ReadRTCAndDisplay@time(5), ReadAndDisplaySecFromRTC@secondContainerDisplay_1361(2), ReadAndDisplaySecFromRTC@sec
      +ondContainerDisplay(1), ReadAndDisplayHrFromRTC@hourContainerDisplay_1355(2), 
  6654 ;;		 -> ReadAndDisplayHrFromRTC@hourContainerDisplay(1), ReadAndDisplayMinFromRTC@minContainerDisplay_1349(2), ReadAndDi
      +splayMinFromRTC@minContainerDisplay(1), TimeSetting@minContainer_1331(2), 
  6655 ;;		 -> TimeSetting@minContainer(1), TimeSetting@hourContainer_1327(2), TimeSetting@hourContainer(1), TimeSetting@next(6
      +), 
  6656 ;;		 -> TimeSetting@move(6), TimeSetting@setTimeDisplay(9), CheckCookDone@clear(6), CheckCookDone@bakeDone(11), 
  6657 ;;		 -> main@bakeTempContainer(4), main@baking(10), 
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;  i               2   42[COMRAM] int 
  6660 ;; Return value:  Size  Location     Type
  6661 ;;                  1    wreg      void 
  6662 ;; Registers used:
  6663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6669 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6672 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;Total ram usage:        4 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:    4
  6676 ;; This function calls:
  6677 ;;		_lcd_char
  6678 ;; This function is called by:
  6679 ;;		_main
  6680 ;;		_CheckCookDone
  6681 ;;		_TimeSetting
  6682 ;;		_ReadAndDisplayMinFromRTC
  6683 ;;		_ReadAndDisplayHrFromRTC
  6684 ;;		_ReadAndDisplaySecFromRTC
  6685 ;;		_ReadRTCAndDisplay
  6686 ;;		_BakeTempSet
  6687 ;;		_CookTimeDisplay
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text42
  6692  00229C                     __ptext42:
  6693                           	opt stack 0
  6694  00229C                     _lcd_string:
  6695                           	opt stack 26
  6696                           
  6697                           ;lcd.c: 18: int i = 0;
  6698                           
  6699                           ;incstack = 0
  6700  00229C  0E00               	movlw	0
  6701  00229E  6E2C               	movwf	lcd_string@i+1,c
  6702  0022A0  0E00               	movlw	0
  6703  0022A2  6E2B               	movwf	lcd_string@i,c
  6704                           
  6705                           ;lcd.c: 19: while(x[i] != 0)
  6706  0022A4  D00B               	goto	l305
  6707  0022A6                     
  6708                           ;lcd.c: 20: {
  6709                           ;lcd.c: 21: lcd_char(x[i]);
  6710  0022A6  502B               	movf	lcd_string@i,w,c
  6711  0022A8  2429               	addwf	lcd_string@x,w,c
  6712  0022AA  6ED9               	movwf	fsr2l,c
  6713  0022AC  502C               	movf	lcd_string@i+1,w,c
  6714  0022AE  202A               	addwfc	lcd_string@x+1,w,c
  6715  0022B0  6EDA               	movwf	fsr2h,c
  6716  0022B2  50DF               	movf	indf2,w,c
  6717  0022B4  EC08  F00C         	call	_lcd_char
  6718                           
  6719                           ;lcd.c: 22: i++;
  6720  0022B8  4A2B               	infsnz	lcd_string@i,f,c
  6721  0022BA  2A2C               	incf	lcd_string@i+1,f,c
  6722  0022BC                     l305:
  6723  0022BC  502B               	movf	lcd_string@i,w,c
  6724  0022BE  2429               	addwf	lcd_string@x,w,c
  6725  0022C0  6ED9               	movwf	fsr2l,c
  6726  0022C2  502C               	movf	lcd_string@i+1,w,c
  6727  0022C4  202A               	addwfc	lcd_string@x+1,w,c
  6728  0022C6  6EDA               	movwf	fsr2h,c
  6729  0022C8  50DF               	movf	indf2,w,c
  6730  0022CA  B4D8               	btfsc	status,2,c
  6731  0022CC  0012               	return	
  6732  0022CE  D7EB               	goto	l306
  6733  0022D0                     __end_of_lcd_string:
  6734                           	opt stack 0
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           intcon	equ	0xFF2
  6742                           postinc0	equ	0xFEE
  6743                           wreg	equ	0xFE8
  6744                           postdec1	equ	0xFE5
  6745                           plusw1	equ	0xFE3
  6746                           fsr1l	equ	0xFE1
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           plusw2	equ	0xFDB
  6751                           fsr2h	equ	0xFDA
  6752                           fsr2l	equ	0xFD9
  6753                           status	equ	0xFD8
  6754                           
  6755 ;; *************** function _lcd_char *****************
  6756 ;; Defined at:
  6757 ;;		line 86 in file "lcd.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;  x               1    wreg     unsigned char 
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;  x               1   39[COMRAM] unsigned char 
  6762 ;;  temp            1   38[COMRAM] unsigned char 
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  1    wreg      void 
  6765 ;; Registers used:
  6766 ;;		wreg, status,2, status,0, cstack
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;Total ram usage:        3 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; Hardware stack levels required when called:    3
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		_main
  6783 ;;		_lcd_string
  6784 ;;		_TimeSetting
  6785 ;;		_ReadAndDisplayMinFromRTC
  6786 ;;		_ReadAndDisplayHrFromRTC
  6787 ;;		_ReadAndDisplaySecFromRTC
  6788 ;;		_ReadRTCAndDisplay
  6789 ;;		_BakeTempSet
  6790 ;;		_CookTimeDisplay
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	text43
  6795  001810                     __ptext43:
  6796                           	opt stack 0
  6797  001810                     _lcd_char:
  6798                           	opt stack 26
  6799                           
  6800                           ;incstack = 0
  6801                           ;lcd_char@x stored from wreg
  6802  001810  6E28               	movwf	lcd_char@x,c
  6803                           
  6804                           ;lcd.c: 87: char temp;
  6805                           ;lcd.c: 88: TRISAbits.TRISA0 = 0;
  6806  001812  9092               	bcf	3986,0,c	;volatile
  6807                           
  6808                           ;lcd.c: 89: TRISAbits.TRISA1 = 0;
  6809  001814  9292               	bcf	3986,1,c	;volatile
  6810                           
  6811                           ;lcd.c: 90: TRISAbits.TRISA2 = 0;
  6812  001816  9492               	bcf	3986,2,c	;volatile
  6813                           
  6814                           ;lcd.c: 91: TRISAbits.TRISA3 = 0;
  6815  001818  9692               	bcf	3986,3,c	;volatile
  6816                           
  6817                           ;lcd.c: 92: TRISAbits.TRISA4 = 0;
  6818  00181A  9892               	bcf	3986,4,c	;volatile
  6819                           
  6820                           ;lcd.c: 93: TRISAbits.TRISA7 = 0;
  6821  00181C  9E92               	bcf	3986,7,c	;volatile
  6822                           
  6823                           ;lcd.c: 94: temp = x;
  6824  00181E  C028  F027         	movff	lcd_char@x,lcd_char@temp
  6825                           
  6826                           ;lcd.c: 95: PORTA = 0x10;
  6827  001822  0E10               	movlw	16
  6828  001824  6E80               	movwf	3968,c	;volatile
  6829                           
  6830                           ;lcd.c: 96: _delay((unsigned long)((1)*(8000000/4000.0)));
  6831  001826  0E03               	movlw	3
  6832  001828  6E26               	movwf	??_lcd_char& (0+255),c
  6833  00182A  0E98               	movlw	152
  6834  00182C                     u2617:
  6835  00182C  2EE8               	decfsz	wreg,f,c
  6836  00182E  D7FE               	bra	u2617
  6837  001830  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6838  001832  D7FC               	bra	u2617
  6839                           
  6840                           ;lcd.c: 97: x = x >>4;
  6841  001834  3828               	swapf	lcd_char@x,w,c
  6842  001836  0B0F               	andlw	15
  6843  001838  6E28               	movwf	lcd_char@x,c
  6844                           
  6845                           ;lcd.c: 98: x = x & 0xF;
  6846  00183A  5028               	movf	lcd_char@x,w,c
  6847  00183C  0B0F               	andlw	15
  6848  00183E  6E28               	movwf	lcd_char@x,c
  6849                           
  6850                           ;lcd.c: 99: x = x | 0x90;
  6851  001840  5028               	movf	lcd_char@x,w,c
  6852  001842  0990               	iorlw	144
  6853  001844  6E28               	movwf	lcd_char@x,c
  6854                           
  6855                           ;lcd.c: 100: PORTA = x;
  6856  001846  C028  FF80         	movff	lcd_char@x,3968	;volatile
  6857                           
  6858                           ;lcd.c: 101: _delay((unsigned long)((1)*(8000000/4000.0)));
  6859  00184A  0E03               	movlw	3
  6860  00184C  6E26               	movwf	??_lcd_char& (0+255),c
  6861  00184E  0E98               	movlw	152
  6862  001850                     u2627:
  6863  001850  2EE8               	decfsz	wreg,f,c
  6864  001852  D7FE               	bra	u2627
  6865  001854  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6866  001856  D7FC               	bra	u2627
  6867                           
  6868                           ;lcd.c: 102: x = x & 0x1F;
  6869  001858  5028               	movf	lcd_char@x,w,c
  6870  00185A  0B1F               	andlw	31
  6871  00185C  6E28               	movwf	lcd_char@x,c
  6872                           
  6873                           ;lcd.c: 103: PORTA = x;
  6874  00185E  C028  FF80         	movff	lcd_char@x,3968	;volatile
  6875                           
  6876                           ;lcd.c: 104: _delay((unsigned long)((1)*(8000000/4000.0)));
  6877  001862  0E03               	movlw	3
  6878  001864  6E26               	movwf	??_lcd_char& (0+255),c
  6879  001866  0E98               	movlw	152
  6880  001868                     u2637:
  6881  001868  2EE8               	decfsz	wreg,f,c
  6882  00186A  D7FE               	bra	u2637
  6883  00186C  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6884  00186E  D7FC               	bra	u2637
  6885                           
  6886                           ;lcd.c: 105: PORTA = 0x10;
  6887  001870  0E10               	movlw	16
  6888  001872  6E80               	movwf	3968,c	;volatile
  6889                           
  6890                           ;lcd.c: 106: _delay((unsigned long)((1)*(8000000/4000.0)));
  6891  001874  0E03               	movlw	3
  6892  001876  6E26               	movwf	??_lcd_char& (0+255),c
  6893  001878  0E98               	movlw	152
  6894  00187A                     u2647:
  6895  00187A  2EE8               	decfsz	wreg,f,c
  6896  00187C  D7FE               	bra	u2647
  6897  00187E  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6898  001880  D7FC               	bra	u2647
  6899                           
  6900                           ;lcd.c: 107: x = temp;
  6901  001882  C027  F028         	movff	lcd_char@temp,lcd_char@x
  6902                           
  6903                           ;lcd.c: 108: x = x & 0xF;
  6904  001886  5028               	movf	lcd_char@x,w,c
  6905  001888  0B0F               	andlw	15
  6906  00188A  6E28               	movwf	lcd_char@x,c
  6907                           
  6908                           ;lcd.c: 109: x = x | 0x90;
  6909  00188C  5028               	movf	lcd_char@x,w,c
  6910  00188E  0990               	iorlw	144
  6911  001890  6E28               	movwf	lcd_char@x,c
  6912                           
  6913                           ;lcd.c: 110: PORTA = x;
  6914  001892  C028  FF80         	movff	lcd_char@x,3968	;volatile
  6915                           
  6916                           ;lcd.c: 111: _delay((unsigned long)((1)*(8000000/4000.0)));
  6917  001896  0E03               	movlw	3
  6918  001898  6E26               	movwf	??_lcd_char& (0+255),c
  6919  00189A  0E98               	movlw	152
  6920  00189C                     u2657:
  6921  00189C  2EE8               	decfsz	wreg,f,c
  6922  00189E  D7FE               	bra	u2657
  6923  0018A0  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6924  0018A2  D7FC               	bra	u2657
  6925                           
  6926                           ;lcd.c: 112: x = x & 0x1F;
  6927  0018A4  5028               	movf	lcd_char@x,w,c
  6928  0018A6  0B1F               	andlw	31
  6929  0018A8  6E28               	movwf	lcd_char@x,c
  6930                           
  6931                           ;lcd.c: 113: PORTA = x;
  6932  0018AA  C028  FF80         	movff	lcd_char@x,3968	;volatile
  6933                           
  6934                           ;lcd.c: 114: _delay((unsigned long)((1)*(8000000/4000.0)));
  6935  0018AE  0E03               	movlw	3
  6936  0018B0  6E26               	movwf	??_lcd_char& (0+255),c
  6937  0018B2  0E98               	movlw	152
  6938  0018B4                     u2667:
  6939  0018B4  2EE8               	decfsz	wreg,f,c
  6940  0018B6  D7FE               	bra	u2667
  6941  0018B8  2E26               	decfsz	??_lcd_char& (0+255),f,c
  6942  0018BA  D7FC               	bra	u2667
  6943  0018BC  0012               	return		;funcret
  6944  0018BE                     __end_of_lcd_char:
  6945                           	opt stack 0
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           intcon	equ	0xFF2
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           postdec1	equ	0xFE5
  6956                           plusw1	equ	0xFE3
  6957                           fsr1l	equ	0xFE1
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           plusw2	equ	0xFDB
  6962                           fsr2h	equ	0xFDA
  6963                           fsr2l	equ	0xFD9
  6964                           status	equ	0xFD8
  6965                           
  6966 ;; *************** function _lcd_command *****************
  6967 ;; Defined at:
  6968 ;;		line 35 in file "lcd.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;  x               1    wreg     unsigned char 
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  x               1   39[COMRAM] unsigned char 
  6973 ;;  temp            1   38[COMRAM] unsigned char 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;                  1    wreg      void 
  6976 ;; Registers used:
  6977 ;;		wreg, status,2, status,0, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;Total ram usage:        3 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    3
  6990 ;; This function calls:
  6991 ;;		Nothing
  6992 ;; This function is called by:
  6993 ;;		_main
  6994 ;;		_CheckCookDone
  6995 ;;		_lcd_init
  6996 ;;		_lcd_shiftRight
  6997 ;;		_lcd_clear
  6998 ;;		_TimeSetting
  6999 ;;		_ReadAndDisplayMinFromRTC
  7000 ;;		_ReadAndDisplayHrFromRTC
  7001 ;;		_ReadAndDisplaySecFromRTC
  7002 ;;		_ReadRTCAndDisplay
  7003 ;;		_BakeTempSet
  7004 ;;		_CookTimeDisplay
  7005 ;;		_lcd_shiftLeft
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text44
  7010  0018BE                     __ptext44:
  7011                           	opt stack 0
  7012  0018BE                     _lcd_command:
  7013                           	opt stack 26
  7014                           
  7015                           ;incstack = 0
  7016                           ;lcd_command@x stored from wreg
  7017  0018BE  6E28               	movwf	lcd_command@x,c
  7018                           
  7019                           ;lcd.c: 37: char temp;
  7020                           ;lcd.c: 39: TRISAbits.TRISA0 = 0;
  7021  0018C0  9092               	bcf	3986,0,c	;volatile
  7022                           
  7023                           ;lcd.c: 40: TRISAbits.TRISA1 = 0;
  7024  0018C2  9292               	bcf	3986,1,c	;volatile
  7025                           
  7026                           ;lcd.c: 41: TRISAbits.TRISA2 = 0;
  7027  0018C4  9492               	bcf	3986,2,c	;volatile
  7028                           
  7029                           ;lcd.c: 42: TRISAbits.TRISA3 = 0;
  7030  0018C6  9692               	bcf	3986,3,c	;volatile
  7031                           
  7032                           ;lcd.c: 43: TRISAbits.TRISA4 = 0;
  7033  0018C8  9892               	bcf	3986,4,c	;volatile
  7034                           
  7035                           ;lcd.c: 44: TRISAbits.TRISA7 = 0;
  7036  0018CA  9E92               	bcf	3986,7,c	;volatile
  7037                           
  7038                           ;lcd.c: 46: temp = x;
  7039  0018CC  C028  F027         	movff	lcd_command@x,lcd_command@temp
  7040                           
  7041                           ;lcd.c: 48: PORTA = 0;
  7042  0018D0  0E00               	movlw	0
  7043  0018D2  6E80               	movwf	3968,c	;volatile
  7044                           
  7045                           ;lcd.c: 49: _delay((unsigned long)((5)*(8000000/4000.0)));
  7046  0018D4  0E0D               	movlw	13
  7047  0018D6  6E26               	movwf	??_lcd_command& (0+255),c
  7048  0018D8  0EFC               	movlw	252
  7049  0018DA                     u2677:
  7050  0018DA  2EE8               	decfsz	wreg,f,c
  7051  0018DC  D7FE               	bra	u2677
  7052  0018DE  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7053  0018E0  D7FC               	bra	u2677
  7054                           
  7055                           ;lcd.c: 50: x = x >>4;
  7056  0018E2  3828               	swapf	lcd_command@x,w,c
  7057  0018E4  0B0F               	andlw	15
  7058  0018E6  6E28               	movwf	lcd_command@x,c
  7059                           
  7060                           ;lcd.c: 51: x = x & 0xF;
  7061  0018E8  5028               	movf	lcd_command@x,w,c
  7062  0018EA  0B0F               	andlw	15
  7063  0018EC  6E28               	movwf	lcd_command@x,c
  7064                           
  7065                           ;lcd.c: 52: x = x | 0x80;
  7066  0018EE  5028               	movf	lcd_command@x,w,c
  7067  0018F0  0980               	iorlw	128
  7068  0018F2  6E28               	movwf	lcd_command@x,c
  7069                           
  7070                           ;lcd.c: 53: PORTA = x;
  7071  0018F4  C028  FF80         	movff	lcd_command@x,3968	;volatile
  7072                           
  7073                           ;lcd.c: 54: _delay((unsigned long)((5)*(8000000/4000.0)));
  7074  0018F8  0E0D               	movlw	13
  7075  0018FA  6E26               	movwf	??_lcd_command& (0+255),c
  7076  0018FC  0EFC               	movlw	252
  7077  0018FE                     u2687:
  7078  0018FE  2EE8               	decfsz	wreg,f,c
  7079  001900  D7FE               	bra	u2687
  7080  001902  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7081  001904  D7FC               	bra	u2687
  7082                           
  7083                           ;lcd.c: 55: x = x & 0xF;
  7084  001906  5028               	movf	lcd_command@x,w,c
  7085  001908  0B0F               	andlw	15
  7086  00190A  6E28               	movwf	lcd_command@x,c
  7087                           
  7088                           ;lcd.c: 56: PORTA = x;
  7089  00190C  C028  FF80         	movff	lcd_command@x,3968	;volatile
  7090                           
  7091                           ;lcd.c: 57: _delay((unsigned long)((5)*(8000000/4000.0)));
  7092  001910  0E0D               	movlw	13
  7093  001912  6E26               	movwf	??_lcd_command& (0+255),c
  7094  001914  0EFC               	movlw	252
  7095  001916                     u2697:
  7096  001916  2EE8               	decfsz	wreg,f,c
  7097  001918  D7FE               	bra	u2697
  7098  00191A  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7099  00191C  D7FC               	bra	u2697
  7100                           
  7101                           ;lcd.c: 58: PORTA = 0;
  7102  00191E  0E00               	movlw	0
  7103  001920  6E80               	movwf	3968,c	;volatile
  7104                           
  7105                           ;lcd.c: 59: _delay((unsigned long)((5)*(8000000/4000.0)));
  7106  001922  0E0D               	movlw	13
  7107  001924  6E26               	movwf	??_lcd_command& (0+255),c
  7108  001926  0EFC               	movlw	252
  7109  001928                     u2707:
  7110  001928  2EE8               	decfsz	wreg,f,c
  7111  00192A  D7FE               	bra	u2707
  7112  00192C  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7113  00192E  D7FC               	bra	u2707
  7114                           
  7115                           ;lcd.c: 61: x = temp;
  7116  001930  C027  F028         	movff	lcd_command@temp,lcd_command@x
  7117                           
  7118                           ;lcd.c: 62: x = x & 0xF;
  7119  001934  5028               	movf	lcd_command@x,w,c
  7120  001936  0B0F               	andlw	15
  7121  001938  6E28               	movwf	lcd_command@x,c
  7122                           
  7123                           ;lcd.c: 63: x = x | 0x80;
  7124  00193A  5028               	movf	lcd_command@x,w,c
  7125  00193C  0980               	iorlw	128
  7126  00193E  6E28               	movwf	lcd_command@x,c
  7127                           
  7128                           ;lcd.c: 64: PORTA = x;
  7129  001940  C028  FF80         	movff	lcd_command@x,3968	;volatile
  7130                           
  7131                           ;lcd.c: 65: _delay((unsigned long)((5)*(8000000/4000.0)));
  7132  001944  0E0D               	movlw	13
  7133  001946  6E26               	movwf	??_lcd_command& (0+255),c
  7134  001948  0EFC               	movlw	252
  7135  00194A                     u2717:
  7136  00194A  2EE8               	decfsz	wreg,f,c
  7137  00194C  D7FE               	bra	u2717
  7138  00194E  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7139  001950  D7FC               	bra	u2717
  7140                           
  7141                           ;lcd.c: 66: x = x & 0xF;
  7142  001952  5028               	movf	lcd_command@x,w,c
  7143  001954  0B0F               	andlw	15
  7144  001956  6E28               	movwf	lcd_command@x,c
  7145                           
  7146                           ;lcd.c: 67: PORTA = x;
  7147  001958  C028  FF80         	movff	lcd_command@x,3968	;volatile
  7148                           
  7149                           ;lcd.c: 68: _delay((unsigned long)((5)*(8000000/4000.0)));
  7150  00195C  0E0D               	movlw	13
  7151  00195E  6E26               	movwf	??_lcd_command& (0+255),c
  7152  001960  0EFC               	movlw	252
  7153  001962                     u2727:
  7154  001962  2EE8               	decfsz	wreg,f,c
  7155  001964  D7FE               	bra	u2727
  7156  001966  2E26               	decfsz	??_lcd_command& (0+255),f,c
  7157  001968  D7FC               	bra	u2727
  7158  00196A  0012               	return		;funcret
  7159  00196C                     __end_of_lcd_command:
  7160                           	opt stack 0
  7161                           tblptru	equ	0xFF8
  7162                           tblptrh	equ	0xFF7
  7163                           tblptrl	equ	0xFF6
  7164                           tablat	equ	0xFF5
  7165                           prodh	equ	0xFF4
  7166                           prodl	equ	0xFF3
  7167                           intcon	equ	0xFF2
  7168                           postinc0	equ	0xFEE
  7169                           wreg	equ	0xFE8
  7170                           postdec1	equ	0xFE5
  7171                           plusw1	equ	0xFE3
  7172                           fsr1l	equ	0xFE1
  7173                           indf2	equ	0xFDF
  7174                           postinc2	equ	0xFDE
  7175                           postdec2	equ	0xFDD
  7176                           plusw2	equ	0xFDB
  7177                           fsr2h	equ	0xFDA
  7178                           fsr2l	equ	0xFD9
  7179                           status	equ	0xFD8
  7180                           
  7181 ;; *************** function _AdcInit *****************
  7182 ;; Defined at:
  7183 ;;		line 16 in file "adc.c"
  7184 ;; Parameters:    Size  Location     Type
  7185 ;;		None
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;		None
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  1    wreg      void 
  7190 ;; Registers used:
  7191 ;;		wreg, status,2
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7201 ;;Total ram usage:        0 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:    3
  7204 ;; This function calls:
  7205 ;;		Nothing
  7206 ;; This function is called by:
  7207 ;;		_main
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           	psect	text45
  7212  002518                     __ptext45:
  7213                           	opt stack 0
  7214  002518                     _AdcInit:
  7215                           	opt stack 27
  7216                           
  7217                           ;adc.c: 18: ADCON2 = 0b10100101;
  7218                           
  7219                           ;incstack = 0
  7220  002518  0EA5               	movlw	165
  7221  00251A  6EC0               	movwf	4032,c	;volatile
  7222  00251C  0012               	return		;funcret
  7223  00251E                     __end_of_AdcInit:
  7224                           	opt stack 0
  7225                           tblptru	equ	0xFF8
  7226                           tblptrh	equ	0xFF7
  7227                           tblptrl	equ	0xFF6
  7228                           tablat	equ	0xFF5
  7229                           prodh	equ	0xFF4
  7230                           prodl	equ	0xFF3
  7231                           intcon	equ	0xFF2
  7232                           postinc0	equ	0xFEE
  7233                           wreg	equ	0xFE8
  7234                           postdec1	equ	0xFE5
  7235                           plusw1	equ	0xFE3
  7236                           fsr1l	equ	0xFE1
  7237                           indf2	equ	0xFDF
  7238                           postinc2	equ	0xFDE
  7239                           postdec2	equ	0xFDD
  7240                           plusw2	equ	0xFDB
  7241                           fsr2h	equ	0xFDA
  7242                           fsr2l	equ	0xFD9
  7243                           status	equ	0xFD8
  7244                           
  7245 ;; *************** function _ISR *****************
  7246 ;; Defined at:
  7247 ;;		line 349 in file "main.c"
  7248 ;; Parameters:    Size  Location     Type
  7249 ;;		None
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;		None
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  1    wreg      void 
  7254 ;; Registers used:
  7255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7256 ;; Tracked objects:
  7257 ;;		On entry : 0/0
  7258 ;;		On exit  : 0/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;Total ram usage:       18 bytes
  7266 ;; Hardware stack levels used:    1
  7267 ;; Hardware stack levels required when called:    2
  7268 ;; This function calls:
  7269 ;;		_AdcRead
  7270 ;;		i2_WriteToDac
  7271 ;;		i2___lwdiv
  7272 ;; This function is called by:
  7273 ;;		Interrupt level 2
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           	psect	intcode
  7278  000008                     __pintcode:
  7279                           	opt stack 0
  7280  000008                     _ISR:
  7281                           	opt stack 23
  7282                           
  7283                           ;incstack = 0
  7284  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7285  00000A  CFFA F014          	movff	pclath,??_ISR
  7286  00000E  CFFB F015          	movff	pclatu,??_ISR+1
  7287  000012  CFE9 F016          	movff	fsr0l,??_ISR+2
  7288  000016  CFEA F017          	movff	fsr0h,??_ISR+3
  7289  00001A  CFE1 F018          	movff	fsr1l,??_ISR+4
  7290  00001E  CFE2 F019          	movff	fsr1h,??_ISR+5
  7291  000022  CFD9 F01A          	movff	fsr2l,??_ISR+6
  7292  000026  CFDA F01B          	movff	fsr2h,??_ISR+7
  7293  00002A  CFF3 F01C          	movff	prodl,??_ISR+8
  7294  00002E  CFF4 F01D          	movff	prodh,??_ISR+9
  7295  000032  CFF6 F01E          	movff	tblptrl,??_ISR+10
  7296  000036  CFF7 F01F          	movff	tblptrh,??_ISR+11
  7297  00003A  CFF8 F020          	movff	tblptru,??_ISR+12
  7298  00003E  CFF5 F021          	movff	tablat,??_ISR+13
  7299  000042  C05A  F022         	movff	btemp,??_ISR+14
  7300  000046  C05B  F023         	movff	btemp+1,??_ISR+15
  7301  00004A  C05C  F024         	movff	btemp+2,??_ISR+16
  7302  00004E  C05D  F025         	movff	btemp+3,??_ISR+17
  7303                           
  7304                           ;main.c: 351: if(TMR2IF)
  7305  000052  A29E               	btfss	3998,1,c	;volatile
  7306  000054  D043               	goto	i2l176
  7307                           
  7308                           ;main.c: 352: {
  7309                           ;main.c: 353: if(sineOut)
  7310  000056  5049               	movf	_sineOut,w,c	;volatile
  7311  000058  B4D8               	btfsc	status,2,c
  7312  00005A  D023               	goto	i2l177
  7313                           
  7314                           ;main.c: 354: {
  7315                           ;main.c: 356: LATCbits.LATC1 = 1;
  7316  00005C  828B               	bsf	3979,1,c	;volatile
  7317                           
  7318                           ;main.c: 358: if(iterator >= 64)
  7319  00005E  0E3F               	movlw	63
  7320  000060  6448               	cpfsgt	_iterator,c	;volatile
  7321  000062  D002               	goto	i2l178
  7322                           
  7323                           ;main.c: 359: {
  7324                           ;main.c: 360: iterator = 0;
  7325  000064  0E00               	movlw	0
  7326  000066  6E48               	movwf	_iterator,c	;volatile
  7327  000068                     i2l178:
  7328                           
  7329                           ;main.c: 361: }
  7330                           ;main.c: 363: WriteToDac(ptr[iterator]/amplitudeDivision, 0);
  7331  000068  5048               	movf	_iterator,w,c	;volatile
  7332  00006A  0D02               	mullw	2
  7333  00006C  50F3               	movf	prodl,w,c
  7334  00006E  243D               	addwf	_ptr,w,c
  7335  000070  6ED9               	movwf	fsr2l,c
  7336  000072  50F4               	movf	prodh,w,c
  7337  000074  203E               	addwfc	_ptr+1,w,c
  7338  000076  6EDA               	movwf	fsr2h,c
  7339  000078  CFDE F001          	movff	postinc2,i2___lwdiv@dividend
  7340  00007C  CFDD F002          	movff	postdec2,i2___lwdiv@dividend+1
  7341  000080  C03B  F003         	movff	_amplitudeDivision,i2___lwdiv@divisor
  7342  000084  C03C  F004         	movff	_amplitudeDivision+1,i2___lwdiv@divisor+1
  7343  000088  EC49  F010         	call	i2___lwdiv	;wreg free
  7344  00008C  C001  F008         	movff	?i2___lwdiv,i2WriteToDac@data
  7345  000090  C002  F009         	movff	?i2___lwdiv+1,i2WriteToDac@data+1
  7346  000094  0E00               	movlw	0
  7347  000096  6E0B               	movwf	i2WriteToDac@frequency+1,c
  7348  000098  0E00               	movlw	0
  7349  00009A  6E0A               	movwf	i2WriteToDac@frequency,c
  7350  00009C  ECB8  F010         	call	i2_WriteToDac	;wreg free
  7351                           
  7352                           ;main.c: 365: iterator++;
  7353  0000A0  2A48               	incf	_iterator,f,c	;volatile
  7354  0000A2                     i2l177:
  7355                           
  7356                           ;main.c: 366: }
  7357                           ;main.c: 368: if(!sineOut)
  7358  0000A2  5049               	movf	_sineOut,w,c	;volatile
  7359  0000A4  A4D8               	btfss	status,2,c
  7360  0000A6  D019               	goto	i2l180
  7361                           
  7362                           ;main.c: 369: {
  7363                           ;main.c: 371: ADCON1bits.PCFG = 0b0000;
  7364  0000A8  90C1               	bcf	4033,0,c	;volatile
  7365  0000AA  92C1               	bcf	4033,1,c	;volatile
  7366  0000AC  94C1               	bcf	4033,2,c	;volatile
  7367  0000AE  96C1               	bcf	4033,3,c	;volatile
  7368                           
  7369                           ;main.c: 372: readADCInput = AdcRead(0x0C);
  7370  0000B0  0E0C               	movlw	12
  7371  0000B2  ECAE  F011         	call	_AdcRead
  7372  0000B6  C001  F1BA         	movff	?_AdcRead,_readADCInput	;volatile
  7373  0000BA  C002  F1BB         	movff	?_AdcRead+1,_readADCInput+1	;volatile
  7374                           
  7375                           ;main.c: 373: readBakeTempADC = AdcRead(0x0A);
  7376  0000BE  0E0A               	movlw	10
  7377  0000C0  ECAE  F011         	call	_AdcRead
  7378  0000C4  C001  F1B8         	movff	?_AdcRead,_readBakeTempADC	;volatile
  7379  0000C8  C002  F1B9         	movff	?_AdcRead+1,_readBakeTempADC+1	;volatile
  7380                           
  7381                           ;main.c: 374: ADCON1bits.PCFG = 0b1111;
  7382  0000CC  80C1               	bsf	4033,0,c	;volatile
  7383  0000CE  82C1               	bsf	4033,1,c	;volatile
  7384  0000D0  84C1               	bsf	4033,2,c	;volatile
  7385  0000D2  86C1               	bsf	4033,3,c	;volatile
  7386                           
  7387                           ;main.c: 376: if(alarmSet)
  7388  0000D4  504A               	movf	_alarmSet,w,c	;volatile
  7389  0000D6  A4D8               	btfss	status,2,c
  7390                           
  7391                           ;main.c: 377: {
  7392                           ;main.c: 378: LATDbits.LATD1 ^= 1;
  7393  0000D8  728C               	btg	3980,1,c	;volatile
  7394  0000DA                     i2l180:
  7395                           
  7396                           ;main.c: 379: }
  7397                           ;main.c: 380: }
  7398                           ;main.c: 382: TMR2IF = 0;
  7399  0000DA  929E               	bcf	3998,1,c	;volatile
  7400  0000DC                     i2l176:
  7401  0000DC  C025  F05D         	movff	??_ISR+17,btemp+3
  7402  0000E0  C024  F05C         	movff	??_ISR+16,btemp+2
  7403  0000E4  C023  F05B         	movff	??_ISR+15,btemp+1
  7404  0000E8  C022  F05A         	movff	??_ISR+14,btemp
  7405  0000EC  C021  FFF5         	movff	??_ISR+13,tablat
  7406  0000F0  C020  FFF8         	movff	??_ISR+12,tblptru
  7407  0000F4  C01F  FFF7         	movff	??_ISR+11,tblptrh
  7408  0000F8  C01E  FFF6         	movff	??_ISR+10,tblptrl
  7409  0000FC  C01D  FFF4         	movff	??_ISR+9,prodh
  7410  000100  C01C  FFF3         	movff	??_ISR+8,prodl
  7411  000104  C01B  FFDA         	movff	??_ISR+7,fsr2h
  7412  000108  C01A  FFD9         	movff	??_ISR+6,fsr2l
  7413  00010C  C019  FFE2         	movff	??_ISR+5,fsr1h
  7414  000110  C018  FFE1         	movff	??_ISR+4,fsr1l
  7415  000114  C017  FFEA         	movff	??_ISR+3,fsr0h
  7416  000118  C016  FFE9         	movff	??_ISR+2,fsr0l
  7417  00011C  C015  FFFB         	movff	??_ISR+1,pclatu
  7418  000120  C014  FFFA         	movff	??_ISR,pclath
  7419  000124  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7420  000126  0011               	retfie		f
  7421  000128                     __end_of_ISR:
  7422                           	opt stack 0
  7423                           pclatu	equ	0xFFB
  7424                           pclath	equ	0xFFA
  7425                           tblptru	equ	0xFF8
  7426                           tblptrh	equ	0xFF7
  7427                           tblptrl	equ	0xFF6
  7428                           tablat	equ	0xFF5
  7429                           prodh	equ	0xFF4
  7430                           prodl	equ	0xFF3
  7431                           intcon	equ	0xFF2
  7432                           postinc0	equ	0xFEE
  7433                           fsr0h	equ	0xFEA
  7434                           fsr0l	equ	0xFE9
  7435                           wreg	equ	0xFE8
  7436                           postdec1	equ	0xFE5
  7437                           plusw1	equ	0xFE3
  7438                           fsr1h	equ	0xFE2
  7439                           fsr1l	equ	0xFE1
  7440                           indf2	equ	0xFDF
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           plusw2	equ	0xFDB
  7444                           fsr2h	equ	0xFDA
  7445                           fsr2l	equ	0xFD9
  7446                           status	equ	0xFD8
  7447                           
  7448 ;; *************** function i2___lwdiv *****************
  7449 ;; Defined at:
  7450 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  dividend        2    0[COMRAM] unsigned int 
  7453 ;;  divisor         2    2[COMRAM] unsigned int 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7456 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  2    0[COMRAM] unsigned int 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;Total ram usage:        7 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_ISR
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           	psect	text47
  7480  002092                     __ptext47:
  7481                           	opt stack 0
  7482  002092                     i2___lwdiv:
  7483                           	opt stack 24
  7484                           
  7485                           ;incstack = 0
  7486  002092  0E00               	movlw	0
  7487  002094  6E06               	movwf	i2___lwdiv@quotient+1,c
  7488  002096  0E00               	movlw	0
  7489  002098  6E05               	movwf	i2___lwdiv@quotient,c
  7490  00209A  5003               	movf	i2___lwdiv@divisor,w,c
  7491  00209C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7492  00209E  B4D8               	btfsc	status,2,c
  7493  0020A0  D01C               	goto	i2l949
  7494  0020A2  0E01               	movlw	1
  7495  0020A4  6E07               	movwf	i2___lwdiv@counter,c
  7496  0020A6  D004               	goto	i2l944
  7497  0020A8  90D8               	bcf	status,0,c
  7498  0020AA  3603               	rlcf	i2___lwdiv@divisor,f,c
  7499  0020AC  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7500  0020AE  2A07               	incf	i2___lwdiv@counter,f,c
  7501  0020B0                     i2l944:
  7502  0020B0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7503  0020B2  D7FA               	goto	i2l945
  7504  0020B4                     i2u164_40:
  7505  0020B4  90D8               	bcf	status,0,c
  7506  0020B6  3605               	rlcf	i2___lwdiv@quotient,f,c
  7507  0020B8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7508  0020BA  5003               	movf	i2___lwdiv@divisor,w,c
  7509  0020BC  5C01               	subwf	i2___lwdiv@dividend,w,c
  7510  0020BE  5004               	movf	i2___lwdiv@divisor+1,w,c
  7511  0020C0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7512  0020C2  A0D8               	btfss	status,0,c
  7513  0020C4  D005               	goto	i2l948
  7514  0020C6  5003               	movf	i2___lwdiv@divisor,w,c
  7515  0020C8  5E01               	subwf	i2___lwdiv@dividend,f,c
  7516  0020CA  5004               	movf	i2___lwdiv@divisor+1,w,c
  7517  0020CC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7518  0020CE  8005               	bsf	i2___lwdiv@quotient,0,c
  7519  0020D0                     i2l948:
  7520  0020D0  90D8               	bcf	status,0,c
  7521  0020D2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7522  0020D4  3203               	rrcf	i2___lwdiv@divisor,f,c
  7523  0020D6  2E07               	decfsz	i2___lwdiv@counter,f,c
  7524  0020D8  D7ED               	goto	i2u164_40
  7525  0020DA                     i2l949:
  7526  0020DA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7527  0020DE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7528  0020E2  0012               	return		;funcret
  7529  0020E4                     __end_ofi2___lwdiv:
  7530                           	opt stack 0
  7531                           pclatu	equ	0xFFB
  7532                           pclath	equ	0xFFA
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           postinc0	equ	0xFEE
  7541                           fsr0h	equ	0xFEA
  7542                           fsr0l	equ	0xFE9
  7543                           wreg	equ	0xFE8
  7544                           postdec1	equ	0xFE5
  7545                           plusw1	equ	0xFE3
  7546                           fsr1h	equ	0xFE2
  7547                           fsr1l	equ	0xFE1
  7548                           indf2	equ	0xFDF
  7549                           postinc2	equ	0xFDE
  7550                           postdec2	equ	0xFDD
  7551                           plusw2	equ	0xFDB
  7552                           fsr2h	equ	0xFDA
  7553                           fsr2l	equ	0xFD9
  7554                           status	equ	0xFD8
  7555                           
  7556 ;; *************** function i2_WriteToDac *****************
  7557 ;; Defined at:
  7558 ;;		line 61 in file "spi.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;  data            2    7[COMRAM] unsigned int 
  7561 ;;  frequency       2    9[COMRAM] unsigned int 
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;  WriteToDac      2   17[COMRAM] unsigned int 
  7564 ;;  WriteToDac      2   13[COMRAM] unsigned int 
  7565 ;;  WriteToDac      1   16[COMRAM] unsigned char 
  7566 ;;  WriteToDac      1   15[COMRAM] unsigned char 
  7567 ;; Return value:  Size  Location     Type
  7568 ;;                  1    wreg      void 
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0, cstack
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7576 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;Total ram usage:       12 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    1
  7583 ;; This function calls:
  7584 ;;		i2_WriteSpi
  7585 ;; This function is called by:
  7586 ;;		_ISR
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text48
  7591  002170                     __ptext48:
  7592                           	opt stack 0
  7593  002170                     i2_WriteToDac:
  7594                           	opt stack 23
  7595                           
  7596                           ;spi.c: 62: TRISCbits.TRISC2 = 0;
  7597                           
  7598                           ;incstack = 0
  7599  002170  9494               	bcf	3988,2,c	;volatile
  7600                           
  7601                           ;spi.c: 64: PORTCbits.RC2 = 0;
  7602  002172  9482               	bcf	3970,2,c	;volatile
  7603                           
  7604                           ;spi.c: 66: uint16_t command = 0xF000;
  7605  002174  0EF0               	movlw	240
  7606  002176  6E0F               	movwf	i2WriteToDac@command+1,c
  7607  002178  0E00               	movlw	0
  7608  00217A  6E0E               	movwf	i2WriteToDac@command,c
  7609                           
  7610                           ;spi.c: 68: uint16_t output = command |(data<<2);
  7611  00217C  C008  F00C         	movff	i2WriteToDac@data,??i2_WriteToDac
  7612  002180  C009  F00D         	movff	i2WriteToDac@data+1,??i2_WriteToDac+1
  7613  002184  90D8               	bcf	status,0,c
  7614  002186  360C               	rlcf	??i2_WriteToDac,f,c
  7615  002188  360D               	rlcf	??i2_WriteToDac+1,f,c
  7616  00218A  90D8               	bcf	status,0,c
  7617  00218C  360C               	rlcf	??i2_WriteToDac,f,c
  7618  00218E  360D               	rlcf	??i2_WriteToDac+1,f,c
  7619  002190  500E               	movf	i2WriteToDac@command,w,c
  7620  002192  100C               	iorwf	??i2_WriteToDac,w,c
  7621  002194  6E12               	movwf	i2WriteToDac@output,c
  7622  002196  500F               	movf	i2WriteToDac@command+1,w,c
  7623  002198  100D               	iorwf	??i2_WriteToDac+1,w,c
  7624  00219A  6E13               	movwf	i2WriteToDac@output+1,c
  7625                           
  7626                           ;spi.c: 70: uint8_t high = (uint8_t)(output>>8);
  7627  00219C  5013               	movf	i2WriteToDac@output+1,w,c
  7628  00219E  6E10               	movwf	i2WriteToDac@high,c
  7629                           
  7630                           ;spi.c: 72: uint8_t low = output & 0x00ff;
  7631  0021A0  C012  F011         	movff	i2WriteToDac@output,i2WriteToDac@low
  7632                           
  7633                           ;spi.c: 74: WriteSpi(high);
  7634  0021A4  5010               	movf	i2WriteToDac@high,w,c
  7635  0021A6  EC6A  F012         	call	i2_WriteSpi
  7636                           
  7637                           ;spi.c: 75: WriteSpi(low);
  7638  0021AA  5011               	movf	i2WriteToDac@low,w,c
  7639  0021AC  EC6A  F012         	call	i2_WriteSpi
  7640                           
  7641                           ;spi.c: 77: PORTCbits.RC2 = 1;
  7642  0021B0  8482               	bsf	3970,2,c	;volatile
  7643  0021B2  0012               	return		;funcret
  7644  0021B4                     __end_ofi2_WriteToDac:
  7645                           	opt stack 0
  7646                           pclatu	equ	0xFFB
  7647                           pclath	equ	0xFFA
  7648                           tblptru	equ	0xFF8
  7649                           tblptrh	equ	0xFF7
  7650                           tblptrl	equ	0xFF6
  7651                           tablat	equ	0xFF5
  7652                           prodh	equ	0xFF4
  7653                           prodl	equ	0xFF3
  7654                           intcon	equ	0xFF2
  7655                           postinc0	equ	0xFEE
  7656                           fsr0h	equ	0xFEA
  7657                           fsr0l	equ	0xFE9
  7658                           wreg	equ	0xFE8
  7659                           postdec1	equ	0xFE5
  7660                           plusw1	equ	0xFE3
  7661                           fsr1h	equ	0xFE2
  7662                           fsr1l	equ	0xFE1
  7663                           indf2	equ	0xFDF
  7664                           postinc2	equ	0xFDE
  7665                           postdec2	equ	0xFDD
  7666                           plusw2	equ	0xFDB
  7667                           fsr2h	equ	0xFDA
  7668                           fsr2l	equ	0xFD9
  7669                           status	equ	0xFD8
  7670                           
  7671 ;; *************** function i2_WriteSpi *****************
  7672 ;; Defined at:
  7673 ;;		line 53 in file "spi.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;  data            1    wreg     unsigned char 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  data            1    0[COMRAM] unsigned char 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      void 
  7680 ;; Registers used:
  7681 ;;		wreg
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7691 ;;Total ram usage:        1 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; This function calls:
  7694 ;;		Nothing
  7695 ;; This function is called by:
  7696 ;;		i2_WriteToDac
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           	psect	text49
  7701  0024D4                     __ptext49:
  7702                           	opt stack 0
  7703  0024D4                     i2_WriteSpi:
  7704                           	opt stack 23
  7705                           
  7706                           ;incstack = 0
  7707                           ;i2WriteSpi@data stored from wreg
  7708  0024D4  6E01               	movwf	i2WriteSpi@data,c
  7709                           
  7710                           ;spi.c: 55: SSPBUF = data;
  7711  0024D6  C001  FFC9         	movff	i2WriteSpi@data,4041	;volatile
  7712  0024DA  A69E               	btfss	3998,3,c	;volatile
  7713  0024DC  D7FE               	goto	i2l287
  7714                           
  7715                           ;spi.c: 57: PIR1bits.SSPIF = 0;
  7716  0024DE  969E               	bcf	3998,3,c	;volatile
  7717  0024E0  0012               	return		;funcret
  7718  0024E2                     __end_ofi2_WriteSpi:
  7719                           	opt stack 0
  7720                           pclatu	equ	0xFFB
  7721                           pclath	equ	0xFFA
  7722                           tblptru	equ	0xFF8
  7723                           tblptrh	equ	0xFF7
  7724                           tblptrl	equ	0xFF6
  7725                           tablat	equ	0xFF5
  7726                           prodh	equ	0xFF4
  7727                           prodl	equ	0xFF3
  7728                           intcon	equ	0xFF2
  7729                           postinc0	equ	0xFEE
  7730                           fsr0h	equ	0xFEA
  7731                           fsr0l	equ	0xFE9
  7732                           wreg	equ	0xFE8
  7733                           postdec1	equ	0xFE5
  7734                           plusw1	equ	0xFE3
  7735                           fsr1h	equ	0xFE2
  7736                           fsr1l	equ	0xFE1
  7737                           indf2	equ	0xFDF
  7738                           postinc2	equ	0xFDE
  7739                           postdec2	equ	0xFDD
  7740                           plusw2	equ	0xFDB
  7741                           fsr2h	equ	0xFDA
  7742                           fsr2l	equ	0xFD9
  7743                           status	equ	0xFD8
  7744                           
  7745 ;; *************** function _AdcRead *****************
  7746 ;; Defined at:
  7747 ;;		line 21 in file "adc.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  channel         1    wreg     unsigned char 
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  channel         1    3[COMRAM] unsigned char 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  2    0[COMRAM] unsigned int 
  7754 ;; Registers used:
  7755 ;;		wreg, status,2, status,0
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;Total ram usage:        4 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; This function calls:
  7768 ;;		Nothing
  7769 ;; This function is called by:
  7770 ;;		_ISR
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           	psect	text50
  7775  00235C                     __ptext50:
  7776                           	opt stack 0
  7777  00235C                     _AdcRead:
  7778                           	opt stack 24
  7779                           
  7780                           ;incstack = 0
  7781                           ;AdcRead@channel stored from wreg
  7782  00235C  6E04               	movwf	AdcRead@channel,c
  7783                           
  7784                           ;adc.c: 23: ADCON0bits.CHS = channel;
  7785  00235E  C004  F003         	movff	AdcRead@channel,??_AdcRead
  7786  002362  4603               	rlncf	??_AdcRead,f,c
  7787  002364  4603               	rlncf	??_AdcRead,f,c
  7788  002366  50C2               	movf	4034,w,c	;volatile
  7789  002368  1803               	xorwf	??_AdcRead,w,c
  7790  00236A  0BC3               	andlw	-61
  7791  00236C  1803               	xorwf	??_AdcRead,w,c
  7792  00236E  6EC2               	movwf	4034,c	;volatile
  7793                           
  7794                           ;adc.c: 25: ADCON0bits.ADON = 1;
  7795  002370  80C2               	bsf	4034,0,c	;volatile
  7796                           
  7797                           ;adc.c: 27: ADCON0bits.GODONE = 1;
  7798  002372  82C2               	bsf	4034,1,c	;volatile
  7799  002374  B2C2               	btfsc	4034,1,c	;volatile
  7800  002376  D7FE               	goto	i2l194
  7801                           
  7802                           ;adc.c: 31: ADCON0bits.ADON = 0;
  7803  002378  90C2               	bcf	4034,0,c	;volatile
  7804                           
  7805                           ;adc.c: 33: return ADRES;
  7806  00237A  CFC3 F001          	movff	4035,?_AdcRead	;volatile
  7807  00237E  CFC4 F002          	movff	4036,?_AdcRead+1	;volatile
  7808  002382  0012               	return		;funcret
  7809  002384                     __end_of_AdcRead:
  7810                           	opt stack 0
  7811                           pclatu	equ	0xFFB
  7812                           pclath	equ	0xFFA
  7813                           tblptru	equ	0xFF8
  7814                           tblptrh	equ	0xFF7
  7815                           tblptrl	equ	0xFF6
  7816                           tablat	equ	0xFF5
  7817                           prodh	equ	0xFF4
  7818                           prodl	equ	0xFF3
  7819                           intcon	equ	0xFF2
  7820                           postinc0	equ	0xFEE
  7821                           fsr0h	equ	0xFEA
  7822                           fsr0l	equ	0xFE9
  7823                           wreg	equ	0xFE8
  7824                           postdec1	equ	0xFE5
  7825                           plusw1	equ	0xFE3
  7826                           fsr1h	equ	0xFE2
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           plusw2	equ	0xFDB
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           pclatu	equ	0xFFB
  7836                           pclath	equ	0xFFA
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           intcon	equ	0xFF2
  7844                           postinc0	equ	0xFEE
  7845                           fsr0h	equ	0xFEA
  7846                           fsr0l	equ	0xFE9
  7847                           wreg	equ	0xFE8
  7848                           postdec1	equ	0xFE5
  7849                           plusw1	equ	0xFE3
  7850                           fsr1h	equ	0xFE2
  7851                           fsr1l	equ	0xFE1
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           plusw2	equ	0xFDB
  7856                           fsr2h	equ	0xFDA
  7857                           fsr2l	equ	0xFD9
  7858                           status	equ	0xFD8
  7859                           
  7860                           	psect	rparam
  7861  0000                     pclatu	equ	0xFFB
  7862                           pclath	equ	0xFFA
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           intcon	equ	0xFF2
  7870                           postinc0	equ	0xFEE
  7871                           fsr0h	equ	0xFEA
  7872                           fsr0l	equ	0xFE9
  7873                           wreg	equ	0xFE8
  7874                           postdec1	equ	0xFE5
  7875                           plusw1	equ	0xFE3
  7876                           fsr1h	equ	0xFE2
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           plusw2	equ	0xFDB
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886                           	psect	temp
  7887  00005A                     btemp:
  7888                           	opt stack 0
  7889  00005A                     	ds	1
  7890  0000                     int$flags	set	btemp
  7891  0000                     wtemp6	set	btemp+1
  7892                           pclatu	equ	0xFFB
  7893                           pclath	equ	0xFFA
  7894                           tblptru	equ	0xFF8
  7895                           tblptrh	equ	0xFF7
  7896                           tblptrl	equ	0xFF6
  7897                           tablat	equ	0xFF5
  7898                           prodh	equ	0xFF4
  7899                           prodl	equ	0xFF3
  7900                           intcon	equ	0xFF2
  7901                           postinc0	equ	0xFEE
  7902                           fsr0h	equ	0xFEA
  7903                           fsr0l	equ	0xFE9
  7904                           wreg	equ	0xFE8
  7905                           postdec1	equ	0xFE5
  7906                           plusw1	equ	0xFE3
  7907                           fsr1h	equ	0xFE2
  7908                           fsr1l	equ	0xFE1
  7909                           indf2	equ	0xFDF
  7910                           postinc2	equ	0xFDE
  7911                           postdec2	equ	0xFDD
  7912                           plusw2	equ	0xFDB
  7913                           fsr2h	equ	0xFDA
  7914                           fsr2l	equ	0xFD9
  7915                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    10
    Data        242
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     48      89
    BANK0           128     32     121
    BANK1           256    172     189
    BANK2           256      0     128
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[3]), 
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 4
		 -> CookTimeDisplay@cookTimeContainer_1412(BANK1[2]), CookTimeDisplay@cookTimeContainer(BANK1[1]), BakeTempSet@bakeTempContainer(BANK1[3]), ReadAndDisplaySecFromRTC@secondContainerDisplay_1361(BANK0[2]), 
		 -> ReadAndDisplaySecFromRTC@secondContainerDisplay(BANK0[1]), ReadAndDisplayHrFromRTC@hourContainerDisplay_1355(BANK0[2]), ReadAndDisplayHrFromRTC@hourContainerDisplay(BANK0[1]), ReadAndDisplayMinFromRTC@minContainerDisplay_1349(BANK0[2]), 
		 -> ReadAndDisplayMinFromRTC@minContainerDisplay(BANK0[1]), TimeSetting@minContainer_1331(BANK1[2]), TimeSetting@minContainer(BANK1[1]), TimeSetting@hourContainer_1327(BANK1[2]), 
		 -> TimeSetting@hourContainer(BANK1[1]), main@bakeTempContainer(BANK1[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_string@x	PTR unsigned char  size(2) Largest target is 11
		 -> CookTimeDisplay@cookTimeContainer_1412(BANK1[2]), CookTimeDisplay@cookTimeContainer(BANK1[1]), CookTimeDisplay@minDisplay(BANK1[4]), CookTimeDisplay@nextMenu(BANK1[7]), 
		 -> CookTimeDisplay@backMenu(BANK1[6]), CookTimeDisplay@setBakeTimeDisplay(BANK1[10]), BakeTempSet@bakeTempContainer(BANK1[3]), BakeTempSet@nextMenu(BANK1[6]), 
		 -> BakeTempSet@deliminator(BANK1[6]), BakeTempSet@setBakeTempDisplay(BANK1[10]), ReadRTCAndDisplay@bakeT(BANK0[6]), ReadRTCAndDisplay@deliminator(BANK0[2]), 
		 -> ReadRTCAndDisplay@time(BANK0[5]), ReadAndDisplaySecFromRTC@secondContainerDisplay_1361(BANK0[2]), ReadAndDisplaySecFromRTC@secondContainerDisplay(BANK0[1]), ReadAndDisplayHrFromRTC@hourContainerDisplay_1355(BANK0[2]), 
		 -> ReadAndDisplayHrFromRTC@hourContainerDisplay(BANK0[1]), ReadAndDisplayMinFromRTC@minContainerDisplay_1349(BANK0[2]), ReadAndDisplayMinFromRTC@minContainerDisplay(BANK0[1]), TimeSetting@minContainer_1331(BANK1[2]), 
		 -> TimeSetting@minContainer(BANK1[1]), TimeSetting@hourContainer_1327(BANK1[2]), TimeSetting@hourContainer(BANK1[1]), TimeSetting@next(BANK1[6]), 
		 -> TimeSetting@move(BANK1[6]), TimeSetting@setTimeDisplay(BANK1[9]), CheckCookDone@clear(BANK0[6]), CheckCookDone@bakeDone(BANK0[11]), 
		 -> main@bakeTempContainer(BANK1[4]), main@baking(BANK1[10]), 

    ptr	PTR unsigned int  size(2) Largest target is 128
		 -> NULL(NULL[0]), main@sineLookup(BANK1[128]), 


Critical Paths under _main in COMRAM

    _lcd_shiftRight->_lcd_command
    _lcd_init->_lcd_command
    _WriteToRTC->_I2C_WriteToSlave
    _WriteTimeToCookToRTC->_I2C_WriteToSlave
    _WriteTime->_IntToBcd
    _IntToBcd->___awdiv
    _CookTimeSet->_IntToBcd_cook_time
    _IntToBcd_cook_time->___awdiv
    _I2C_ReadFromSlave->_I2C_Read
    _I2C_ReadFromSlave->_I2C_WriteControl
    _I2C_Read->_I2C_Wait
    _CheckCookDone->_clearAlarm
    _lcd_clear->_lcd_command
    _clearAlarm->_I2C_WriteToSlave
    _I2C_WriteToSlave->_I2C_WriteControl
    _I2C_WriteData->_I2C_Wait
    _I2C_WriteControl->_I2C_Wait
    _I2C_Stop->_I2C_Wait
    _I2C_Start->_I2C_Wait
    _WriteToDac->_WriteSpi
    _BakeTempSet->___lwmod
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_string->_lcd_char

Critical Paths under _ISR in COMRAM

    _ISR->i2_WriteToDac
    i2_WriteToDac->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_ReadRTCAndDisplay
    _TimeSetting->_sprintf
    _ReadRTCAndDisplay->_ReadAndDisplayHrFromRTC
    _ReadRTCAndDisplay->_ReadAndDisplayMinFromRTC
    _ReadRTCAndDisplay->_ReadAndDisplaySecFromRTC
    _ReadAndDisplaySecFromRTC->_sprintf
    _ReadAndDisplayMinFromRTC->_sprintf
    _ReadAndDisplayHrFromRTC->_sprintf
    _CookTimeDisplay->_sprintf
    _CheckCookDone->_WriteToDac
    _BakeTempSet->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_CookTimeDisplay

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               143   143      0  104658
                                             31 BANK0      1     1      0
                                             30 BANK1    142   142      0
                            _AdcInit
                        _BakeTempSet
                      _CheckCookDone
                    _CookTimeDisplay
                        _CookTimeSet
                           _GPIOInit
                  _GenerateAmplitude
    _IfButtonPressedMovedToNextState
                 _InitI2C_MasterMode
                  _ReadRTCAndDisplay
                            _SpiInit
                        _TimeSetting
                         _Timer2Init
                          _WriteTime
               _WriteTimeToCookToRTC
                         _WriteToDac
                         _WriteToRTC
                         _clearAlarm
                           _lcd_char
                          _lcd_clear
                        _lcd_command
                           _lcd_init
                     _lcd_shiftRight
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _lcd_shiftRight                                       0     0      0     430
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     430
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _WriteToRTC                                           1     1      0    5095
                                             44 COMRAM     1     1      0
                   _I2C_WriteToSlave
 ---------------------------------------------------------------------------------
 (1) _WriteTimeToCookToRTC                                 1     1      0    5095
                                             44 COMRAM     1     1      0
                   _I2C_WriteToSlave
 ---------------------------------------------------------------------------------
 (1) _WriteTime                                            2     2      0    1796
                                              0 BANK0      2     2      0
                           _IntToBcd
 ---------------------------------------------------------------------------------
 (2) _IntToBcd                                             3     3      0    1660
                                             45 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Timer2Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TimeSetting                                         30    28      2   10556
                                             14 BANK0      3     1      2
                                              0 BANK1     27    27      0
                            ___lwdiv
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadRTCAndDisplay                                   13    13      0   33520
                                             18 BANK0     13    13      0
            _ReadAndDisplayHrFromRTC
           _ReadAndDisplayMinFromRTC
           _ReadAndDisplaySecFromRTC
                           _lcd_char
                        _lcd_command
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _ReadAndDisplaySecFromRTC                             4     4      0    9760
                                             14 BANK0      4     4      0
                  _I2C_ReadFromSlave
                     _bcd_to_decimal
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ReadAndDisplayMinFromRTC                             4     4      0    9760
                                             14 BANK0      4     4      0
                  _I2C_ReadFromSlave
                     _bcd_to_decimal
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ReadAndDisplayHrFromRTC                              4     4      0    9760
                                             14 BANK0      4     4      0
                  _I2C_ReadFromSlave
                     _bcd_to_decimal
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _bcd_to_decimal                                       4     2      2      62
                                             37 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _IfButtonPressedMovedToNextState                      3     2      1     120
                                             37 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _GenerateAmplitude                                    2     0      2     274
                                             37 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _GPIOInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CookTimeSet                                          2     2      0    2351
                                              0 BANK0      2     2      0
                  _I2C_ReadFromSlave
                 _IntToBcd_cook_time
           _bcd_to_decimal_cook_time
 ---------------------------------------------------------------------------------
 (2) _bcd_to_decimal_cook_time                             4     2      2      62
                                             37 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _IntToBcd_cook_time                                   3     3      0    1660
                                             45 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     793
                                             37 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     805
                                             37 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadFromSlave                                    2     2      0     561
                                             40 COMRAM     2     2      0
                           _I2C_Read
                          _I2C_Start
                   _I2C_WriteControl
                      _I2C_WriteData
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0      65
                                             38 COMRAM     2     2      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (1) _CookTimeDisplay                                     32    30      2   10393
                                             14 BANK0      2     0      2
                                              0 BANK1     30    30      0
                            ___lwdiv
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _CheckCookDone                                       17    17      0    9774
                                              6 BANK0     17    17      0
                 _InitI2C_MasterMode
                         _WriteToDac
                         _clearAlarm
                          _lcd_clear
                        _lcd_command
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            0     0      0     430
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _clearAlarm                                           2     2      0    4875
                                             44 COMRAM     2     2      0
                   _I2C_WriteToSlave
 ---------------------------------------------------------------------------------
 (2) _I2C_WriteToSlave                                     4     1      3    4875
                                             40 COMRAM     4     1      3
                          _I2C_Start
                           _I2C_Stop
                   _I2C_WriteControl
                      _I2C_WriteData
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteData                                        1     1      0      31
                                             38 COMRAM     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteControl                                     2     1      1     400
                                             38 COMRAM     2     1      1
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             1     1      0       0
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _WriteToDac                                          12     8      4     699
                                             38 COMRAM     6     2      4
                                              0 BANK0      6     6      0
                           _WriteSpi
 ---------------------------------------------------------------------------------
 (2) _WriteSpi                                             1     1      0      31
                                             37 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitI2C_MasterMode                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BakeTempSet                                         29    27      2    9788
                                             14 BANK0      4     2      2
                                              0 BANK1     25    25      0
                            ___lwmod
                           _lcd_char
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    16      6    4749
                                              1 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     592
                                             44 COMRAM     4     0      4
                                              0 BANK0      1     1      0
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1071
                                             37 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           4     2      2    3260
                                             40 COMRAM     4     2      2
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             3     3      0     430
                                             37 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0     430
                                             37 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _AdcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 18    18      0     446
                                             19 COMRAM    18    18      0
                            _AdcRead
                       i2_WriteToDac
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_WriteToDac                                        12     8      4     210
                                              7 COMRAM    12     8      4
                         i2_WriteSpi
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2_WriteSpi                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _AdcRead                                              4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcInit
   _BakeTempSet
     ___lwmod
       ___lwdiv (ARG)
     _lcd_char
     _lcd_command
     _lcd_string
       _lcd_char
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _CheckCookDone
     _InitI2C_MasterMode
     _WriteToDac
       _WriteSpi
     _clearAlarm
       _I2C_WriteToSlave
         _I2C_Start
           _I2C_Wait
         _I2C_Stop
           _I2C_Wait
         _I2C_WriteControl
           _I2C_Wait
         _I2C_WriteData
           _I2C_Wait
     _lcd_clear
       _lcd_command
     _lcd_command
     _lcd_string
       _lcd_char
   _CookTimeDisplay
     ___lwdiv
     _lcd_char
     _lcd_command
     _lcd_string
       _lcd_char
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _CookTimeSet
     _I2C_ReadFromSlave
       _I2C_Read
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_WriteControl
         _I2C_Wait
       _I2C_WriteData
         _I2C_Wait
     _IntToBcd_cook_time
       ___awdiv
       ___awmod
     _bcd_to_decimal_cook_time
   _GPIOInit
   _GenerateAmplitude
   _IfButtonPressedMovedToNextState
   _InitI2C_MasterMode
   _ReadRTCAndDisplay
     _ReadAndDisplayHrFromRTC
       _I2C_ReadFromSlave
         _I2C_Read
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_WriteControl
           _I2C_Wait
         _I2C_WriteData
           _I2C_Wait
       _bcd_to_decimal
       _lcd_char
       _lcd_command
       _lcd_string
         _lcd_char
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _ReadAndDisplayMinFromRTC
       _I2C_ReadFromSlave
         _I2C_Read
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_WriteControl
           _I2C_Wait
         _I2C_WriteData
           _I2C_Wait
       _bcd_to_decimal
       _lcd_char
       _lcd_command
       _lcd_string
         _lcd_char
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _ReadAndDisplaySecFromRTC
       _I2C_ReadFromSlave
         _I2C_Read
           _I2C_Wait
         _I2C_Start
           _I2C_Wait
         _I2C_WriteControl
           _I2C_Wait
         _I2C_WriteData
           _I2C_Wait
       _bcd_to_decimal
       _lcd_char
       _lcd_command
       _lcd_string
         _lcd_char
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _lcd_char
     _lcd_command
     _lcd_string
       _lcd_char
   _SpiInit
   _TimeSetting
     ___lwdiv
     _lcd_char
     _lcd_command
     _lcd_string
       _lcd_char
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _Timer2Init
   _WriteTime
     _IntToBcd
       ___awdiv
       ___awmod
   _WriteTimeToCookToRTC
     _I2C_WriteToSlave
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_WriteControl
         _I2C_Wait
       _I2C_WriteData
         _I2C_Wait
   _WriteToDac
     _WriteSpi
   _WriteToRTC
     _I2C_WriteToSlave
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_WriteControl
         _I2C_Wait
       _I2C_WriteData
         _I2C_Wait
   _clearAlarm
     _I2C_WriteToSlave
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_WriteControl
         _I2C_Wait
       _I2C_WriteData
         _I2C_Wait
   _lcd_char
   _lcd_clear
     _lcd_command
   _lcd_command
   _lcd_init
     _lcd_command
   _lcd_shiftRight
     _lcd_command
   _lcd_string
     _lcd_char
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _ISR (ROOT)
   _AdcRead
   i2_WriteToDac
     i2_WriteSpi
     i2___lwdiv (ARG)
   i2___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      80       9       50.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     AC      BD       7       73.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     20      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     30      59       1       70.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     20F      34        0.0%
DATA                 0      0     20F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 18 16:03:47 2018

                                       lcd_char@temp 0027                                   __size_of_I2C_Start 0008  
                                        _SSPSTATbits 000FC7                                         ___awdiv@sign 002B  
                                                 _hr 0057                                  ?_InitI2C_MasterMode 0001  
                                 i2___lwdiv@dividend 0001                                           _WRITE_MODE 0047  
                                        _BakeTempSet 16F0                                           i2_WriteSpi 24D4  
                                                l110 106C                                                  l112 1084  
                                                l104 1016                                                  l121 1106  
                                                l113 1094                                                  l122 1136  
                                                l131 11D8                                                  l116 10B6  
                                                l108 1066                                                  l109 121E  
                                                l133 11DC                                                  l117 10F6  
                                                l134 11F0                                                  l126 1140  
                                                l127 114C                                                  l136 11F4  
                                                l128 115E                                                  l305 22BC  
                                                l161 1A56                                                  l306 22A6  
                                                l154 242C                                                  l402 1310  
                                                l251 245E                                                  l163 1A78  
                                                l500 159A                                                  l404 1354  
                                                l165 1A9A                                                  l405 139E  
                                                l406 13CE                                                  l159 1A34  
                                                l431 1C2E                                                  l256 2354  
                                                l408 1416                                                  l257 2356  
                                                l409 1460                                                  l514 21E2  
                                                l426 1B12                                                  l531 15F8  
                                                l532 1620                                                  l436 1BA0  
                                                l533 163E                                                  l525 15D8  
                                                l526 15F2                                                  l527 15FE  
                                                l287 24CC                                                  l711 1E30  
                                                l536 16C2                                                  l712 1E28  
                                                l537 166E                                                  l721 1F8A  
                                                l730 1FDC                                                  l722 1F96  
                                                l715 1E50                                                  l716 1E5A  
                                                l708 1E02                                                  l724 1FAC  
                                                l717 1E68                                                  l709 1E12  
                                                l725 1FA4                                                  l728 1FC4  
                                                l729 1FCE                                                  l499 1550  
                                                l944 205E                                                  l945 2056  
                                                l954 2144                                                  l955 213C  
                                                l948 207E                                                  l949 2088  
                                                l958 215C                                                  l959 2166  
                                                _PR2 000FCB                                                  _PEN 007E2A  
                                                _ISR 0008                                __size_ofi2_WriteToDac 0044  
                                                _min 0056                                                  _ptr 003D  
                                       ___awmod@sign 002B                               CookTimeDisplay@adcRead 00E7  
                                                wreg 000FE8                                      ?_lcd_shiftRight 0001  
                   __end_of_ReadAndDisplayMinFromRTC 1B42                                       _setCookTimeMin 0040  
                                       __CFG_LVP$OFF 000000                                                 ?_ISR 0001  
                                       lcd_command@x 0028                                         __CFG_WDT$OFF 000000  
                      __size_of_WriteTimeToCookToRTC 0084                                                 l4008 1090  
                                               l4034 10F2                                                 l4018 10B2  
                                               l3448 1660                                                 l2890 1A78  
                                               l3932 159A                                                 l2884 1A56  
                                               l2878 1A34                                                 l3790 1460  
                                               l3766 139E                                                 STR_1 100B  
                                               STR_2 100B                                                 STR_3 100B  
                                               STR_4 100B                                                 STR_5 100B  
                                               STR_6 100B                                                 STR_7 100B  
                                               STR_8 100B                                                 STR_9 100B  
                                               u2020 1E34                                                 u2301 1C6E  
                                               u1510 1A62                                                 u2151 1EAE  
                                               u2311 1CAC                                                 u2080 1FB0  
                                               u2321 1700                                                 u2161 1ED2  
                                               u1530 1A84                                                 u2331 1724  
                                               u2171 1270                                                 u2341 1748  
                                               u2181 1294                                                 u2421 1056  
                                               u1470 1A1E                                                 u2351 14A2  
                                               u2191 12B8                                                 u2280 140E  
                                               u2361 14C6                                                 u1490 1A40  
                                               u2371 14EA                                                 u2380 1548  
                                               u2517 10A0                                                 u2607 1776  
                                               u2527 10E0                                                 u2617 182C  
                                               u2481 116E                                                 u2537 111A  
                                               u2707 1928                                                 u2627 1850  
                                               u2547 11C4                                                 u1860 2062  
                                               u2717 194A                                                 u2637 1868  
                                               u2557 12E6                                                 u1950 1668  
                                               u2727 1962                                                 u2647 187A  
                                               u2567 1320                                                 u1960 16CA  
                                               u2657 189C                                                 u2577 13DE  
                                               u1890 2148                                                 u1970 16E2  
                                               u2667 18B4                                                 u2587 241A  
                                               u2677 18DA                                                 u2597 220E  
                                               u2687 18FE                     __end_of_ReadAndDisplaySecFromRTC 1BD0  
                                               u2697 1916                                                 _RCEN 007E2B  
                               ??_InitI2C_MasterMode 0026                                                 _main 1010  
                                    __end_of_AdcInit 251E                                      __end_of_AdcRead 2384  
                                BakeTempSet@nextMenu 0110                                     __end_of_I2C_Read 235C  
                                               fsr0h 000FEA                                                 fsr1h 000FE2  
                                 i2___lwdiv@quotient 0005                                                 fsr2h 000FDA  
                                               fsr0l 000FE9                                                 indf2 000FDF  
                                               fsr1l 000FE1                                                 fsr2l 000FD9  
                                               btemp 005A                                     __end_of_I2C_Wait 2498  
                                    i2WriteToDac@low 0011                                     __end_of_I2C_Stop 2510  
                                               prodh 000FF4                                                 prodl 000FF3  
                                               start 0128                                          lcd_string@i 002B  
                                        lcd_string@x 0029                              CookTimeDisplay@backMenu 0111  
                            __end_of_CookTimeDisplay 15CC                                  __end_of_CookTimeSet 21F2  
                                       ___param_bank 000000                                                ??_ISR 0014  
                                       i2_WriteToDac 2170                             ?_ReadAndDisplayHrFromRTC 0001  
                                    __end_of_SpiInit 2450                                     __end_of_GPIOInit 24C6  
                                              ?_main 0001                                                _ACKEN 007E2C  
                                              _ACKDT 007E2D                                      __end_of___awdiv 1E72  
                                              _ADRES 000FC3                                                STR_10 100B  
                                              STR_11 100B                                                STR_12 100B  
                                              STR_13 100B                                                STR_14 100B  
                                    __end_of___awmod 1FE6                                      ___awdiv@divisor 0028  
                                    __end_of___lwdiv 2092                                      __end_of___lwmod 2170  
                                              i2l180 00DA                                                i2l176 00DC  
                                              i2l177 00A2                                                i2l194 2374  
                                              i2l178 0068                                                i2l287 24DA  
                                              i2l944 20B0                                                i2l945 20A8  
                                              i2l948 20D0                                      ___awdiv@counter 002A  
                                              i2l949 20DA                                                _PORTA 000F80  
                                              _TRISC 000F94                                                _SSPIF 007CF3  
                                   WriteToDac@output 00DD                             I2C_WriteToSlave@R_W_mode 0029  
                                    __end_of_dpowers 100B                              CookTimeDisplay@nextMenu 010A  
                                              _setHr 0044                                     i2WriteToDac@data 0008  
                                   i2WriteToDac@high 0010                                    __end_of_I2C_Start 2518  
                                     __CFG_BOREN$OFF 000000                                                pclath 000FFA  
                                              tablat 000FF5                                                plusw1 000FE3  
                                              plusw2 000FDB                                                status 000FD8  
                                              wtemp6 005B                                      __end_of_sprintf 16F0  
                                 __size_ofi2___lwdiv 0052                                      __initialization 196C  
                                       __end_of_main 1260                                     __end_of_IntToBcd 2266  
                          bcd_to_decimal_cook_time@x 0029                                    _ReadRTCAndDisplay 1C5E  
                                 ?_ReadRTCAndDisplay 0001                              TimeSetting@readADCInput 00E7  
                                        ?i2_WriteSpi 0001                                               ??_main 00F8  
                                      __activetblptr 000002     ReadAndDisplayHrFromRTC@hourContainerDisplay_1355 00E7  
                       I2C_ReadFromSlave@addressByte 0029                                  ??_ReadRTCAndDisplay 0031  
                                   _I2C_WriteControl 2450                 CookTimeSet@convertedCookMinutesToBCD 00DA  
                             __size_of_I2C_WriteData 000C                                               _ADCON2 000FC0  
                                          ??_AdcInit 0026                                            ??_AdcRead 0003  
                                  WriteToDac@command 00D9                                     ___awdiv@dividend 0026  
                                   _I2C_WriteToSlave 23D0                                     __end_of_WriteSpi 24D4  
                           _ReadAndDisplayMinFromRTC 1AB0                                               _TMR2IE 007CE9  
                                             _TMR2IF 007CF1                                          _CookTimeSet 21B4  
                                             _SSPADD 000FC8                                               _SSPBUF 000FC9  
                            TimeSetting@minContainer 011A                             _ReadAndDisplaySecFromRTC 1B42  
                             __size_of_CheckCookDone 0084                                 I2C_WriteToSlave@data 002B  
                                         _Timer2Init 2498                      __end_of_ReadAndDisplayHrFromRTC 1C5E  
                                          ??_SpiInit 0026                                        ??_TimeSetting 00E9  
                                   __end_of_lcd_char 18BE                                     ?_CookTimeDisplay 00E7  
                          __end_of_ReadRTCAndDisplay 1CE6                                     __end_of_lcd_init 2412  
                               __size_of_lcd_command 00AE                                            ??___awdiv 002A  
                                          ??___awmod 002A                                            ??___lwdiv 002A  
                                             _hrRead 0042                                            ??___lwmod 0031  
                                             clear_0 19F2                                               clear_1 19FE  
                                   ___awdiv@quotient 002C                                               _setMin 0045  
                                    ___awmod@divisor 0028                               BakeTempSet@deliminator 010A  
                                    ___awmod@counter 002A                          __size_of_IntToBcd_cook_time 0036  
                                       __pdataCOMRAM 004B                       GenerateAmplitude@readAmplitude 0026  
                                          ?_I2C_Read 0001                                            ?_I2C_Wait 0001  
                                          ?_I2C_Stop 0001                                    __end_ofi2___lwdiv 20E4  
                                       __mediumconst 0000                                               tblptrh 000FF7  
                                             tblptrl 000FF6                                               tblptru 000FF8  
                               CookTimeDisplay@F3152 008B                                 CookTimeDisplay@F3154 00AF  
                               CookTimeDisplay@F3156 00A8                                 CookTimeDisplay@F3158 0050  
                                          ??_sprintf 0031                                    _I2C_ReadFromSlave 2302  
                      TimeSetting@hourContainer_1327 0115                                           __accesstop 0080  
                                 ?_I2C_ReadFromSlave 0001                              __end_of__initialization 1A04  
                                          ?_GPIOInit 0001                                   __size_of_WriteTime 0032  
                                __size_ofi2_WriteSpi 000E                                        ___rparam_used 000001  
        IfButtonPressedMovedToNextState@currentState 0026                                  ??_I2C_ReadFromSlave 0029  
                                     __pcstackCOMRAM 0001                                        _I2C_WriteData 24E2  
                                     WriteToDac@data 0027                                       WriteToDac@high 00DB  
                                       __pidataBANK0 1FE6                                         __pidataBANK1 24EE  
                                       __pidataBANK2 1EF6                                           _WriteToRTC 1CE6  
                                         _WriteToDac 20E4                            TimeSetting@setTimeDisplay 0100  
                                   ??_lcd_shiftRight 0029                                         ?_BakeTempSet 00E7  
                                __end_of_TimeSetting 1492                                        _CheckCookDone 1E72  
                                         ??_I2C_Read 0027                                           ??_I2C_Wait 0026  
                                         ??_I2C_Stop 0027                                   __size_of_lcd_clear 0008  
                          __end_of_I2C_ReadFromSlave 2334                                           __pbssBANK1 01B6  
                                          ?_IntToBcd 0001                                   CheckCookDone@F3211 00D3  
                                 CheckCookDone@F3209 0080                                           ??_GPIOInit 0026  
                                    lcd_command@temp 0027                                           _clearAlarm 21F2  
                           _bcd_to_decimal_cook_time 23AA                    CookTimeDisplay@setBakeTimeDisplay 0100  
                                       WriteSpi@data 0026                                          ?_Timer2Init 0001  
                                     ?_I2C_WriteData 0001                                      bcd_to_decimal@x 0029  
                         __size_of_ReadRTCAndDisplay 0088                         __end_of_WriteTimeToCookToRTC 1DEE  
                                 CheckCookDone@clear 00EA                     I2C_ReadFromSlave@dataFromAddress 002A  
                                          ?_WriteSpi 0001                                              _T2CKPS1 007E51  
                                     ?_CheckCookDone 0001                                     BakeTempSet@F3131 00B5  
                                   BakeTempSet@F3127 0095                                     BakeTempSet@F3129 00BB  
                                  __end_of_WriteTime 2302                                     I2C_Read@readData 0028  
                            __size_of_bcd_to_decimal 0026                                         _getModOfTemp 0033  
                   __size_of_ReadAndDisplayHrFromRTC 008E                                              _AdcInit 2518  
                                            _AdcRead 235C                                              _SSPCON1 000FC6  
                                            _SSPCON2 000FC5                                            ?_lcd_char 0001  
                                         _lcd_string 229C                                            ?_lcd_init 0001  
                                            _SSPSTAT 000FC7                                           _minAdcRead 0037  
                        __size_of_InitI2C_MasterMode 0018                                           ??_IntToBcd 002E  
                       ReadRTCAndDisplay@deliminator 00F6                                            _I2C_Start 2510  
                                            __Hparam 0000                                              __Lparam 0000  
                             ReadRTCAndDisplay@F3194 004B                               ReadRTCAndDisplay@F3196 0054  
                             ReadRTCAndDisplay@F3198 00C1                                              _SpiInit 2432  
                                  __end_of_lcd_clear 2508                             __end_of_I2C_WriteControl 246E  
                                        _TimeSetting 1260                                          ?_WriteToRTC 0001  
                                        ?_WriteToDac 0027                                              ___awdiv 1DEE  
                                            ___awmod 1F76                                              ___lwdiv 2040  
                                            ___lwmod 212C                             __end_of_I2C_WriteToSlave 23F2  
                                       __psmallconst 1000                                              __pcinit 196C  
                                            __ramtop 1000                                         ??i2_WriteSpi 0001  
                             ReadRTCAndDisplay@bakeT 00EB                                           ??_WriteSpi 0026  
                                            __ptext0 1010                                              __ptext1 24F8  
                                            __ptext2 23F2                                              __ptext3 1CE6  
                                            __ptext4 1D6A                                              __ptext5 22D0  
                                            __ptext6 2230                                              __ptext7 2498  
                                            __ptext8 1260                                              __ptext9 2432  
                                       __size_of_ISR 0120                                              _minRead 0043  
                                            _dpowers 1001                                            _T2CONbits 000FCA  
                                   ___awmod@dividend 0026                           ??_ReadAndDisplayMinFromRTC 0031  
                                     main@sineLookup 011E                                              _sineOut 0049  
                         __size_of_I2C_ReadFromSlave 0032                                  __size_of_Timer2Init 0010  
                         ??_ReadAndDisplaySecFromRTC 0031                                           ??_lcd_char 0026  
                                            _sprintf 15CC                                           ??_lcd_init 0029  
                               end_of_initialization 1A04                                   i2WriteToDac@output 0012  
                                          _READ_MODE 0059                                         ?_CookTimeSet 0001  
                                      __Lmediumconst 0000                                           ?_I2C_Start 0001  
                                        ?_clearAlarm 0001                                      ??_I2C_WriteData 0027  
                                 __end_ofi2_WriteSpi 24E2                                              postdec1 000FE5  
                                            postdec2 000FDD                                              postinc0 000FEE  
                                            postinc2 000FDE                                      ??_CheckCookDone 002F  
                                          _PORTCbits 000F82                                            _PORTDbits 000F83  
                               __size_of_BakeTempSet 0120                                    _GenerateAmplitude 1A12  
                                          _TRISAbits 000F92                                            _TRISCbits 000F94  
                                          _TRISDbits 000F95                                    __size_of_I2C_Read 0028  
                                 BakeTempSet@adcRead 00E7                                    __size_of_I2C_Wait 0012  
                                  __size_of_I2C_Stop 0008                                   ?_GenerateAmplitude 0026  
                                        ?_lcd_string 0029                                i2WriteToDac@frequency 000A  
                                  i2___lwdiv@divisor 0003                                 _WriteTimeToCookToRTC 1D6A  
                                          i2___lwdiv 2092                                  __size_of_WriteToRTC 0084  
                                __size_of_WriteToDac 0048                                    i2___lwdiv@counter 0007  
                                         main@baking 019E                                            IntToBcd@x 0030  
                                ??_GenerateAmplitude 0028                                        ??_lcd_command 0026  
                                  __size_of_GPIOInit 000E                         WriteTime@convertedHoursToBCD 00DA  
                                       _readADCInput 01BA                                       i2WriteSpi@data 0001  
                         __end_of_IntToBcd_cook_time 229C                                        __pidataCOMRAM 24A8  
                              CookTimeSet@currentMin 00D9                             __size_of_CookTimeDisplay 013A  
                          __end_of_GenerateAmplitude 1AB0                                main@bakeTempContainer 01A8  
        ReadAndDisplayHrFromRTC@hourContainerDisplay 00EA                                  __size_of_clearAlarm 003E  
                                start_initialization 196C                                       _bcd_to_decimal 2384  
                                        __end_of_ISR 0128                              _ReadAndDisplayHrFromRTC 1BD0  
                         ??_bcd_to_decimal_cook_time 0028                                ?_WriteTimeToCookToRTC 0001  
                                         ?i2___lwdiv 0001                             TimeSetting@hourContainer 0119  
                                   __CFG_OSC$INTIO67 000000                          I2C_WriteToSlave@addressByte 002A  
                                        ??_I2C_Start 0027                                    __size_of_IntToBcd 0036  
                                  _amplitudeDivision 003B                                         ??_Timer2Init 0026  
                                    _cookTimeAdcRead 0031                                        ?i2_WriteToDac 0008  
                                __end_of_lcd_command 196C                                          __pdataBANK0 0080  
                                        __pdataBANK1 01AC                                          __pdataBANK2 0200  
                           I2C_WriteControl@R_W_mode 0027                                  __size_of_lcd_string 0034  
                             __end_of_bcd_to_decimal 23AA          ReadAndDisplayMinFromRTC@minContainerDisplay 00EA  
                                  __size_of_WriteSpi 000E                                          __pbssCOMRAM 0031  
                                      __pcstackBANK0 00D9                                        __pcstackBANK1 0100  
                                IntToBcd_cook_time@x 0030                                        WriteToDac@low 00DC  
                                          _WriteTime 22D0                                             ?_AdcInit 0001  
                                           ?_AdcRead 0001                                   __end_of_Timer2Init 24A8  
                                  __size_of_lcd_char 00AE                                    __size_of_lcd_init 0020  
                   CookTimeDisplay@cookTimeContainer 011D                                          sprintf@flag 00E0  
                       TimeSetting@minContainer_1331 0117                                          sprintf@prec 00E5  
                                          _hrAdcRead 0039                                 __size_of_CookTimeSet 003E  
                                   ___lwdiv@dividend 0026                                             ?_SpiInit 0001  
                                        I2C_Read@ack 0027                                         ?_TimeSetting 00E7  
                                     ??i2_WriteToDac 000C                                            __pintcode 0008  
                                  ?_I2C_WriteControl 0027                                         ??_WriteToRTC 002D  
                                       ??_WriteToDac 002B                                       _cursorLocation 0046  
                                           ?___awdiv 0026                                             ?___awmod 0026  
                                           ?___lwdiv 0026                                             ?___lwmod 002D  
                                 ??_I2C_WriteControl 0028                                    ?_I2C_WriteToSlave 0029  
                                          _lcd_clear 2500                       WriteTimeToCookToRTC@WRITE_MODE 002D  
            __end_of_IfButtonPressedMovedToNextState 2432             __size_of_IfButtonPressedMovedToNextState 0020  
                  ??_IfButtonPressedMovedToNextState 0027                     ?_IfButtonPressedMovedToNextState 0026  
                    _IfButtonPressedMovedToNextState 2412                                   ??_I2C_WriteToSlave 002C  
                                    ?_bcd_to_decimal 0026                           __size_of_GenerateAmplitude 009E  
                          ??_ReadAndDisplayHrFromRTC 0031                                          __smallconst 1000  
                                           _I2C_Read 2334                                             _I2C_Wait 2486  
                                           _I2C_Stop 2508                                CheckCookDone@bakeDone 00DF  
                      BakeTempSet@setBakeTempDisplay 0100                               ??_WriteTimeToCookToRTC 002D  
                                         ?_WriteTime 0001                                    ??_CookTimeDisplay 0031  
                                   ___lwdiv@quotient 002B                           __end_of_InitI2C_MasterMode 2486  
                                           ?_sprintf 00DA                              __size_of_lcd_shiftRight 0008  
                                        ??i2___lwdiv 0005                                  WriteToDac@frequency 0029  
                              ReadRTCAndDisplay@time 00F1                                   __end_of_WriteToRTC 1D6A  
                                 __end_of_WriteToDac 212C                                             _T2OUTPS0 007E53  
                                           _T2OUTPS1 007E54                                             _T2OUTPS2 007E55  
                                           _T2OUTPS3 007E56                                             _GPIOInit 24B8  
                                           _LATCbits 000F8B                                             _LATDbits 000F8C  
                                       ??_clearAlarm 002D                                          _lcd_command 18BE  
                                           i2u164_40 20B4                                             _PIR1bits 000F9E  
                       BakeTempSet@bakeTempContainer 0116                                            main@F3200 0200  
                                          main@F3205 01AC                CookTimeDisplay@cookTimeContainer_1412 011B  
                                         ?_lcd_clear 0001                                            lcd_char@x 0028  
                                         _ADCON0bits 000FC2                                           _ADCON1bits 000FC1  
                                 __end_of_clearAlarm 2230                                      _readBakeTempADC 01B8  
                   __end_of_bcd_to_decimal_cook_time 23D0                       WriteTime@convertedMinutesToBCD 00D9  
                                       ??_lcd_string 002B                                            copy_data0 1980  
                                          copy_data1 19A0                                            copy_data2 19C0  
                                          copy_data3 19E0                                     __size_of_AdcInit 0006  
                                   __size_of_AdcRead 0028                                             _IntToBcd 2230  
     ReadAndDisplaySecFromRTC@secondContainerDisplay 00EA                    __size_of_ReadAndDisplayMinFromRTC 0092  
                          ?_ReadAndDisplayMinFromRTC 0001                         ReadAndDisplayHrFromRTC@hours 00E9  
                                           __Hrparam 0000                                __end_of_I2C_WriteData 24EE  
                                           __Lrparam 0000                    __size_of_ReadAndDisplaySecFromRTC 008E  
                                   __size_of_SpiInit 001E                            ?_ReadAndDisplaySecFromRTC 0001  
                                   __size_of___awdiv 0084                                     __size_of___awmod 0070  
                                   __size_of___lwdiv 0052                                   __end_of_lcd_string 22D0  
                                   __size_of___lwmod 0044                                        ??_BakeTempSet 00E9  
                                           _WriteSpi 24C6                                             _bakeTemp 01B6  
                              __end_of_CheckCookDone 1EF6                                           sprintf@val 00E3  
                                  _currentMinFromRTC 003F                                             _alarmSet 004A  
                                    ___lwdiv@divisor 0028                                      ___lwdiv@counter 002A  
                                        ??_WriteTime 0031                                             __ptext10 1C5E  
                                           __ptext11 1B42                                   _IntToBcd_cook_time 2266  
                                           __ptext20 2266                                             __ptext12 1AB0  
                                           __ptext21 1F76                                             __ptext13 1BD0  
                                           __ptext30 24E2                                             __ptext22 1DEE  
                                           __ptext14 2384                                             __ptext31 2450  
                                           __ptext23 2302                                             __ptext15 2412  
                                           __ptext40 212C                                             __ptext32 2508  
                                           __ptext24 2334                                             __ptext16 1A12  
                                           __ptext41 2040                                             __ptext33 2510  
                                           __ptext25 1492                                             __ptext17 24B8  
                                           __ptext50 235C                                             __ptext42 229C  
                                           __ptext34 2486                                             __ptext26 1E72  
                                           __ptext18 21B4                                             __ptext43 1810  
                                           __ptext35 20E4                                             __ptext27 2500  
                                           __ptext19 23AA                                             __ptext44 18BE  
                                           __ptext36 24C6                                             __ptext28 21F2  
                                           __ptext45 2518                                             __ptext37 246E  
                                           __ptext29 23D0                                             __ptext38 16F0  
                                           __ptext47 2092                                             __ptext39 15CC  
                                           __ptext48 2170                                             __ptext49 24D4  
                                           _lcd_char 1810                                 __end_ofi2_WriteToDac 21B4  
                                           _lcd_init 23F2                                     __size_of_sprintf 0124  
                                ?_IntToBcd_cook_time 0001                                        __size_of_main 0250  
                                           _iterator 0048                         I2C_WriteToSlave@slaveAddress 002C  
                                         _LCD_STATES 01BC                          ReadAndDisplayMinFromRTC@min 00E9  
                                i2WriteToDac@command 000E                                             int$flags 005A  
                               __size_of_TimeSetting 0232                                          ??_lcd_clear 0029  
                               ??_IntToBcd_cook_time 002E                                           _INTCONbits 000FF2  
                                        _secondsRead 0041                                  __end_of_BakeTempSet 1810  
                                        _tempAdcRead 0035                                       _lcd_shiftRight 24F8  
           IfButtonPressedMovedToNextState@nextState 0028                                             intlevel2 0000  
                                          sprintf@ap 00E1                                            sprintf@sp 00DA  
                                   TimeSetting@F3160 009F                                     TimeSetting@F3162 00CD  
                                   TimeSetting@F3164 00C7                                     ___lwmod@dividend 002D  
                                     AdcRead@channel 0004                                           _OSCCONbits 000FD3  
ReadAndDisplaySecFromRTC@secondContainerDisplay_1361 00E7                    __size_of_bcd_to_decimal_cook_time 0026  
                          ?_bcd_to_decimal_cook_time 0026                                     ??_bcd_to_decimal 0028  
                                        _RTC_ADDRESS 0058                                    I2C_WriteData@data 0027  
                                    _CookTimeDisplay 1492                         I2C_WriteControl@slaveAddress 0028  
   ReadAndDisplayMinFromRTC@minContainerDisplay_1349 00E7                                             sprintf@c 00E6  
                                           sprintf@f 00DC                                      ___lwmod@divisor 002F  
                                    ___lwmod@counter 00D9                                 WriteToRTC@WRITE_MODE 002D  
                             __end_of_lcd_shiftRight 2500                            __size_of_I2C_WriteControl 001E  
                          CookTimeDisplay@minDisplay 0117                                          _SSPCON1bits 000FC6  
                                        _SSPCON2bits 000FC5                                      TimeSetting@next 010F  
                                    TimeSetting@move 0109                            __size_of_I2C_WriteToSlave 0022  
                    ReadAndDisplaySecFromRTC@seconds 00E9                                        ??_CookTimeSet 0031  
                                       ?_lcd_command 0001                                   _InitI2C_MasterMode 246E  
